### YamlMime:ManagedReference
items:
- uid: Gestures.GestureMetaData
  commentId: T:Gestures.GestureMetaData
  id: GestureMetaData
  parent: Gestures
  children:
  - Gestures.GestureMetaData.averageSpeed
  - Gestures.GestureMetaData.centroid
  - Gestures.GestureMetaData.GetGestureMetaData(System.Collections.Generic.List{Gestures.GTransform})
  - Gestures.GestureMetaData.name
  - Gestures.GestureMetaData.pointCount
  - Gestures.GestureMetaData.precision
  - Gestures.GestureMetaData.scale
  - Gestures.GestureMetaData.time
  langs:
  - csharp
  - vb
  name: GestureMetaData
  nameWithType: GestureMetaData
  fullName: Gestures.GestureMetaData
  type: Class
  source:
    id: GestureMetaData
    path: ''
    startLine: 957
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nA data container class to store extra meta data about the completed gesture\n"
  example: []
  syntax:
    content: public class GestureMetaData
    content.vb: Public Class GestureMetaData
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Gestures.GestureMetaData.scale
  commentId: F:Gestures.GestureMetaData.scale
  id: scale
  parent: Gestures.GestureMetaData
  langs:
  - csharp
  - vb
  name: scale
  nameWithType: GestureMetaData.scale
  fullName: Gestures.GestureMetaData.scale
  type: Field
  source:
    id: scale
    path: ''
    startLine: 959
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: 'The scale of the gesture in world-space '
  example: []
  syntax:
    content: public Vector3 scale
    return:
      type: Vector3
    content.vb: Public scale As Vector3
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMetaData.centroid
  commentId: F:Gestures.GestureMetaData.centroid
  id: centroid
  parent: Gestures.GestureMetaData
  langs:
  - csharp
  - vb
  name: centroid
  nameWithType: GestureMetaData.centroid
  fullName: Gestures.GestureMetaData.centroid
  type: Field
  source:
    id: centroid
    path: ''
    startLine: 962
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: 'The center of the gesture in world-space '
  example: []
  syntax:
    content: public Vector3 centroid
    return:
      type: Vector3
    content.vb: Public centroid As Vector3
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMetaData.name
  commentId: F:Gestures.GestureMetaData.name
  id: name
  parent: Gestures.GestureMetaData
  langs:
  - csharp
  - vb
  name: name
  nameWithType: GestureMetaData.name
  fullName: Gestures.GestureMetaData.name
  type: Field
  source:
    id: name
    path: ''
    startLine: 965
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: 'The name of the completed gesture. '
  example: []
  syntax:
    content: public string name
    return:
      type: System.String
    content.vb: Public name As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMetaData.pointCount
  commentId: F:Gestures.GestureMetaData.pointCount
  id: pointCount
  parent: Gestures.GestureMetaData
  langs:
  - csharp
  - vb
  name: pointCount
  nameWithType: GestureMetaData.pointCount
  fullName: Gestures.GestureMetaData.pointCount
  type: Field
  source:
    id: pointCount
    path: ''
    startLine: 968
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: 'The number of points used to draw the gesture '
  example: []
  syntax:
    content: public int pointCount
    return:
      type: System.Int32
    content.vb: Public pointCount As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMetaData.time
  commentId: F:Gestures.GestureMetaData.time
  id: time
  parent: Gestures.GestureMetaData
  langs:
  - csharp
  - vb
  name: time
  nameWithType: GestureMetaData.time
  fullName: Gestures.GestureMetaData.time
  type: Field
  source:
    id: time
    path: ''
    startLine: 971
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: 'The total time it took to draw the gesture '
  example: []
  syntax:
    content: public float time
    return:
      type: System.Single
    content.vb: Public time As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMetaData.precision
  commentId: F:Gestures.GestureMetaData.precision
  id: precision
  parent: Gestures.GestureMetaData
  langs:
  - csharp
  - vb
  name: precision
  nameWithType: GestureMetaData.precision
  fullName: Gestures.GestureMetaData.precision
  type: Field
  source:
    id: precision
    path: ''
    startLine: 974
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: 'A measure of how close a gesture was to the exact definition. A perfect gesture has a precision of 0, a gesture that barely passes has a precision of 1 '
  example: []
  syntax:
    content: public float precision
    return:
      type: System.Single
    content.vb: Public precision As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMetaData.averageSpeed
  commentId: F:Gestures.GestureMetaData.averageSpeed
  id: averageSpeed
  parent: Gestures.GestureMetaData
  langs:
  - csharp
  - vb
  name: averageSpeed
  nameWithType: GestureMetaData.averageSpeed
  fullName: Gestures.GestureMetaData.averageSpeed
  type: Field
  source:
    id: averageSpeed
    path: ''
    startLine: 977
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: 'The average speed of the user&apos;s hand over the course of the gesture '
  example: []
  syntax:
    content: public float averageSpeed
    return:
      type: System.Single
    content.vb: Public averageSpeed As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMetaData.GetGestureMetaData(System.Collections.Generic.List{Gestures.GTransform})
  commentId: M:Gestures.GestureMetaData.GetGestureMetaData(System.Collections.Generic.List{Gestures.GTransform})
  id: GetGestureMetaData(System.Collections.Generic.List{Gestures.GTransform})
  parent: Gestures.GestureMetaData
  langs:
  - csharp
  - vb
  name: GetGestureMetaData(List<GTransform>)
  nameWithType: GestureMetaData.GetGestureMetaData(List<GTransform>)
  fullName: Gestures.GestureMetaData.GetGestureMetaData(System.Collections.Generic.List<Gestures.GTransform>)
  type: Method
  source:
    id: GetGestureMetaData
    path: ''
    startLine: 984
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nStatic helper method to convert a list of transforms into a partially complete GestureMetaData object\n"
  example: []
  syntax:
    content: public static GestureMetaData GetGestureMetaData(List<GTransform> transforms)
    parameters:
    - id: transforms
      type: System.Collections.Generic.List{Gestures.GTransform}
      description: The list of raw GTransform data
    return:
      type: Gestures.GestureMetaData
      description: Returns a `GestureMetaData` instance with fields populated
    content.vb: Public Shared Function GetGestureMetaData(transforms As List(Of GTransform)) As GestureMetaData
  overload: Gestures.GestureMetaData.GetGestureMetaData*
  nameWithType.vb: GestureMetaData.GetGestureMetaData(List(Of GTransform))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Gestures.GestureMetaData.GetGestureMetaData(System.Collections.Generic.List(Of Gestures.GTransform))
  name.vb: GetGestureMetaData(List(Of GTransform))
references:
- uid: Gestures
  commentId: N:Gestures
  name: Gestures
  nameWithType: Gestures
  fullName: Gestures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Vector3
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: Vector3
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Gestures.GestureMetaData.GetGestureMetaData*
  commentId: Overload:Gestures.GestureMetaData.GetGestureMetaData
  name: GetGestureMetaData
  nameWithType: GestureMetaData.GetGestureMetaData
  fullName: Gestures.GestureMetaData.GetGestureMetaData
- uid: System.Collections.Generic.List{Gestures.GTransform}
  commentId: T:System.Collections.Generic.List{Gestures.GTransform}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<GTransform>
  nameWithType: List<GTransform>
  fullName: System.Collections.Generic.List<Gestures.GTransform>
  nameWithType.vb: List(Of GTransform)
  fullName.vb: System.Collections.Generic.List(Of Gestures.GTransform)
  name.vb: List(Of GTransform)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Gestures.GTransform
    name: GTransform
    nameWithType: GTransform
    fullName: Gestures.GTransform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Gestures.GTransform
    name: GTransform
    nameWithType: GTransform
    fullName: Gestures.GTransform
  - name: )
    nameWithType: )
    fullName: )
- uid: Gestures.GestureMetaData
  commentId: T:Gestures.GestureMetaData
  parent: Gestures
  name: GestureMetaData
  nameWithType: GestureMetaData
  fullName: Gestures.GestureMetaData
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
