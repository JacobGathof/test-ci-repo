### YamlMime:ManagedReference
items:
- uid: Gestures.GestureMonitor
  commentId: T:Gestures.GestureMonitor
  id: GestureMonitor
  parent: Gestures
  children:
  - Gestures.GestureMonitor.AddGesture(System.String,Gestures.Gesture)
  - Gestures.GestureMonitor.AddGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
  - Gestures.GestureMonitor.AddGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
  - Gestures.GestureMonitor.AddGestureStartCallback(UnityAction)
  - Gestures.GestureMonitor.bufferSize
  - Gestures.GestureMonitor.ClearBuffer
  - Gestures.GestureMonitor.controller
  - Gestures.GestureMonitor.GetDataBuffer
  - Gestures.GestureMonitor.GetGestureMap
  - Gestures.GestureMonitor.GetViewNormalizer
  - Gestures.GestureMonitor.lineRenderer
  - Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks
  - Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks
  - Gestures.GestureMonitor.RemoveAllGestureStartCallbacks
  - Gestures.GestureMonitor.RemoveGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
  - Gestures.GestureMonitor.RemoveGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
  - Gestures.GestureMonitor.RemoveGestureStartCallback(UnityAction)
  - Gestures.GestureMonitor.SetBufferWrap(System.Boolean)
  - Gestures.GestureMonitor.SetMaxBufferSize(System.Int32)
  - Gestures.GestureMonitor.SetTrackAllGestures(System.Boolean)
  - Gestures.GestureMonitor.SetTrackGesture(System.Collections.Generic.List{System.String},System.Boolean)
  - Gestures.GestureMonitor.SetTrackGesture(System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: GestureMonitor
  nameWithType: GestureMonitor
  fullName: Gestures.GestureMonitor
  type: Class
  source:
    id: GestureMonitor
    path: ''
    startLine: 1025
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nClass responsible for tracking gestures. See <xref href=\"TrackerSetup\" data-throw-if-not-resolved=\"false\"></xref> for example of how to set up instance.\n"
  example: []
  syntax:
    content: 'public class GestureMonitor : MonoBehaviour'
    content.vb: >-
      Public Class GestureMonitor

          Inherits MonoBehaviour
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Gestures.GestureMonitor.lineRenderer
  commentId: F:Gestures.GestureMonitor.lineRenderer
  id: lineRenderer
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: lineRenderer
  nameWithType: GestureMonitor.lineRenderer
  fullName: Gestures.GestureMonitor.lineRenderer
  type: Field
  source:
    id: lineRenderer
    path: ''
    startLine: 1027
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  syntax:
    content: public LineRenderer lineRenderer
    return:
      type: LineRenderer
    content.vb: Public lineRenderer As LineRenderer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.controller
  commentId: F:Gestures.GestureMonitor.controller
  id: controller
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: controller
  nameWithType: GestureMonitor.controller
  fullName: Gestures.GestureMonitor.controller
  type: Field
  source:
    id: controller
    path: ''
    startLine: 1028
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  syntax:
    content: public IController controller
    return:
      type: Gestures.IController
    content.vb: Public controller As IController
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.bufferSize
  commentId: F:Gestures.GestureMonitor.bufferSize
  id: bufferSize
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: bufferSize
  nameWithType: GestureMonitor.bufferSize
  fullName: Gestures.GestureMonitor.bufferSize
  type: Field
  source:
    id: bufferSize
    path: ''
    startLine: 1033
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  syntax:
    content: public int bufferSize
    return:
      type: System.Int32
    content.vb: Public bufferSize As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.GetGestureMap
  commentId: M:Gestures.GestureMonitor.GetGestureMap
  id: GetGestureMap
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: GetGestureMap()
  nameWithType: GestureMonitor.GetGestureMap()
  fullName: Gestures.GestureMonitor.GetGestureMap()
  type: Method
  source:
    id: GetGestureMap
    path: ''
    startLine: 1153
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nGet the Dictionary storing Gestures and names.\n"
  example: []
  syntax:
    content: public Dictionary<string, Gesture> GetGestureMap()
    return:
      type: System.Collections.Generic.Dictionary{System.String,Gestures.Gesture}
      description: Dictionary mapping Gesture names to gestures
    content.vb: Public Function GetGestureMap As Dictionary(Of String, Gesture)
  overload: Gestures.GestureMonitor.GetGestureMap*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.GetViewNormalizer
  commentId: M:Gestures.GestureMonitor.GetViewNormalizer
  id: GetViewNormalizer
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: GetViewNormalizer()
  nameWithType: GestureMonitor.GetViewNormalizer()
  fullName: Gestures.GestureMonitor.GetViewNormalizer()
  type: Method
  source:
    id: GetViewNormalizer
    path: ''
    startLine: 1161
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nGet the data normalizer used by this monitor\n"
  example: []
  syntax:
    content: public Normalizer GetViewNormalizer()
    return:
      type: Gestures.Normalizer
      description: Return the class&apos;s ViewNormalizer
    content.vb: Public Function GetViewNormalizer As Normalizer
  overload: Gestures.GestureMonitor.GetViewNormalizer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.GetDataBuffer
  commentId: M:Gestures.GestureMonitor.GetDataBuffer
  id: GetDataBuffer
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: GetDataBuffer()
  nameWithType: GestureMonitor.GetDataBuffer()
  fullName: Gestures.GestureMonitor.GetDataBuffer()
  type: Method
  source:
    id: GetDataBuffer
    path: ''
    startLine: 1169
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nGet the data buffer used by this monitor\n"
  example: []
  syntax:
    content: public GTransformBuffer GetDataBuffer()
    return:
      type: Gestures.GTransformBuffer
      description: Return the class&apos;s GTransformBuffer
    content.vb: Public Function GetDataBuffer As GTransformBuffer
  overload: Gestures.GestureMonitor.GetDataBuffer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.AddGesture(System.String,Gestures.Gesture)
  commentId: M:Gestures.GestureMonitor.AddGesture(System.String,Gestures.Gesture)
  id: AddGesture(System.String,Gestures.Gesture)
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: AddGesture(String, Gesture)
  nameWithType: GestureMonitor.AddGesture(String, Gesture)
  fullName: Gestures.GestureMonitor.AddGesture(System.String, Gestures.Gesture)
  type: Method
  source:
    id: AddGesture
    path: ''
    startLine: 1178
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nAdd a new Gesture to be tracked\n"
  example: []
  syntax:
    content: public void AddGesture(string name, Gesture g)
    parameters:
    - id: name
      type: System.String
      description: The name to reference the Gesture by
    - id: g
      type: Gestures.Gesture
      description: The instance of a Gesture to track
    content.vb: Public Sub AddGesture(name As String, g As Gesture)
  overload: Gestures.GestureMonitor.AddGesture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.SetTrackGesture(System.String,System.Boolean)
  commentId: M:Gestures.GestureMonitor.SetTrackGesture(System.String,System.Boolean)
  id: SetTrackGesture(System.String,System.Boolean)
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: SetTrackGesture(String, Boolean)
  nameWithType: GestureMonitor.SetTrackGesture(String, Boolean)
  fullName: Gestures.GestureMonitor.SetTrackGesture(System.String, System.Boolean)
  type: Method
  source:
    id: SetTrackGesture
    path: ''
    startLine: 1188
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nSet the tracking state for a single Gesture\n"
  example: []
  syntax:
    content: public void SetTrackGesture(string gname, bool enabled)
    parameters:
    - id: gname
      type: System.String
      description: The name of the Gesture to set the tracking state of
    - id: enabled
      type: System.Boolean
      description: '`True` if the Gesture should be enabled, `False` otherwise'
    content.vb: Public Sub SetTrackGesture(gname As String, enabled As Boolean)
  overload: Gestures.GestureMonitor.SetTrackGesture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.SetTrackGesture(System.Collections.Generic.List{System.String},System.Boolean)
  commentId: M:Gestures.GestureMonitor.SetTrackGesture(System.Collections.Generic.List{System.String},System.Boolean)
  id: SetTrackGesture(System.Collections.Generic.List{System.String},System.Boolean)
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: SetTrackGesture(List<String>, Boolean)
  nameWithType: GestureMonitor.SetTrackGesture(List<String>, Boolean)
  fullName: Gestures.GestureMonitor.SetTrackGesture(System.Collections.Generic.List<System.String>, System.Boolean)
  type: Method
  source:
    id: SetTrackGesture
    path: ''
    startLine: 1202
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nSet the tracking state for a list of Gestures\n"
  example: []
  syntax:
    content: public void SetTrackGesture(List<string> names, bool enabled)
    parameters:
    - id: names
      type: System.Collections.Generic.List{System.String}
      description: The names of all Gestures to set the tracking state of
    - id: enabled
      type: System.Boolean
      description: '`True` if the Gestures should be enabled, `False` otherwise'
    content.vb: Public Sub SetTrackGesture(names As List(Of String), enabled As Boolean)
  overload: Gestures.GestureMonitor.SetTrackGesture*
  nameWithType.vb: GestureMonitor.SetTrackGesture(List(Of String), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gestures.GestureMonitor.SetTrackGesture(System.Collections.Generic.List(Of System.String), System.Boolean)
  name.vb: SetTrackGesture(List(Of String), Boolean)
- uid: Gestures.GestureMonitor.SetTrackAllGestures(System.Boolean)
  commentId: M:Gestures.GestureMonitor.SetTrackAllGestures(System.Boolean)
  id: SetTrackAllGestures(System.Boolean)
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: SetTrackAllGestures(Boolean)
  nameWithType: GestureMonitor.SetTrackAllGestures(Boolean)
  fullName: Gestures.GestureMonitor.SetTrackAllGestures(System.Boolean)
  type: Method
  source:
    id: SetTrackAllGestures
    path: ''
    startLine: 1212
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nSet the tracking state for all Gestures\n"
  example: []
  syntax:
    content: public void SetTrackAllGestures(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
      description: '`True` if all Gestures should be enabled, `False` otherwise'
    content.vb: Public Sub SetTrackAllGestures(enabled As Boolean)
  overload: Gestures.GestureMonitor.SetTrackAllGestures*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.AddGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
  commentId: M:Gestures.GestureMonitor.AddGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
  id: AddGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: AddGestureCompleteCallback(UnityAction<GestureMetaData>)
  nameWithType: GestureMonitor.AddGestureCompleteCallback(UnityAction<GestureMetaData>)
  fullName: Gestures.GestureMonitor.AddGestureCompleteCallback(UnityAction<Gestures.GestureMetaData>)
  type: Method
  source:
    id: AddGestureCompleteCallback
    path: ''
    startLine: 1227
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nAdd an event listener for when a user completes a valid Gesture\n"
  example: []
  syntax:
    content: public void AddGestureCompleteCallback(UnityAction<GestureMetaData> eve)
    parameters:
    - id: eve
      type: UnityAction{Gestures.GestureMetaData}
      description: ''
    content.vb: Public Sub AddGestureCompleteCallback(eve As UnityAction(Of GestureMetaData))
  overload: Gestures.GestureMonitor.AddGestureCompleteCallback*
  nameWithType.vb: GestureMonitor.AddGestureCompleteCallback(UnityAction(Of GestureMetaData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gestures.GestureMonitor.AddGestureCompleteCallback(UnityAction(Of Gestures.GestureMetaData))
  name.vb: AddGestureCompleteCallback(UnityAction(Of GestureMetaData))
- uid: Gestures.GestureMonitor.RemoveGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
  commentId: M:Gestures.GestureMonitor.RemoveGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
  id: RemoveGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: RemoveGestureCompleteCallback(UnityAction<GestureMetaData>)
  nameWithType: GestureMonitor.RemoveGestureCompleteCallback(UnityAction<GestureMetaData>)
  fullName: Gestures.GestureMonitor.RemoveGestureCompleteCallback(UnityAction<Gestures.GestureMetaData>)
  type: Method
  source:
    id: RemoveGestureCompleteCallback
    path: ''
    startLine: 1235
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nRemove an event listener for when a user completes a valid Gesture\n"
  example: []
  syntax:
    content: public void RemoveGestureCompleteCallback(UnityAction<GestureMetaData> eve)
    parameters:
    - id: eve
      type: UnityAction{Gestures.GestureMetaData}
      description: ''
    content.vb: Public Sub RemoveGestureCompleteCallback(eve As UnityAction(Of GestureMetaData))
  overload: Gestures.GestureMonitor.RemoveGestureCompleteCallback*
  nameWithType.vb: GestureMonitor.RemoveGestureCompleteCallback(UnityAction(Of GestureMetaData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gestures.GestureMonitor.RemoveGestureCompleteCallback(UnityAction(Of Gestures.GestureMetaData))
  name.vb: RemoveGestureCompleteCallback(UnityAction(Of GestureMetaData))
- uid: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks
  commentId: M:Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks
  id: RemoveAllGestureCompleteCallbacks
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: RemoveAllGestureCompleteCallbacks()
  nameWithType: GestureMonitor.RemoveAllGestureCompleteCallbacks()
  fullName: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks()
  type: Method
  source:
    id: RemoveAllGestureCompleteCallbacks
    path: ''
    startLine: 1242
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nRemove all event listeners for when a user completes a valid Gesture\n"
  example: []
  syntax:
    content: public void RemoveAllGestureCompleteCallbacks()
    content.vb: Public Sub RemoveAllGestureCompleteCallbacks
  overload: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.AddGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
  commentId: M:Gestures.GestureMonitor.AddGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
  id: AddGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: AddGestureFailedCallback(UnityAction<GestureMetaData>)
  nameWithType: GestureMonitor.AddGestureFailedCallback(UnityAction<GestureMetaData>)
  fullName: Gestures.GestureMonitor.AddGestureFailedCallback(UnityAction<Gestures.GestureMetaData>)
  type: Method
  source:
    id: AddGestureFailedCallback
    path: ''
    startLine: 1256
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nAdd an event listener for when a user fails to complete a valid Gesture\n"
  example: []
  syntax:
    content: public void AddGestureFailedCallback(UnityAction<GestureMetaData> eve)
    parameters:
    - id: eve
      type: UnityAction{Gestures.GestureMetaData}
      description: ''
    content.vb: Public Sub AddGestureFailedCallback(eve As UnityAction(Of GestureMetaData))
  overload: Gestures.GestureMonitor.AddGestureFailedCallback*
  nameWithType.vb: GestureMonitor.AddGestureFailedCallback(UnityAction(Of GestureMetaData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gestures.GestureMonitor.AddGestureFailedCallback(UnityAction(Of Gestures.GestureMetaData))
  name.vb: AddGestureFailedCallback(UnityAction(Of GestureMetaData))
- uid: Gestures.GestureMonitor.RemoveGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
  commentId: M:Gestures.GestureMonitor.RemoveGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
  id: RemoveGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: RemoveGestureFailedCallback(UnityAction<GestureMetaData>)
  nameWithType: GestureMonitor.RemoveGestureFailedCallback(UnityAction<GestureMetaData>)
  fullName: Gestures.GestureMonitor.RemoveGestureFailedCallback(UnityAction<Gestures.GestureMetaData>)
  type: Method
  source:
    id: RemoveGestureFailedCallback
    path: ''
    startLine: 1264
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nRemove an event listener for when a user fails to complete a valid Gesture\n"
  example: []
  syntax:
    content: public void RemoveGestureFailedCallback(UnityAction<GestureMetaData> eve)
    parameters:
    - id: eve
      type: UnityAction{Gestures.GestureMetaData}
      description: ''
    content.vb: Public Sub RemoveGestureFailedCallback(eve As UnityAction(Of GestureMetaData))
  overload: Gestures.GestureMonitor.RemoveGestureFailedCallback*
  nameWithType.vb: GestureMonitor.RemoveGestureFailedCallback(UnityAction(Of GestureMetaData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Gestures.GestureMonitor.RemoveGestureFailedCallback(UnityAction(Of Gestures.GestureMetaData))
  name.vb: RemoveGestureFailedCallback(UnityAction(Of GestureMetaData))
- uid: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks
  commentId: M:Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks
  id: RemoveAllGestureFailedCallbacks
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: RemoveAllGestureFailedCallbacks()
  nameWithType: GestureMonitor.RemoveAllGestureFailedCallbacks()
  fullName: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks()
  type: Method
  source:
    id: RemoveAllGestureFailedCallbacks
    path: ''
    startLine: 1271
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nRemove all event listeners for when a user fails to complete a valid Gesture\n"
  example: []
  syntax:
    content: public void RemoveAllGestureFailedCallbacks()
    content.vb: Public Sub RemoveAllGestureFailedCallbacks
  overload: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.AddGestureStartCallback(UnityAction)
  commentId: M:Gestures.GestureMonitor.AddGestureStartCallback(UnityAction)
  id: AddGestureStartCallback(UnityAction)
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: AddGestureStartCallback(UnityAction)
  nameWithType: GestureMonitor.AddGestureStartCallback(UnityAction)
  fullName: Gestures.GestureMonitor.AddGestureStartCallback(UnityAction)
  type: Method
  source:
    id: AddGestureStartCallback
    path: ''
    startLine: 1283
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nAdd an event listener for when a user starts drawing a Gesture\n"
  example: []
  syntax:
    content: public void AddGestureStartCallback(UnityAction eve)
    parameters:
    - id: eve
      type: UnityAction
    content.vb: Public Sub AddGestureStartCallback(eve As UnityAction)
  overload: Gestures.GestureMonitor.AddGestureStartCallback*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.RemoveGestureStartCallback(UnityAction)
  commentId: M:Gestures.GestureMonitor.RemoveGestureStartCallback(UnityAction)
  id: RemoveGestureStartCallback(UnityAction)
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: RemoveGestureStartCallback(UnityAction)
  nameWithType: GestureMonitor.RemoveGestureStartCallback(UnityAction)
  fullName: Gestures.GestureMonitor.RemoveGestureStartCallback(UnityAction)
  type: Method
  source:
    id: RemoveGestureStartCallback
    path: ''
    startLine: 1290
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nRemove an event listeners for when a user starts drawing a Gesture\n"
  example: []
  syntax:
    content: public void RemoveGestureStartCallback(UnityAction eve)
    parameters:
    - id: eve
      type: UnityAction
    content.vb: Public Sub RemoveGestureStartCallback(eve As UnityAction)
  overload: Gestures.GestureMonitor.RemoveGestureStartCallback*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks
  commentId: M:Gestures.GestureMonitor.RemoveAllGestureStartCallbacks
  id: RemoveAllGestureStartCallbacks
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: RemoveAllGestureStartCallbacks()
  nameWithType: GestureMonitor.RemoveAllGestureStartCallbacks()
  fullName: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks()
  type: Method
  source:
    id: RemoveAllGestureStartCallbacks
    path: ''
    startLine: 1297
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nRemove all event listeners for when a user starts drawing a Gesture\n"
  example: []
  syntax:
    content: public void RemoveAllGestureStartCallbacks()
    content.vb: Public Sub RemoveAllGestureStartCallbacks
  overload: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.SetMaxBufferSize(System.Int32)
  commentId: M:Gestures.GestureMonitor.SetMaxBufferSize(System.Int32)
  id: SetMaxBufferSize(System.Int32)
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: SetMaxBufferSize(Int32)
  nameWithType: GestureMonitor.SetMaxBufferSize(Int32)
  fullName: Gestures.GestureMonitor.SetMaxBufferSize(System.Int32)
  type: Method
  source:
    id: SetMaxBufferSize
    path: ''
    startLine: 1306
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nSet the max capacity of the transform buffer\n"
  example: []
  syntax:
    content: public void SetMaxBufferSize(int size)
    parameters:
    - id: size
      type: System.Int32
      description: Set the number of GTransforms that the buffer can hold. Default is 512
    content.vb: Public Sub SetMaxBufferSize(size As Integer)
  overload: Gestures.GestureMonitor.SetMaxBufferSize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.SetBufferWrap(System.Boolean)
  commentId: M:Gestures.GestureMonitor.SetBufferWrap(System.Boolean)
  id: SetBufferWrap(System.Boolean)
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: SetBufferWrap(Boolean)
  nameWithType: GestureMonitor.SetBufferWrap(Boolean)
  fullName: Gestures.GestureMonitor.SetBufferWrap(System.Boolean)
  type: Method
  source:
    id: SetBufferWrap
    path: ''
    startLine: 1314
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nSet whether the buffer should act as a standard array or a circular array\n"
  example: []
  syntax:
    content: public void SetBufferWrap(bool circular)
    parameters:
    - id: circular
      type: System.Boolean
      description: '`True` if the buffer should wrap, `False` otherwise'
    content.vb: Public Sub SetBufferWrap(circular As Boolean)
  overload: Gestures.GestureMonitor.SetBufferWrap*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.GestureMonitor.ClearBuffer
  commentId: M:Gestures.GestureMonitor.ClearBuffer
  id: ClearBuffer
  parent: Gestures.GestureMonitor
  langs:
  - csharp
  - vb
  name: ClearBuffer()
  nameWithType: GestureMonitor.ClearBuffer()
  fullName: Gestures.GestureMonitor.ClearBuffer()
  type: Method
  source:
    id: ClearBuffer
    path: ''
    startLine: 1321
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nClear the buffer of all Transforms and erase all positions from the attached LineRenderer\n"
  example: []
  syntax:
    content: public void ClearBuffer()
    content.vb: Public Sub ClearBuffer
  overload: Gestures.GestureMonitor.ClearBuffer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TrackerSetup
  commentId: T:TrackerSetup
  isExternal: true
- uid: Gestures
  commentId: N:Gestures
  name: Gestures
  nameWithType: Gestures
  fullName: Gestures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: LineRenderer
  commentId: '!:LineRenderer'
  isExternal: true
  name: LineRenderer
  nameWithType: LineRenderer
  fullName: LineRenderer
- uid: Gestures.IController
  commentId: T:Gestures.IController
  parent: Gestures
  name: IController
  nameWithType: IController
  fullName: Gestures.IController
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Gestures.GestureMonitor.GetGestureMap*
  commentId: Overload:Gestures.GestureMonitor.GetGestureMap
  name: GetGestureMap
  nameWithType: GestureMonitor.GetGestureMap
  fullName: Gestures.GestureMonitor.GetGestureMap
- uid: System.Collections.Generic.Dictionary{System.String,Gestures.Gesture}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Gestures.Gesture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Gesture>
  nameWithType: Dictionary<String, Gesture>
  fullName: System.Collections.Generic.Dictionary<System.String, Gestures.Gesture>
  nameWithType.vb: Dictionary(Of String, Gesture)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Gestures.Gesture)
  name.vb: Dictionary(Of String, Gesture)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Gestures.Gesture
    name: Gesture
    nameWithType: Gesture
    fullName: Gestures.Gesture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Gestures.Gesture
    name: Gesture
    nameWithType: Gesture
    fullName: Gestures.Gesture
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Gestures.GestureMonitor.GetViewNormalizer*
  commentId: Overload:Gestures.GestureMonitor.GetViewNormalizer
  name: GetViewNormalizer
  nameWithType: GestureMonitor.GetViewNormalizer
  fullName: Gestures.GestureMonitor.GetViewNormalizer
- uid: Gestures.Normalizer
  commentId: T:Gestures.Normalizer
  parent: Gestures
  name: Normalizer
  nameWithType: Normalizer
  fullName: Gestures.Normalizer
- uid: Gestures.GestureMonitor.GetDataBuffer*
  commentId: Overload:Gestures.GestureMonitor.GetDataBuffer
  name: GetDataBuffer
  nameWithType: GestureMonitor.GetDataBuffer
  fullName: Gestures.GestureMonitor.GetDataBuffer
- uid: Gestures.GTransformBuffer
  commentId: T:Gestures.GTransformBuffer
  parent: Gestures
  name: GTransformBuffer
  nameWithType: GTransformBuffer
  fullName: Gestures.GTransformBuffer
- uid: Gestures.GestureMonitor.AddGesture*
  commentId: Overload:Gestures.GestureMonitor.AddGesture
  name: AddGesture
  nameWithType: GestureMonitor.AddGesture
  fullName: Gestures.GestureMonitor.AddGesture
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Gestures.Gesture
  commentId: T:Gestures.Gesture
  parent: Gestures
  name: Gesture
  nameWithType: Gesture
  fullName: Gestures.Gesture
- uid: Gestures.GestureMonitor.SetTrackGesture*
  commentId: Overload:Gestures.GestureMonitor.SetTrackGesture
  name: SetTrackGesture
  nameWithType: GestureMonitor.SetTrackGesture
  fullName: Gestures.GestureMonitor.SetTrackGesture
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Gestures.GestureMonitor.SetTrackAllGestures*
  commentId: Overload:Gestures.GestureMonitor.SetTrackAllGestures
  name: SetTrackAllGestures
  nameWithType: GestureMonitor.SetTrackAllGestures
  fullName: Gestures.GestureMonitor.SetTrackAllGestures
- uid: Gestures.GestureMonitor.AddGestureCompleteCallback*
  commentId: Overload:Gestures.GestureMonitor.AddGestureCompleteCallback
  name: AddGestureCompleteCallback
  nameWithType: GestureMonitor.AddGestureCompleteCallback
  fullName: Gestures.GestureMonitor.AddGestureCompleteCallback
- uid: UnityAction{Gestures.GestureMetaData}
  commentId: '!:UnityAction{Gestures.GestureMetaData}'
  definition: UnityAction`1
  name: UnityAction<GestureMetaData>
  nameWithType: UnityAction<GestureMetaData>
  fullName: UnityAction<Gestures.GestureMetaData>
  nameWithType.vb: UnityAction(Of GestureMetaData)
  fullName.vb: UnityAction(Of Gestures.GestureMetaData)
  name.vb: UnityAction(Of GestureMetaData)
  spec.csharp:
  - uid: UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Gestures.GestureMetaData
    name: GestureMetaData
    nameWithType: GestureMetaData
    fullName: Gestures.GestureMetaData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Gestures.GestureMetaData
    name: GestureMetaData
    nameWithType: GestureMetaData
    fullName: Gestures.GestureMetaData
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityAction`1
  isExternal: true
  name: UnityAction<>
  nameWithType: UnityAction<>
  fullName: UnityAction<>
  nameWithType.vb: UnityAction(Of )
  fullName.vb: UnityAction(Of )
  name.vb: UnityAction(Of )
  spec.csharp:
  - uid: UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Gestures.GestureMonitor.RemoveGestureCompleteCallback*
  commentId: Overload:Gestures.GestureMonitor.RemoveGestureCompleteCallback
  name: RemoveGestureCompleteCallback
  nameWithType: GestureMonitor.RemoveGestureCompleteCallback
  fullName: Gestures.GestureMonitor.RemoveGestureCompleteCallback
- uid: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks*
  commentId: Overload:Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks
  name: RemoveAllGestureCompleteCallbacks
  nameWithType: GestureMonitor.RemoveAllGestureCompleteCallbacks
  fullName: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks
- uid: Gestures.GestureMonitor.AddGestureFailedCallback*
  commentId: Overload:Gestures.GestureMonitor.AddGestureFailedCallback
  name: AddGestureFailedCallback
  nameWithType: GestureMonitor.AddGestureFailedCallback
  fullName: Gestures.GestureMonitor.AddGestureFailedCallback
- uid: Gestures.GestureMonitor.RemoveGestureFailedCallback*
  commentId: Overload:Gestures.GestureMonitor.RemoveGestureFailedCallback
  name: RemoveGestureFailedCallback
  nameWithType: GestureMonitor.RemoveGestureFailedCallback
  fullName: Gestures.GestureMonitor.RemoveGestureFailedCallback
- uid: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks*
  commentId: Overload:Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks
  name: RemoveAllGestureFailedCallbacks
  nameWithType: GestureMonitor.RemoveAllGestureFailedCallbacks
  fullName: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks
- uid: Gestures.GestureMonitor.AddGestureStartCallback*
  commentId: Overload:Gestures.GestureMonitor.AddGestureStartCallback
  name: AddGestureStartCallback
  nameWithType: GestureMonitor.AddGestureStartCallback
  fullName: Gestures.GestureMonitor.AddGestureStartCallback
- uid: UnityAction
  isExternal: true
  name: UnityAction
  nameWithType: UnityAction
  fullName: UnityAction
- uid: Gestures.GestureMonitor.RemoveGestureStartCallback*
  commentId: Overload:Gestures.GestureMonitor.RemoveGestureStartCallback
  name: RemoveGestureStartCallback
  nameWithType: GestureMonitor.RemoveGestureStartCallback
  fullName: Gestures.GestureMonitor.RemoveGestureStartCallback
- uid: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks*
  commentId: Overload:Gestures.GestureMonitor.RemoveAllGestureStartCallbacks
  name: RemoveAllGestureStartCallbacks
  nameWithType: GestureMonitor.RemoveAllGestureStartCallbacks
  fullName: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks
- uid: Gestures.GestureMonitor.SetMaxBufferSize*
  commentId: Overload:Gestures.GestureMonitor.SetMaxBufferSize
  name: SetMaxBufferSize
  nameWithType: GestureMonitor.SetMaxBufferSize
  fullName: Gestures.GestureMonitor.SetMaxBufferSize
- uid: Gestures.GestureMonitor.SetBufferWrap*
  commentId: Overload:Gestures.GestureMonitor.SetBufferWrap
  name: SetBufferWrap
  nameWithType: GestureMonitor.SetBufferWrap
  fullName: Gestures.GestureMonitor.SetBufferWrap
- uid: Gestures.GestureMonitor.ClearBuffer*
  commentId: Overload:Gestures.GestureMonitor.ClearBuffer
  name: ClearBuffer
  nameWithType: GestureMonitor.ClearBuffer
  fullName: Gestures.GestureMonitor.ClearBuffer
