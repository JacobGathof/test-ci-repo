### YamlMime:ManagedReference
items:
- uid: Gestures.LineCheck
  commentId: T:Gestures.LineCheck
  id: LineCheck
  parent: Gestures
  children:
  - Gestures.LineCheck.#ctor(Vector3,Vector3,System.Single)
  - Gestures.LineCheck.CheckPasses(Gestures.GTransform)
  - Gestures.LineCheck.firstPosition
  - Gestures.LineCheck.GetClosestPointOnLineSegment(Vector3,Vector3,Vector3)
  - Gestures.LineCheck.precision
  - Gestures.LineCheck.secondPosition
  - Gestures.LineCheck.VisualizeCheck(Rect)
  langs:
  - csharp
  - vb
  name: LineCheck
  nameWithType: LineCheck
  fullName: Gestures.LineCheck
  type: Class
  source:
    id: LineCheck
    path: ''
    startLine: 486
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\nA Line check to check if \n"
  example: []
  syntax:
    content: 'public class LineCheck : Check'
    content.vb: >-
      Public Class LineCheck

          Inherits Check
  inheritance:
  - System.Object
  - Gestures.Check
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Gestures.LineCheck.firstPosition
  commentId: F:Gestures.LineCheck.firstPosition
  id: firstPosition
  parent: Gestures.LineCheck
  langs:
  - csharp
  - vb
  name: firstPosition
  nameWithType: LineCheck.firstPosition
  fullName: Gestures.LineCheck.firstPosition
  type: Field
  source:
    id: firstPosition
    path: ''
    startLine: 488
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  syntax:
    content: public Vector3 firstPosition
    return:
      type: Vector3
    content.vb: Public firstPosition As Vector3
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.LineCheck.secondPosition
  commentId: F:Gestures.LineCheck.secondPosition
  id: secondPosition
  parent: Gestures.LineCheck
  langs:
  - csharp
  - vb
  name: secondPosition
  nameWithType: LineCheck.secondPosition
  fullName: Gestures.LineCheck.secondPosition
  type: Field
  source:
    id: secondPosition
    path: ''
    startLine: 489
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  syntax:
    content: public Vector3 secondPosition
    return:
      type: Vector3
    content.vb: Public secondPosition As Vector3
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.LineCheck.precision
  commentId: F:Gestures.LineCheck.precision
  id: precision
  parent: Gestures.LineCheck
  langs:
  - csharp
  - vb
  name: precision
  nameWithType: LineCheck.precision
  fullName: Gestures.LineCheck.precision
  type: Field
  source:
    id: precision
    path: ''
    startLine: 490
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  syntax:
    content: public float precision
    return:
      type: System.Single
    content.vb: Public precision As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.LineCheck.#ctor(Vector3,Vector3,System.Single)
  commentId: M:Gestures.LineCheck.#ctor(Vector3,Vector3,System.Single)
  id: '#ctor(Vector3,Vector3,System.Single)'
  parent: Gestures.LineCheck
  langs:
  - csharp
  - vb
  name: LineCheck(Vector3, Vector3, Single)
  nameWithType: LineCheck.LineCheck(Vector3, Vector3, Single)
  fullName: Gestures.LineCheck.LineCheck(Vector3, Vector3, System.Single)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 498
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  summary: "\n\n"
  example: []
  syntax:
    content: public LineCheck(Vector3 firstPosition, Vector3 secondPosition, float precision = 0.4F)
    parameters:
    - id: firstPosition
      type: Vector3
      description: The first point of the line.
    - id: secondPosition
      type: Vector3
      description: The second point of the line.
    - id: precision
      type: System.Single
      description: Distance from the line considered to be on the line.
    content.vb: Public Sub New(firstPosition As Vector3, secondPosition As Vector3, precision As Single = 0.4F)
  overload: Gestures.LineCheck.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.LineCheck.CheckPasses(Gestures.GTransform)
  commentId: M:Gestures.LineCheck.CheckPasses(Gestures.GTransform)
  id: CheckPasses(Gestures.GTransform)
  parent: Gestures.LineCheck
  langs:
  - csharp
  - vb
  name: CheckPasses(GTransform)
  nameWithType: LineCheck.CheckPasses(GTransform)
  fullName: Gestures.LineCheck.CheckPasses(Gestures.GTransform)
  type: Method
  source:
    id: CheckPasses
    path: ''
    startLine: 504
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  syntax:
    content: public override float CheckPasses(GTransform g)
    parameters:
    - id: g
      type: Gestures.GTransform
    return:
      type: System.Single
    content.vb: Public Overrides Function CheckPasses(g As GTransform) As Single
  overridden: Gestures.Check.CheckPasses(Gestures.GTransform)
  overload: Gestures.LineCheck.CheckPasses*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Gestures.LineCheck.GetClosestPointOnLineSegment(Vector3,Vector3,Vector3)
  commentId: M:Gestures.LineCheck.GetClosestPointOnLineSegment(Vector3,Vector3,Vector3)
  id: GetClosestPointOnLineSegment(Vector3,Vector3,Vector3)
  parent: Gestures.LineCheck
  langs:
  - csharp
  - vb
  name: GetClosestPointOnLineSegment(Vector3, Vector3, Vector3)
  nameWithType: LineCheck.GetClosestPointOnLineSegment(Vector3, Vector3, Vector3)
  fullName: Gestures.LineCheck.GetClosestPointOnLineSegment(Vector3, Vector3, Vector3)
  type: Method
  source:
    id: GetClosestPointOnLineSegment
    path: ''
    startLine: 515
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  syntax:
    content: public Vector3 GetClosestPointOnLineSegment(Vector3 A, Vector3 B, Vector3 P)
    parameters:
    - id: A
      type: Vector3
    - id: B
      type: Vector3
    - id: P
      type: Vector3
    return:
      type: Vector3
    content.vb: Public Function GetClosestPointOnLineSegment(A As Vector3, B As Vector3, P As Vector3) As Vector3
  overload: Gestures.LineCheck.GetClosestPointOnLineSegment*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Gestures.LineCheck.VisualizeCheck(Rect)
  commentId: M:Gestures.LineCheck.VisualizeCheck(Rect)
  id: VisualizeCheck(Rect)
  parent: Gestures.LineCheck
  langs:
  - csharp
  - vb
  name: VisualizeCheck(Rect)
  nameWithType: LineCheck.VisualizeCheck(Rect)
  fullName: Gestures.LineCheck.VisualizeCheck(Rect)
  type: Method
  source:
    id: VisualizeCheck
    path: ''
    startLine: 534
  assemblies:
  - cs.temp.dll
  namespace: Gestures
  syntax:
    content: public override void VisualizeCheck(Rect grid)
    parameters:
    - id: grid
      type: Rect
    content.vb: Public Overrides Sub VisualizeCheck(grid As Rect)
  overridden: Gestures.Check.VisualizeCheck(Rect)
  overload: Gestures.LineCheck.VisualizeCheck*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Gestures
  commentId: N:Gestures
  name: Gestures
  nameWithType: Gestures
  fullName: Gestures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Gestures.Check
  commentId: T:Gestures.Check
  parent: Gestures
  name: Check
  nameWithType: Check
  fullName: Gestures.Check
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Vector3
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: Vector3
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Gestures.LineCheck.#ctor*
  commentId: Overload:Gestures.LineCheck.#ctor
  name: LineCheck
  nameWithType: LineCheck.LineCheck
  fullName: Gestures.LineCheck.LineCheck
- uid: Gestures.Check.CheckPasses(Gestures.GTransform)
  commentId: M:Gestures.Check.CheckPasses(Gestures.GTransform)
  parent: Gestures.Check
  name: CheckPasses(GTransform)
  nameWithType: Check.CheckPasses(GTransform)
  fullName: Gestures.Check.CheckPasses(Gestures.GTransform)
  spec.csharp:
  - uid: Gestures.Check.CheckPasses(Gestures.GTransform)
    name: CheckPasses
    nameWithType: Check.CheckPasses
    fullName: Gestures.Check.CheckPasses
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gestures.GTransform
    name: GTransform
    nameWithType: GTransform
    fullName: Gestures.GTransform
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Gestures.Check.CheckPasses(Gestures.GTransform)
    name: CheckPasses
    nameWithType: Check.CheckPasses
    fullName: Gestures.Check.CheckPasses
  - name: (
    nameWithType: (
    fullName: (
  - uid: Gestures.GTransform
    name: GTransform
    nameWithType: GTransform
    fullName: Gestures.GTransform
  - name: )
    nameWithType: )
    fullName: )
- uid: Gestures.LineCheck.CheckPasses*
  commentId: Overload:Gestures.LineCheck.CheckPasses
  name: CheckPasses
  nameWithType: LineCheck.CheckPasses
  fullName: Gestures.LineCheck.CheckPasses
- uid: Gestures.GTransform
  commentId: T:Gestures.GTransform
  parent: Gestures
  name: GTransform
  nameWithType: GTransform
  fullName: Gestures.GTransform
- uid: Gestures.LineCheck.GetClosestPointOnLineSegment*
  commentId: Overload:Gestures.LineCheck.GetClosestPointOnLineSegment
  name: GetClosestPointOnLineSegment
  nameWithType: LineCheck.GetClosestPointOnLineSegment
  fullName: Gestures.LineCheck.GetClosestPointOnLineSegment
- uid: Gestures.Check.VisualizeCheck(Rect)
  commentId: M:Gestures.Check.VisualizeCheck(Rect)
  parent: Gestures.Check
  isExternal: true
  name: VisualizeCheck(Rect)
  nameWithType: Check.VisualizeCheck(Rect)
  fullName: Gestures.Check.VisualizeCheck(Rect)
  spec.csharp:
  - uid: Gestures.Check.VisualizeCheck(Rect)
    name: VisualizeCheck
    nameWithType: Check.VisualizeCheck
    fullName: Gestures.Check.VisualizeCheck
  - name: (
    nameWithType: (
    fullName: (
  - uid: Rect
    name: Rect
    nameWithType: Rect
    fullName: Rect
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Gestures.Check.VisualizeCheck(Rect)
    name: VisualizeCheck
    nameWithType: Check.VisualizeCheck
    fullName: Gestures.Check.VisualizeCheck
  - name: (
    nameWithType: (
    fullName: (
  - uid: Rect
    name: Rect
    nameWithType: Rect
    fullName: Rect
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Gestures.LineCheck.VisualizeCheck*
  commentId: Overload:Gestures.LineCheck.VisualizeCheck
  name: VisualizeCheck
  nameWithType: LineCheck.VisualizeCheck
  fullName: Gestures.LineCheck.VisualizeCheck
- uid: Rect
  isExternal: true
  name: Rect
  nameWithType: Rect
  fullName: Rect
