id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: Gestures
  commentId: N:Gestures
  language: CSharp
  name:
    CSharp: Gestures
    VB: Gestures
  nameWithType:
    CSharp: Gestures
    VB: Gestures
  qualifiedName:
    CSharp: Gestures
    VB: Gestures
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Gestures.CircleGesture
    commentId: T:Gestures.CircleGesture
    language: CSharp
    name:
      CSharp: CircleGesture
      VB: CircleGesture
    nameWithType:
      CSharp: CircleGesture
      VB: CircleGesture
    qualifiedName:
      CSharp: Gestures.CircleGesture
      VB: Gestures.CircleGesture
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: CircleGesture
      path: ''
      startLine: 244
    summary: "\nA circle gesture set with a FittedNormalizer.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CircleGesture : Gesture'
        VB: >-
          Public Class CircleGesture

              Inherits Gesture
    inheritance:
    - System.Object
    - Gestures.Gesture
    inheritedMembers:
    - Gestures.Gesture.checks
    - Gestures.Gesture.sequentialChecks
    - Gestures.Gesture.alwaysChecks
    - Gestures.Gesture.isEnabled
    - Gestures.Gesture.normalizer
    - Gestures.Gesture.completeEvent
    - Gestures.Gesture.gestureCompleteConfidence
    - Gestures.Gesture.gestureCompletionPrecision
    - Gestures.Gesture.GestureCompleted(System.Collections.Generic.List{Gestures.GTransform})
    - Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
    - Gestures.Gesture.AddEvent(UnityAction{Gestures.GestureMetaData})
    - Gestures.Gesture.ClearEvents
    - Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
    - Gestures.Gesture.AddOnceCheck(Gestures.Check)
    - Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
    - Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.AddSequentialCheck(Gestures.Check)
    - Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.VisualizeGesture(Rect)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.CircleGesture.#ctor
      commentId: M:Gestures.CircleGesture.#ctor
      language: CSharp
      name:
        CSharp: CircleGesture()
        VB: CircleGesture()
      nameWithType:
        CSharp: CircleGesture.CircleGesture()
        VB: CircleGesture.CircleGesture()
      qualifiedName:
        CSharp: Gestures.CircleGesture.CircleGesture()
        VB: Gestures.CircleGesture.CircleGesture()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 245
      syntax:
        content:
          CSharp: public CircleGesture()
          VB: Public Sub New
      overload: Gestures.CircleGesture.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Gestures.HeartGesture
    commentId: T:Gestures.HeartGesture
    language: CSharp
    name:
      CSharp: HeartGesture
      VB: HeartGesture
    nameWithType:
      CSharp: HeartGesture
      VB: HeartGesture
    qualifiedName:
      CSharp: Gestures.HeartGesture
      VB: Gestures.HeartGesture
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: HeartGesture
      path: ''
      startLine: 267
    summary: "\nA heart gesture set witha FittedNormalizer.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class HeartGesture : Gesture'
        VB: >-
          Public Class HeartGesture

              Inherits Gesture
    inheritance:
    - System.Object
    - Gestures.Gesture
    inheritedMembers:
    - Gestures.Gesture.checks
    - Gestures.Gesture.sequentialChecks
    - Gestures.Gesture.alwaysChecks
    - Gestures.Gesture.isEnabled
    - Gestures.Gesture.normalizer
    - Gestures.Gesture.completeEvent
    - Gestures.Gesture.gestureCompleteConfidence
    - Gestures.Gesture.gestureCompletionPrecision
    - Gestures.Gesture.GestureCompleted(System.Collections.Generic.List{Gestures.GTransform})
    - Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
    - Gestures.Gesture.AddEvent(UnityAction{Gestures.GestureMetaData})
    - Gestures.Gesture.ClearEvents
    - Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
    - Gestures.Gesture.AddOnceCheck(Gestures.Check)
    - Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
    - Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.AddSequentialCheck(Gestures.Check)
    - Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.VisualizeGesture(Rect)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.HeartGesture.#ctor
      commentId: M:Gestures.HeartGesture.#ctor
      language: CSharp
      name:
        CSharp: HeartGesture()
        VB: HeartGesture()
      nameWithType:
        CSharp: HeartGesture.HeartGesture()
        VB: HeartGesture.HeartGesture()
      qualifiedName:
        CSharp: Gestures.HeartGesture.HeartGesture()
        VB: Gestures.HeartGesture.HeartGesture()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 269
      syntax:
        content:
          CSharp: public HeartGesture()
          VB: Public Sub New
      overload: Gestures.HeartGesture.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Gestures.SquareGesture
    commentId: T:Gestures.SquareGesture
    language: CSharp
    name:
      CSharp: SquareGesture
      VB: SquareGesture
    nameWithType:
      CSharp: SquareGesture
      VB: SquareGesture
    qualifiedName:
      CSharp: Gestures.SquareGesture
      VB: Gestures.SquareGesture
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: SquareGesture
      path: ''
      startLine: 297
    summary: "\nA square gesture set with the FittedNormalizer.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SquareGesture : Gesture'
        VB: >-
          Public Class SquareGesture

              Inherits Gesture
    inheritance:
    - System.Object
    - Gestures.Gesture
    inheritedMembers:
    - Gestures.Gesture.checks
    - Gestures.Gesture.sequentialChecks
    - Gestures.Gesture.alwaysChecks
    - Gestures.Gesture.isEnabled
    - Gestures.Gesture.normalizer
    - Gestures.Gesture.completeEvent
    - Gestures.Gesture.gestureCompleteConfidence
    - Gestures.Gesture.gestureCompletionPrecision
    - Gestures.Gesture.GestureCompleted(System.Collections.Generic.List{Gestures.GTransform})
    - Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
    - Gestures.Gesture.AddEvent(UnityAction{Gestures.GestureMetaData})
    - Gestures.Gesture.ClearEvents
    - Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
    - Gestures.Gesture.AddOnceCheck(Gestures.Check)
    - Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
    - Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.AddSequentialCheck(Gestures.Check)
    - Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.VisualizeGesture(Rect)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.SquareGesture.#ctor
      commentId: M:Gestures.SquareGesture.#ctor
      language: CSharp
      name:
        CSharp: SquareGesture()
        VB: SquareGesture()
      nameWithType:
        CSharp: SquareGesture.SquareGesture()
        VB: SquareGesture.SquareGesture()
      qualifiedName:
        CSharp: Gestures.SquareGesture.SquareGesture()
        VB: Gestures.SquareGesture.SquareGesture()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 298
      syntax:
        content:
          CSharp: public SquareGesture()
          VB: Public Sub New
      overload: Gestures.SquareGesture.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Gestures.TriangleGesture
    commentId: T:Gestures.TriangleGesture
    language: CSharp
    name:
      CSharp: TriangleGesture
      VB: TriangleGesture
    nameWithType:
      CSharp: TriangleGesture
      VB: TriangleGesture
    qualifiedName:
      CSharp: Gestures.TriangleGesture
      VB: Gestures.TriangleGesture
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: TriangleGesture
      path: ''
      startLine: 326
    summary: "\nA triangle gesture set with the FittedNormalizer.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TriangleGesture : Gesture'
        VB: >-
          Public Class TriangleGesture

              Inherits Gesture
    inheritance:
    - System.Object
    - Gestures.Gesture
    inheritedMembers:
    - Gestures.Gesture.checks
    - Gestures.Gesture.sequentialChecks
    - Gestures.Gesture.alwaysChecks
    - Gestures.Gesture.isEnabled
    - Gestures.Gesture.normalizer
    - Gestures.Gesture.completeEvent
    - Gestures.Gesture.gestureCompleteConfidence
    - Gestures.Gesture.gestureCompletionPrecision
    - Gestures.Gesture.GestureCompleted(System.Collections.Generic.List{Gestures.GTransform})
    - Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
    - Gestures.Gesture.AddEvent(UnityAction{Gestures.GestureMetaData})
    - Gestures.Gesture.ClearEvents
    - Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
    - Gestures.Gesture.AddOnceCheck(Gestures.Check)
    - Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
    - Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.AddSequentialCheck(Gestures.Check)
    - Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
    - Gestures.Gesture.VisualizeGesture(Rect)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.TriangleGesture.#ctor
      commentId: M:Gestures.TriangleGesture.#ctor
      language: CSharp
      name:
        CSharp: TriangleGesture()
        VB: TriangleGesture()
      nameWithType:
        CSharp: TriangleGesture.TriangleGesture()
        VB: TriangleGesture.TriangleGesture()
      qualifiedName:
        CSharp: Gestures.TriangleGesture.TriangleGesture()
        VB: Gestures.TriangleGesture.TriangleGesture()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 327
      syntax:
        content:
          CSharp: public TriangleGesture()
          VB: Public Sub New
      overload: Gestures.TriangleGesture.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Gestures.ArcCheck
    commentId: T:Gestures.ArcCheck
    language: CSharp
    name:
      CSharp: ArcCheck
      VB: ArcCheck
    nameWithType:
      CSharp: ArcCheck
      VB: ArcCheck
    qualifiedName:
      CSharp: Gestures.ArcCheck
      VB: Gestures.ArcCheck
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: ArcCheck
      path: ''
      startLine: 347
    summary: "\nAn Arc check in a single plane.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ArcCheck : Check'
        VB: >-
          Public Class ArcCheck

              Inherits Check
    inheritance:
    - System.Object
    - Gestures.Check
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.ArcCheck.#ctor(Vector3,System.Single,Vector3,System.Single,Gestures.ArcCheck.ARC_ORIENTATION)
      commentId: M:Gestures.ArcCheck.#ctor(Vector3,System.Single,Vector3,System.Single,Gestures.ArcCheck.ARC_ORIENTATION)
      language: CSharp
      name:
        CSharp: ArcCheck(Vector3, Single, Vector3, Single, ArcCheck.ARC_ORIENTATION)
        VB: ArcCheck(Vector3, Single, Vector3, Single, ArcCheck.ARC_ORIENTATION)
      nameWithType:
        CSharp: ArcCheck.ArcCheck(Vector3, Single, Vector3, Single, ArcCheck.ARC_ORIENTATION)
        VB: ArcCheck.ArcCheck(Vector3, Single, Vector3, Single, ArcCheck.ARC_ORIENTATION)
      qualifiedName:
        CSharp: Gestures.ArcCheck.ArcCheck(Vector3, System.Single, Vector3, System.Single, Gestures.ArcCheck.ARC_ORIENTATION)
        VB: Gestures.ArcCheck.ArcCheck(Vector3, System.Single, Vector3, System.Single, Gestures.ArcCheck.ARC_ORIENTATION)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 371
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public ArcCheck(Vector3 startPosition, float degrees, Vector3 center, float precision = 0.4F, ArcCheck.ARC_ORIENTATION orientation = ArcCheck.ARC_ORIENTATION.XY)
          VB: Public Sub New(startPosition As Vector3, degrees As Single, center As Vector3, precision As Single = 0.4F, orientation As ArcCheck.ARC_ORIENTATION = ArcCheck.ARC_ORIENTATION.XY)
        parameters:
        - id: startPosition
          type: Vector3
          description: The starting position of the arc.
        - id: degrees
          type: System.Single
          description: Number of degrees to extent. MUST be between -90 and 90 degrees, otherwise unpredictable consequences occur.
        - id: center
          type: Vector3
          description: The center point of circle on which the Arc lies.
        - id: precision
          type: System.Single
          description: The distance tolerance from which a point can be considered within the arc.
        - id: orientation
          type: Gestures.ArcCheck.ARC_ORIENTATION
          description: ARC_ORIENTATION enum, specifying which plane the arc resides in
      overload: Gestures.ArcCheck.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.ArcCheck.CheckPasses(Gestures.GTransform)
      commentId: M:Gestures.ArcCheck.CheckPasses(Gestures.GTransform)
      language: CSharp
      name:
        CSharp: CheckPasses(GTransform)
        VB: CheckPasses(GTransform)
      nameWithType:
        CSharp: ArcCheck.CheckPasses(GTransform)
        VB: ArcCheck.CheckPasses(GTransform)
      qualifiedName:
        CSharp: Gestures.ArcCheck.CheckPasses(Gestures.GTransform)
        VB: Gestures.ArcCheck.CheckPasses(Gestures.GTransform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: CheckPasses
        path: ''
        startLine: 393
      syntax:
        content:
          CSharp: public override float CheckPasses(GTransform g)
          VB: Public Overrides Function CheckPasses(g As GTransform) As Single
        parameters:
        - id: g
          type: Gestures.GTransform
        return:
          type: System.Single
      overload: Gestures.ArcCheck.CheckPasses*
      overridden: Gestures.Check.CheckPasses(Gestures.GTransform)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Gestures.ArcCheck.VisualizeCheck(Rect)
      commentId: M:Gestures.ArcCheck.VisualizeCheck(Rect)
      language: CSharp
      name:
        CSharp: VisualizeCheck(Rect)
        VB: VisualizeCheck(Rect)
      nameWithType:
        CSharp: ArcCheck.VisualizeCheck(Rect)
        VB: ArcCheck.VisualizeCheck(Rect)
      qualifiedName:
        CSharp: Gestures.ArcCheck.VisualizeCheck(Rect)
        VB: Gestures.ArcCheck.VisualizeCheck(Rect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: VisualizeCheck
        path: ''
        startLine: 418
      syntax:
        content:
          CSharp: public override void VisualizeCheck(Rect grid)
          VB: Public Overrides Sub VisualizeCheck(grid As Rect)
        parameters:
        - id: grid
          type: Rect
      overload: Gestures.ArcCheck.VisualizeCheck*
      overridden: Gestures.Check.VisualizeCheck(Rect)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Gestures.ArcCheck.ARC_ORIENTATION
    commentId: T:Gestures.ArcCheck.ARC_ORIENTATION
    language: CSharp
    name:
      CSharp: ArcCheck.ARC_ORIENTATION
      VB: ArcCheck.ARC_ORIENTATION
    nameWithType:
      CSharp: ArcCheck.ARC_ORIENTATION
      VB: ArcCheck.ARC_ORIENTATION
    qualifiedName:
      CSharp: Gestures.ArcCheck.ARC_ORIENTATION
      VB: Gestures.ArcCheck.ARC_ORIENTATION
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: ARC_ORIENTATION
      path: ''
      startLine: 349
    syntax:
      content:
        CSharp: public enum ARC_ORIENTATION
        VB: Public Enum ARC_ORIENTATION
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Gestures.ArcCheck.ARC_ORIENTATION.XY
      commentId: F:Gestures.ArcCheck.ARC_ORIENTATION.XY
      language: CSharp
      name:
        CSharp: XY
        VB: XY
      nameWithType:
        CSharp: ArcCheck.ARC_ORIENTATION.XY
        VB: ArcCheck.ARC_ORIENTATION.XY
      qualifiedName:
        CSharp: Gestures.ArcCheck.ARC_ORIENTATION.XY
        VB: Gestures.ArcCheck.ARC_ORIENTATION.XY
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: XY
        path: ''
        startLine: 350
      syntax:
        content:
          CSharp: XY = 0
          VB: XY = 0
        return:
          type: Gestures.ArcCheck.ARC_ORIENTATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Gestures.ArcCheck.ARC_ORIENTATION.YZ
      commentId: F:Gestures.ArcCheck.ARC_ORIENTATION.YZ
      language: CSharp
      name:
        CSharp: YZ
        VB: YZ
      nameWithType:
        CSharp: ArcCheck.ARC_ORIENTATION.YZ
        VB: ArcCheck.ARC_ORIENTATION.YZ
      qualifiedName:
        CSharp: Gestures.ArcCheck.ARC_ORIENTATION.YZ
        VB: Gestures.ArcCheck.ARC_ORIENTATION.YZ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: YZ
        path: ''
        startLine: 351
      syntax:
        content:
          CSharp: YZ = 1
          VB: YZ = 1
        return:
          type: Gestures.ArcCheck.ARC_ORIENTATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Gestures.ArcCheck.ARC_ORIENTATION.XZ
      commentId: F:Gestures.ArcCheck.ARC_ORIENTATION.XZ
      language: CSharp
      name:
        CSharp: XZ
        VB: XZ
      nameWithType:
        CSharp: ArcCheck.ARC_ORIENTATION.XZ
        VB: ArcCheck.ARC_ORIENTATION.XZ
      qualifiedName:
        CSharp: Gestures.ArcCheck.ARC_ORIENTATION.XZ
        VB: Gestures.ArcCheck.ARC_ORIENTATION.XZ
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: XZ
        path: ''
        startLine: 352
      syntax:
        content:
          CSharp: XZ = 2
          VB: XZ = 2
        return:
          type: Gestures.ArcCheck.ARC_ORIENTATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Gestures.Check
    commentId: T:Gestures.Check
    language: CSharp
    name:
      CSharp: Check
      VB: Check
    nameWithType:
      CSharp: Check
      VB: Check
    qualifiedName:
      CSharp: Gestures.Check
      VB: Gestures.Check
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: Check
      path: ''
      startLine: 472
    summary: "\nAn interface representing a single segment of a gesture. \n"
    remarks: "\nCurrent implementations include Lines, Arcs, and Radii, all which deal with the position element of a GTransform\n"
    example: []
    syntax:
      content:
        CSharp: public abstract class Check
        VB: Public MustInherit Class Check
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Gestures.Check.CheckPasses(Gestures.GTransform)
      commentId: M:Gestures.Check.CheckPasses(Gestures.GTransform)
      language: CSharp
      name:
        CSharp: CheckPasses(GTransform)
        VB: CheckPasses(GTransform)
      nameWithType:
        CSharp: Check.CheckPasses(GTransform)
        VB: Check.CheckPasses(GTransform)
      qualifiedName:
        CSharp: Gestures.Check.CheckPasses(Gestures.GTransform)
        VB: Gestures.Check.CheckPasses(Gestures.GTransform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: CheckPasses
        path: ''
        startLine: 473
      syntax:
        content:
          CSharp: public abstract float CheckPasses(GTransform transform)
          VB: Public MustOverride Function CheckPasses(transform As GTransform) As Single
        parameters:
        - id: transform
          type: Gestures.GTransform
        return:
          type: System.Single
      overload: Gestures.Check.CheckPasses*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Gestures.Check.VisualizeCheck(Rect)
      commentId: M:Gestures.Check.VisualizeCheck(Rect)
      language: CSharp
      name:
        CSharp: VisualizeCheck(Rect)
        VB: VisualizeCheck(Rect)
      nameWithType:
        CSharp: Check.VisualizeCheck(Rect)
        VB: Check.VisualizeCheck(Rect)
      qualifiedName:
        CSharp: Gestures.Check.VisualizeCheck(Rect)
        VB: Gestures.Check.VisualizeCheck(Rect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: VisualizeCheck
        path: ''
        startLine: 474
      syntax:
        content:
          CSharp: public virtual void VisualizeCheck(Rect grid)
          VB: Public Overridable Sub VisualizeCheck(grid As Rect)
        parameters:
        - id: grid
          type: Rect
      overload: Gestures.Check.VisualizeCheck*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
  - id: Gestures.LineCheck
    commentId: T:Gestures.LineCheck
    language: CSharp
    name:
      CSharp: LineCheck
      VB: LineCheck
    nameWithType:
      CSharp: LineCheck
      VB: LineCheck
    qualifiedName:
      CSharp: Gestures.LineCheck
      VB: Gestures.LineCheck
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: LineCheck
      path: ''
      startLine: 486
    summary: "\nA Line check to check if \n"
    example: []
    syntax:
      content:
        CSharp: 'public class LineCheck : Check'
        VB: >-
          Public Class LineCheck

              Inherits Check
    inheritance:
    - System.Object
    - Gestures.Check
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.LineCheck.firstPosition
      commentId: F:Gestures.LineCheck.firstPosition
      language: CSharp
      name:
        CSharp: firstPosition
        VB: firstPosition
      nameWithType:
        CSharp: LineCheck.firstPosition
        VB: LineCheck.firstPosition
      qualifiedName:
        CSharp: Gestures.LineCheck.firstPosition
        VB: Gestures.LineCheck.firstPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: firstPosition
        path: ''
        startLine: 488
      syntax:
        content:
          CSharp: public Vector3 firstPosition
          VB: Public firstPosition As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.LineCheck.secondPosition
      commentId: F:Gestures.LineCheck.secondPosition
      language: CSharp
      name:
        CSharp: secondPosition
        VB: secondPosition
      nameWithType:
        CSharp: LineCheck.secondPosition
        VB: LineCheck.secondPosition
      qualifiedName:
        CSharp: Gestures.LineCheck.secondPosition
        VB: Gestures.LineCheck.secondPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: secondPosition
        path: ''
        startLine: 489
      syntax:
        content:
          CSharp: public Vector3 secondPosition
          VB: Public secondPosition As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.LineCheck.precision
      commentId: F:Gestures.LineCheck.precision
      language: CSharp
      name:
        CSharp: precision
        VB: precision
      nameWithType:
        CSharp: LineCheck.precision
        VB: LineCheck.precision
      qualifiedName:
        CSharp: Gestures.LineCheck.precision
        VB: Gestures.LineCheck.precision
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: precision
        path: ''
        startLine: 490
      syntax:
        content:
          CSharp: public float precision
          VB: Public precision As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.LineCheck.#ctor(Vector3,Vector3,System.Single)
      commentId: M:Gestures.LineCheck.#ctor(Vector3,Vector3,System.Single)
      language: CSharp
      name:
        CSharp: LineCheck(Vector3, Vector3, Single)
        VB: LineCheck(Vector3, Vector3, Single)
      nameWithType:
        CSharp: LineCheck.LineCheck(Vector3, Vector3, Single)
        VB: LineCheck.LineCheck(Vector3, Vector3, Single)
      qualifiedName:
        CSharp: Gestures.LineCheck.LineCheck(Vector3, Vector3, System.Single)
        VB: Gestures.LineCheck.LineCheck(Vector3, Vector3, System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 498
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public LineCheck(Vector3 firstPosition, Vector3 secondPosition, float precision = 0.4F)
          VB: Public Sub New(firstPosition As Vector3, secondPosition As Vector3, precision As Single = 0.4F)
        parameters:
        - id: firstPosition
          type: Vector3
          description: The first point of the line.
        - id: secondPosition
          type: Vector3
          description: The second point of the line.
        - id: precision
          type: System.Single
          description: Distance from the line considered to be on the line.
      overload: Gestures.LineCheck.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.LineCheck.CheckPasses(Gestures.GTransform)
      commentId: M:Gestures.LineCheck.CheckPasses(Gestures.GTransform)
      language: CSharp
      name:
        CSharp: CheckPasses(GTransform)
        VB: CheckPasses(GTransform)
      nameWithType:
        CSharp: LineCheck.CheckPasses(GTransform)
        VB: LineCheck.CheckPasses(GTransform)
      qualifiedName:
        CSharp: Gestures.LineCheck.CheckPasses(Gestures.GTransform)
        VB: Gestures.LineCheck.CheckPasses(Gestures.GTransform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: CheckPasses
        path: ''
        startLine: 504
      syntax:
        content:
          CSharp: public override float CheckPasses(GTransform g)
          VB: Public Overrides Function CheckPasses(g As GTransform) As Single
        parameters:
        - id: g
          type: Gestures.GTransform
        return:
          type: System.Single
      overload: Gestures.LineCheck.CheckPasses*
      overridden: Gestures.Check.CheckPasses(Gestures.GTransform)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Gestures.LineCheck.GetClosestPointOnLineSegment(Vector3,Vector3,Vector3)
      commentId: M:Gestures.LineCheck.GetClosestPointOnLineSegment(Vector3,Vector3,Vector3)
      language: CSharp
      name:
        CSharp: GetClosestPointOnLineSegment(Vector3, Vector3, Vector3)
        VB: GetClosestPointOnLineSegment(Vector3, Vector3, Vector3)
      nameWithType:
        CSharp: LineCheck.GetClosestPointOnLineSegment(Vector3, Vector3, Vector3)
        VB: LineCheck.GetClosestPointOnLineSegment(Vector3, Vector3, Vector3)
      qualifiedName:
        CSharp: Gestures.LineCheck.GetClosestPointOnLineSegment(Vector3, Vector3, Vector3)
        VB: Gestures.LineCheck.GetClosestPointOnLineSegment(Vector3, Vector3, Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: GetClosestPointOnLineSegment
        path: ''
        startLine: 515
      syntax:
        content:
          CSharp: public Vector3 GetClosestPointOnLineSegment(Vector3 A, Vector3 B, Vector3 P)
          VB: Public Function GetClosestPointOnLineSegment(A As Vector3, B As Vector3, P As Vector3) As Vector3
        parameters:
        - id: A
          type: Vector3
        - id: B
          type: Vector3
        - id: P
          type: Vector3
        return:
          type: Vector3
      overload: Gestures.LineCheck.GetClosestPointOnLineSegment*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.LineCheck.VisualizeCheck(Rect)
      commentId: M:Gestures.LineCheck.VisualizeCheck(Rect)
      language: CSharp
      name:
        CSharp: VisualizeCheck(Rect)
        VB: VisualizeCheck(Rect)
      nameWithType:
        CSharp: LineCheck.VisualizeCheck(Rect)
        VB: LineCheck.VisualizeCheck(Rect)
      qualifiedName:
        CSharp: Gestures.LineCheck.VisualizeCheck(Rect)
        VB: Gestures.LineCheck.VisualizeCheck(Rect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: VisualizeCheck
        path: ''
        startLine: 534
      syntax:
        content:
          CSharp: public override void VisualizeCheck(Rect grid)
          VB: Public Overrides Sub VisualizeCheck(grid As Rect)
        parameters:
        - id: grid
          type: Rect
      overload: Gestures.LineCheck.VisualizeCheck*
      overridden: Gestures.Check.VisualizeCheck(Rect)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Gestures.RadiusCheck
    commentId: T:Gestures.RadiusCheck
    language: CSharp
    name:
      CSharp: RadiusCheck
      VB: RadiusCheck
    nameWithType:
      CSharp: RadiusCheck
      VB: RadiusCheck
    qualifiedName:
      CSharp: Gestures.RadiusCheck
      VB: Gestures.RadiusCheck
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: RadiusCheck
      path: ''
      startLine: 575
    summary: "\nA Check to check if a GTransform is within a certain radius of another point.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class RadiusCheck : Check'
        VB: >-
          Public Class RadiusCheck

              Inherits Check
    inheritance:
    - System.Object
    - Gestures.Check
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.RadiusCheck.#ctor(Vector3,System.Single)
      commentId: M:Gestures.RadiusCheck.#ctor(Vector3,System.Single)
      language: CSharp
      name:
        CSharp: RadiusCheck(Vector3, Single)
        VB: RadiusCheck(Vector3, Single)
      nameWithType:
        CSharp: RadiusCheck.RadiusCheck(Vector3, Single)
        VB: RadiusCheck.RadiusCheck(Vector3, Single)
      qualifiedName:
        CSharp: Gestures.RadiusCheck.RadiusCheck(Vector3, System.Single)
        VB: Gestures.RadiusCheck.RadiusCheck(Vector3, System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 584
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public RadiusCheck(Vector3 position, float radius = 0.4F)
          VB: Public Sub New(position As Vector3, radius As Single = 0.4F)
        parameters:
        - id: position
          type: Vector3
          description: Position vector to check against.
        - id: radius
          type: System.Single
          description: A radius tolerance away from the point.
      overload: Gestures.RadiusCheck.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.RadiusCheck.CheckPasses(Gestures.GTransform)
      commentId: M:Gestures.RadiusCheck.CheckPasses(Gestures.GTransform)
      language: CSharp
      name:
        CSharp: CheckPasses(GTransform)
        VB: CheckPasses(GTransform)
      nameWithType:
        CSharp: RadiusCheck.CheckPasses(GTransform)
        VB: RadiusCheck.CheckPasses(GTransform)
      qualifiedName:
        CSharp: Gestures.RadiusCheck.CheckPasses(Gestures.GTransform)
        VB: Gestures.RadiusCheck.CheckPasses(Gestures.GTransform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: CheckPasses
        path: ''
        startLine: 589
      syntax:
        content:
          CSharp: public override float CheckPasses(GTransform gTransform)
          VB: Public Overrides Function CheckPasses(gTransform As GTransform) As Single
        parameters:
        - id: gTransform
          type: Gestures.GTransform
        return:
          type: System.Single
      overload: Gestures.RadiusCheck.CheckPasses*
      overridden: Gestures.Check.CheckPasses(Gestures.GTransform)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Gestures.RadiusCheck.VisualizeCheck(Rect)
      commentId: M:Gestures.RadiusCheck.VisualizeCheck(Rect)
      language: CSharp
      name:
        CSharp: VisualizeCheck(Rect)
        VB: VisualizeCheck(Rect)
      nameWithType:
        CSharp: RadiusCheck.VisualizeCheck(Rect)
        VB: RadiusCheck.VisualizeCheck(Rect)
      qualifiedName:
        CSharp: Gestures.RadiusCheck.VisualizeCheck(Rect)
        VB: Gestures.RadiusCheck.VisualizeCheck(Rect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: VisualizeCheck
        path: ''
        startLine: 597
      syntax:
        content:
          CSharp: public override void VisualizeCheck(Rect grid)
          VB: Public Overrides Sub VisualizeCheck(grid As Rect)
        parameters:
        - id: grid
          type: Rect
      overload: Gestures.RadiusCheck.VisualizeCheck*
      overridden: Gestures.Check.VisualizeCheck(Rect)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Gestures.SpeedCheck
    commentId: T:Gestures.SpeedCheck
    language: CSharp
    name:
      CSharp: SpeedCheck
      VB: SpeedCheck
    nameWithType:
      CSharp: SpeedCheck
      VB: SpeedCheck
    qualifiedName:
      CSharp: Gestures.SpeedCheck
      VB: Gestures.SpeedCheck
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: SpeedCheck
      path: ''
      startLine: 633
    summary: "\nA check to ensure velocity between data points is greater or less than a certain velocity.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SpeedCheck : Check'
        VB: >-
          Public Class SpeedCheck

              Inherits Check
    inheritance:
    - System.Object
    - Gestures.Check
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.SpeedCheck.#ctor(System.Single,System.Boolean)
      commentId: M:Gestures.SpeedCheck.#ctor(System.Single,System.Boolean)
      language: CSharp
      name:
        CSharp: SpeedCheck(Single, Boolean)
        VB: SpeedCheck(Single, Boolean)
      nameWithType:
        CSharp: SpeedCheck.SpeedCheck(Single, Boolean)
        VB: SpeedCheck.SpeedCheck(Single, Boolean)
      qualifiedName:
        CSharp: Gestures.SpeedCheck.SpeedCheck(System.Single, System.Boolean)
        VB: Gestures.SpeedCheck.SpeedCheck(System.Single, System.Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 642
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public SpeedCheck(float targetSpeed, bool greaterThan)
          VB: Public Sub New(targetSpeed As Single, greaterThan As Boolean)
        parameters:
        - id: targetSpeed
          type: System.Single
          description: The target speed to check against
        - id: greaterThan
          type: System.Boolean
          description: Flag to indicate whether or not to check less or greater than target speed.
      overload: Gestures.SpeedCheck.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.SpeedCheck.CheckPasses(Gestures.GTransform)
      commentId: M:Gestures.SpeedCheck.CheckPasses(Gestures.GTransform)
      language: CSharp
      name:
        CSharp: CheckPasses(GTransform)
        VB: CheckPasses(GTransform)
      nameWithType:
        CSharp: SpeedCheck.CheckPasses(GTransform)
        VB: SpeedCheck.CheckPasses(GTransform)
      qualifiedName:
        CSharp: Gestures.SpeedCheck.CheckPasses(Gestures.GTransform)
        VB: Gestures.SpeedCheck.CheckPasses(Gestures.GTransform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: CheckPasses
        path: ''
        startLine: 647
      syntax:
        content:
          CSharp: public override float CheckPasses(GTransform gTransform)
          VB: Public Overrides Function CheckPasses(gTransform As GTransform) As Single
        parameters:
        - id: gTransform
          type: Gestures.GTransform
        return:
          type: System.Single
      overload: Gestures.SpeedCheck.CheckPasses*
      overridden: Gestures.Check.CheckPasses(Gestures.GTransform)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Gestures.SpeedCheck.VisualizeCheck(Rect)
      commentId: M:Gestures.SpeedCheck.VisualizeCheck(Rect)
      language: CSharp
      name:
        CSharp: VisualizeCheck(Rect)
        VB: VisualizeCheck(Rect)
      nameWithType:
        CSharp: SpeedCheck.VisualizeCheck(Rect)
        VB: SpeedCheck.VisualizeCheck(Rect)
      qualifiedName:
        CSharp: Gestures.SpeedCheck.VisualizeCheck(Rect)
        VB: Gestures.SpeedCheck.VisualizeCheck(Rect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: VisualizeCheck
        path: ''
        startLine: 652
      syntax:
        content:
          CSharp: public override void VisualizeCheck(Rect grid)
          VB: Public Overrides Sub VisualizeCheck(grid As Rect)
        parameters:
        - id: grid
          type: Rect
      overload: Gestures.SpeedCheck.VisualizeCheck*
      overridden: Gestures.Check.VisualizeCheck(Rect)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Gestures.IController
    commentId: T:Gestures.IController
    language: CSharp
    name:
      CSharp: IController
      VB: IController
    nameWithType:
      CSharp: IController
      VB: IController
    qualifiedName:
      CSharp: Gestures.IController
      VB: Gestures.IController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: IController
      path: ''
      startLine: 671
    summary: "\nAbstract class which is responsible for tracking transform data for a VR headset. \n"
    remarks: "\nAlthough we have only provided support for Oculus Rift Touch Controllers, any headset may be used if an appropriate concrete implementation of this class is created\n"
    example: []
    syntax:
      content:
        CSharp: 'public abstract class IController : MonoBehaviour'
        VB: >-
          Public MustInherit Class IController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: Gestures.IController.QueryGTransform
      commentId: M:Gestures.IController.QueryGTransform
      language: CSharp
      name:
        CSharp: QueryGTransform()
        VB: QueryGTransform()
      nameWithType:
        CSharp: IController.QueryGTransform()
        VB: IController.QueryGTransform()
      qualifiedName:
        CSharp: Gestures.IController.QueryGTransform()
        VB: Gestures.IController.QueryGTransform()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: QueryGTransform
        path: ''
        startLine: 677
      summary: "\nGenerate the data representing the necessary transform data for a given controller\n"
      example: []
      syntax:
        content:
          CSharp: public abstract GTransform QueryGTransform()
          VB: Public MustOverride Function QueryGTransform As GTransform
        return:
          type: Gestures.GTransform
          description: Returns `GTransform` instance containing transform data
      overload: Gestures.IController.QueryGTransform*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
    - id: Gestures.IController.GestureActive
      commentId: M:Gestures.IController.GestureActive
      language: CSharp
      name:
        CSharp: GestureActive()
        VB: GestureActive()
      nameWithType:
        CSharp: IController.GestureActive()
        VB: IController.GestureActive()
      qualifiedName:
        CSharp: Gestures.IController.GestureActive()
        VB: Gestures.IController.GestureActive()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: GestureActive
        path: ''
        startLine: 686
      summary: "\nThis method will query the controller to determine whether the gesture should be tracked or not.\n"
      remarks: "\nThe most common implementation of this method simply returns whether a specific button is pressed.\n"
      example: []
      syntax:
        content:
          CSharp: public abstract bool GestureActive()
          VB: Public MustOverride Function GestureActive As Boolean
        return:
          type: System.Boolean
          description: Return `true` if a gesture should be active, `false` otherwise
      overload: Gestures.IController.GestureActive*
      modifiers:
        CSharp:
        - public
        - abstract
        VB:
        - Public
        - MustOverride
  - id: Gestures.TouchController
    commentId: T:Gestures.TouchController
    language: CSharp
    name:
      CSharp: TouchController
      VB: TouchController
    nameWithType:
      CSharp: TouchController
      VB: TouchController
    qualifiedName:
      CSharp: Gestures.TouchController
      VB: Gestures.TouchController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: TouchController
      path: ''
      startLine: 700
    summary: "\nTouchController is a concrete implementation of the IController class, targeted at the Oculus Rift Touch Controllers\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TouchController : IController'
        VB: >-
          Public Class TouchController

              Inherits IController
    inheritance:
    - System.Object
    - Gestures.IController
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.TouchController.controllerType
      commentId: F:Gestures.TouchController.controllerType
      language: CSharp
      name:
        CSharp: controllerType
        VB: controllerType
      nameWithType:
        CSharp: TouchController.controllerType
        VB: TouchController.controllerType
      qualifiedName:
        CSharp: Gestures.TouchController.controllerType
        VB: Gestures.TouchController.controllerType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: controllerType
        path: ''
        startLine: 703
      summary: 'The Touch Controller to use. Typically LTouch or RTouch for left and right hands. '
      example: []
      syntax:
        content:
          CSharp: public OVRInput.Controller controllerType
          VB: Public controllerType As OVRInput.Controller
        return:
          type: OVRInput.Controller
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.TouchController.gestureActiveButton
      commentId: F:Gestures.TouchController.gestureActiveButton
      language: CSharp
      name:
        CSharp: gestureActiveButton
        VB: gestureActiveButton
      nameWithType:
        CSharp: TouchController.gestureActiveButton
        VB: TouchController.gestureActiveButton
      qualifiedName:
        CSharp: Gestures.TouchController.gestureActiveButton
        VB: Gestures.TouchController.gestureActiveButton
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: gestureActiveButton
        path: ''
        startLine: 706
      summary: 'The button which will activate a gesture '
      example: []
      syntax:
        content:
          CSharp: public OVRInput.Button gestureActiveButton
          VB: Public gestureActiveButton As OVRInput.Button
        return:
          type: OVRInput.Button
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.TouchController.vibrationFrequency
      commentId: F:Gestures.TouchController.vibrationFrequency
      language: CSharp
      name:
        CSharp: vibrationFrequency
        VB: vibrationFrequency
      nameWithType:
        CSharp: TouchController.vibrationFrequency
        VB: TouchController.vibrationFrequency
      qualifiedName:
        CSharp: Gestures.TouchController.vibrationFrequency
        VB: Gestures.TouchController.vibrationFrequency
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: vibrationFrequency
        path: ''
        startLine: 708
      syntax:
        content:
          CSharp: public float vibrationFrequency
          VB: Public vibrationFrequency As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.TouchController.vibrationAmplitude
      commentId: F:Gestures.TouchController.vibrationAmplitude
      language: CSharp
      name:
        CSharp: vibrationAmplitude
        VB: vibrationAmplitude
      nameWithType:
        CSharp: TouchController.vibrationAmplitude
        VB: TouchController.vibrationAmplitude
      qualifiedName:
        CSharp: Gestures.TouchController.vibrationAmplitude
        VB: Gestures.TouchController.vibrationAmplitude
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: vibrationAmplitude
        path: ''
        startLine: 709
      syntax:
        content:
          CSharp: public float vibrationAmplitude
          VB: Public vibrationAmplitude As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.TouchController.QueryGTransform
      commentId: M:Gestures.TouchController.QueryGTransform
      language: CSharp
      name:
        CSharp: QueryGTransform()
        VB: QueryGTransform()
      nameWithType:
        CSharp: TouchController.QueryGTransform()
        VB: TouchController.QueryGTransform()
      qualifiedName:
        CSharp: Gestures.TouchController.QueryGTransform()
        VB: Gestures.TouchController.QueryGTransform()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: QueryGTransform
        path: ''
        startLine: 715
      summary: "\nGenerate the data representing the position, rotation, velocity, and timing data for the controller\n"
      example: []
      syntax:
        content:
          CSharp: public override GTransform QueryGTransform()
          VB: Public Overrides Function QueryGTransform As GTransform
        return:
          type: Gestures.GTransform
          description: Returns `GTransform` instance containing transform data
      overload: Gestures.TouchController.QueryGTransform*
      overridden: Gestures.IController.QueryGTransform
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Gestures.TouchController.GestureActive
      commentId: M:Gestures.TouchController.GestureActive
      language: CSharp
      name:
        CSharp: GestureActive()
        VB: GestureActive()
      nameWithType:
        CSharp: TouchController.GestureActive()
        VB: TouchController.GestureActive()
      qualifiedName:
        CSharp: Gestures.TouchController.GestureActive()
        VB: Gestures.TouchController.GestureActive()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: GestureActive
        path: ''
        startLine: 725
      summary: "\nThis method will query the controller to determine whether the gesture activation button is pressed on the correct controller\n"
      example: []
      syntax:
        content:
          CSharp: public override bool GestureActive()
          VB: Public Overrides Function GestureActive As Boolean
        return:
          type: System.Boolean
          description: Return `true` if the user is pressing the gesture button, `false` otherwise
      overload: Gestures.TouchController.GestureActive*
      overridden: Gestures.IController.GestureActive
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Gestures.Gesture
    commentId: T:Gestures.Gesture
    language: CSharp
    name:
      CSharp: Gesture
      VB: Gesture
    nameWithType:
      CSharp: Gesture
      VB: Gesture
    qualifiedName:
      CSharp: Gestures.Gesture
      VB: Gestures.Gesture
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: Gesture
      path: ''
      startLine: 753
    syntax:
      content:
        CSharp: public class Gesture
        VB: Public Class Gesture
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.Gesture.checks
      commentId: F:Gestures.Gesture.checks
      language: CSharp
      name:
        CSharp: checks
        VB: checks
      nameWithType:
        CSharp: Gesture.checks
        VB: Gesture.checks
      qualifiedName:
        CSharp: Gestures.Gesture.checks
        VB: Gestures.Gesture.checks
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: checks
        path: ''
        startLine: 754
      syntax:
        content:
          CSharp: public List<Check> checks
          VB: Public checks As List(Of Check)
        return:
          type: System.Collections.Generic.List{Gestures.Check}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.sequentialChecks
      commentId: F:Gestures.Gesture.sequentialChecks
      language: CSharp
      name:
        CSharp: sequentialChecks
        VB: sequentialChecks
      nameWithType:
        CSharp: Gesture.sequentialChecks
        VB: Gesture.sequentialChecks
      qualifiedName:
        CSharp: Gestures.Gesture.sequentialChecks
        VB: Gestures.Gesture.sequentialChecks
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: sequentialChecks
        path: ''
        startLine: 755
      syntax:
        content:
          CSharp: public List<Check> sequentialChecks
          VB: Public sequentialChecks As List(Of Check)
        return:
          type: System.Collections.Generic.List{Gestures.Check}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.alwaysChecks
      commentId: F:Gestures.Gesture.alwaysChecks
      language: CSharp
      name:
        CSharp: alwaysChecks
        VB: alwaysChecks
      nameWithType:
        CSharp: Gesture.alwaysChecks
        VB: Gesture.alwaysChecks
      qualifiedName:
        CSharp: Gestures.Gesture.alwaysChecks
        VB: Gestures.Gesture.alwaysChecks
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: alwaysChecks
        path: ''
        startLine: 756
      syntax:
        content:
          CSharp: public List<Check> alwaysChecks
          VB: Public alwaysChecks As List(Of Check)
        return:
          type: System.Collections.Generic.List{Gestures.Check}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.isEnabled
      commentId: P:Gestures.Gesture.isEnabled
      language: CSharp
      name:
        CSharp: isEnabled
        VB: isEnabled
      nameWithType:
        CSharp: Gesture.isEnabled
        VB: Gesture.isEnabled
      qualifiedName:
        CSharp: Gestures.Gesture.isEnabled
        VB: Gestures.Gesture.isEnabled
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: isEnabled
        path: ''
        startLine: 758
      syntax:
        content:
          CSharp: public bool isEnabled { get; set; }
          VB: Public Property isEnabled As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Gestures.Gesture.isEnabled*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Gestures.Gesture.normalizer
      commentId: F:Gestures.Gesture.normalizer
      language: CSharp
      name:
        CSharp: normalizer
        VB: normalizer
      nameWithType:
        CSharp: Gesture.normalizer
        VB: Gesture.normalizer
      qualifiedName:
        CSharp: Gestures.Gesture.normalizer
        VB: Gestures.Gesture.normalizer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: normalizer
        path: ''
        startLine: 759
      syntax:
        content:
          CSharp: public Normalizer normalizer
          VB: Public normalizer As Normalizer
        return:
          type: Gestures.Normalizer
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.completeEvent
      commentId: F:Gestures.Gesture.completeEvent
      language: CSharp
      name:
        CSharp: completeEvent
        VB: completeEvent
      nameWithType:
        CSharp: Gesture.completeEvent
        VB: Gesture.completeEvent
      qualifiedName:
        CSharp: Gestures.Gesture.completeEvent
        VB: Gestures.Gesture.completeEvent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: completeEvent
        path: ''
        startLine: 760
      syntax:
        content:
          CSharp: public UnityEvent<GestureMetaData> completeEvent
          VB: Public completeEvent As UnityEvent(Of GestureMetaData)
        return:
          type: UnityEvent{Gestures.GestureMetaData}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.gestureCompleteConfidence
      commentId: P:Gestures.Gesture.gestureCompleteConfidence
      language: CSharp
      name:
        CSharp: gestureCompleteConfidence
        VB: gestureCompleteConfidence
      nameWithType:
        CSharp: Gesture.gestureCompleteConfidence
        VB: Gesture.gestureCompleteConfidence
      qualifiedName:
        CSharp: Gestures.Gesture.gestureCompleteConfidence
        VB: Gestures.Gesture.gestureCompleteConfidence
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: gestureCompleteConfidence
        path: ''
        startLine: 762
      syntax:
        content:
          CSharp: public float gestureCompleteConfidence { get; set; }
          VB: Public Property gestureCompleteConfidence As Single
        parameters: []
        return:
          type: System.Single
      overload: Gestures.Gesture.gestureCompleteConfidence*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Gestures.Gesture.gestureCompletionPrecision
      commentId: F:Gestures.Gesture.gestureCompletionPrecision
      language: CSharp
      name:
        CSharp: gestureCompletionPrecision
        VB: gestureCompletionPrecision
      nameWithType:
        CSharp: Gesture.gestureCompletionPrecision
        VB: Gesture.gestureCompletionPrecision
      qualifiedName:
        CSharp: Gestures.Gesture.gestureCompletionPrecision
        VB: Gestures.Gesture.gestureCompletionPrecision
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: gestureCompletionPrecision
        path: ''
        startLine: 763
      syntax:
        content:
          CSharp: public float gestureCompletionPrecision
          VB: Public gestureCompletionPrecision As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.#ctor
      commentId: M:Gestures.Gesture.#ctor
      language: CSharp
      name:
        CSharp: Gesture()
        VB: Gesture()
      nameWithType:
        CSharp: Gesture.Gesture()
        VB: Gesture.Gesture()
      qualifiedName:
        CSharp: Gestures.Gesture.Gesture()
        VB: Gestures.Gesture.Gesture()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 765
      syntax:
        content:
          CSharp: public Gesture()
          VB: Public Sub New
      overload: Gestures.Gesture.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.#ctor(System.Collections.Generic.List{Gestures.Check},Gestures.Normalizer,UnityEvent{Gestures.GestureMetaData})
      commentId: M:Gestures.Gesture.#ctor(System.Collections.Generic.List{Gestures.Check},Gestures.Normalizer,UnityEvent{Gestures.GestureMetaData})
      language: CSharp
      name:
        CSharp: Gesture(List<Check>, Normalizer, UnityEvent<GestureMetaData>)
        VB: Gesture(List(Of Check), Normalizer, UnityEvent(Of GestureMetaData))
      nameWithType:
        CSharp: Gesture.Gesture(List<Check>, Normalizer, UnityEvent<GestureMetaData>)
        VB: Gesture.Gesture(List(Of Check), Normalizer, UnityEvent(Of GestureMetaData))
      qualifiedName:
        CSharp: Gestures.Gesture.Gesture(System.Collections.Generic.List<Gestures.Check>, Gestures.Normalizer, UnityEvent<Gestures.GestureMetaData>)
        VB: Gestures.Gesture.Gesture(System.Collections.Generic.List(Of Gestures.Check), Gestures.Normalizer, UnityEvent(Of Gestures.GestureMetaData))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 777
      syntax:
        content:
          CSharp: public Gesture(List<Check> st, Normalizer norm, UnityEvent<GestureMetaData> eve)
          VB: Public Sub New(st As List(Of Check), norm As Normalizer, eve As UnityEvent(Of GestureMetaData))
        parameters:
        - id: st
          type: System.Collections.Generic.List{Gestures.Check}
        - id: norm
          type: Gestures.Normalizer
        - id: eve
          type: UnityEvent{Gestures.GestureMetaData}
      overload: Gestures.Gesture.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.GestureCompleted(System.Collections.Generic.List{Gestures.GTransform})
      commentId: M:Gestures.Gesture.GestureCompleted(System.Collections.Generic.List{Gestures.GTransform})
      language: CSharp
      name:
        CSharp: GestureCompleted(List<GTransform>)
        VB: GestureCompleted(List(Of GTransform))
      nameWithType:
        CSharp: Gesture.GestureCompleted(List<GTransform>)
        VB: Gesture.GestureCompleted(List(Of GTransform))
      qualifiedName:
        CSharp: Gestures.Gesture.GestureCompleted(System.Collections.Generic.List<Gestures.GTransform>)
        VB: Gestures.Gesture.GestureCompleted(System.Collections.Generic.List(Of Gestures.GTransform))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: GestureCompleted
        path: ''
        startLine: 790
      syntax:
        content:
          CSharp: public bool GestureCompleted(List<GTransform> transforms)
          VB: Public Function GestureCompleted(transforms As List(Of GTransform)) As Boolean
        parameters:
        - id: transforms
          type: System.Collections.Generic.List{Gestures.GTransform}
        return:
          type: System.Boolean
      overload: Gestures.Gesture.GestureCompleted*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
      commentId: M:Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
      language: CSharp
      name:
        CSharp: FireEvent(GestureMetaData)
        VB: FireEvent(GestureMetaData)
      nameWithType:
        CSharp: Gesture.FireEvent(GestureMetaData)
        VB: Gesture.FireEvent(GestureMetaData)
      qualifiedName:
        CSharp: Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
        VB: Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: FireEvent
        path: ''
        startLine: 870
      syntax:
        content:
          CSharp: public void FireEvent(GestureMetaData metaData)
          VB: Public Sub FireEvent(metaData As GestureMetaData)
        parameters:
        - id: metaData
          type: Gestures.GestureMetaData
      overload: Gestures.Gesture.FireEvent*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.AddEvent(UnityAction{Gestures.GestureMetaData})
      commentId: M:Gestures.Gesture.AddEvent(UnityAction{Gestures.GestureMetaData})
      language: CSharp
      name:
        CSharp: AddEvent(UnityAction<GestureMetaData>)
        VB: AddEvent(UnityAction(Of GestureMetaData))
      nameWithType:
        CSharp: Gesture.AddEvent(UnityAction<GestureMetaData>)
        VB: Gesture.AddEvent(UnityAction(Of GestureMetaData))
      qualifiedName:
        CSharp: Gestures.Gesture.AddEvent(UnityAction<Gestures.GestureMetaData>)
        VB: Gestures.Gesture.AddEvent(UnityAction(Of Gestures.GestureMetaData))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddEvent
        path: ''
        startLine: 874
      syntax:
        content:
          CSharp: public Gesture AddEvent(UnityAction<GestureMetaData> eventAction)
          VB: Public Function AddEvent(eventAction As UnityAction(Of GestureMetaData)) As Gesture
        parameters:
        - id: eventAction
          type: UnityAction{Gestures.GestureMetaData}
        return:
          type: Gestures.Gesture
      overload: Gestures.Gesture.AddEvent*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.ClearEvents
      commentId: M:Gestures.Gesture.ClearEvents
      language: CSharp
      name:
        CSharp: ClearEvents()
        VB: ClearEvents()
      nameWithType:
        CSharp: Gesture.ClearEvents()
        VB: Gesture.ClearEvents()
      qualifiedName:
        CSharp: Gestures.Gesture.ClearEvents()
        VB: Gestures.Gesture.ClearEvents()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: ClearEvents
        path: ''
        startLine: 879
      syntax:
        content:
          CSharp: public void ClearEvents()
          VB: Public Sub ClearEvents
      overload: Gestures.Gesture.ClearEvents*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
      commentId: M:Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
      language: CSharp
      name:
        CSharp: SetNormalizer(Normalizer)
        VB: SetNormalizer(Normalizer)
      nameWithType:
        CSharp: Gesture.SetNormalizer(Normalizer)
        VB: Gesture.SetNormalizer(Normalizer)
      qualifiedName:
        CSharp: Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
        VB: Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: SetNormalizer
        path: ''
        startLine: 883
      syntax:
        content:
          CSharp: public Gesture SetNormalizer(Normalizer nm)
          VB: Public Function SetNormalizer(nm As Normalizer) As Gesture
        parameters:
        - id: nm
          type: Gestures.Normalizer
        return:
          type: Gestures.Gesture
      overload: Gestures.Gesture.SetNormalizer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.AddOnceCheck(Gestures.Check)
      commentId: M:Gestures.Gesture.AddOnceCheck(Gestures.Check)
      language: CSharp
      name:
        CSharp: AddOnceCheck(Check)
        VB: AddOnceCheck(Check)
      nameWithType:
        CSharp: Gesture.AddOnceCheck(Check)
        VB: Gesture.AddOnceCheck(Check)
      qualifiedName:
        CSharp: Gestures.Gesture.AddOnceCheck(Gestures.Check)
        VB: Gestures.Gesture.AddOnceCheck(Gestures.Check)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddOnceCheck
        path: ''
        startLine: 888
      syntax:
        content:
          CSharp: public Gesture AddOnceCheck(Check newCheck)
          VB: Public Function AddOnceCheck(newCheck As Check) As Gesture
        parameters:
        - id: newCheck
          type: Gestures.Check
        return:
          type: Gestures.Gesture
      overload: Gestures.Gesture.AddOnceCheck*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
      commentId: M:Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
      language: CSharp
      name:
        CSharp: AddOnceChecks(IEnumerable<Check>)
        VB: AddOnceChecks(IEnumerable(Of Check))
      nameWithType:
        CSharp: Gesture.AddOnceChecks(IEnumerable<Check>)
        VB: Gesture.AddOnceChecks(IEnumerable(Of Check))
      qualifiedName:
        CSharp: Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable<Gestures.Check>)
        VB: Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable(Of Gestures.Check))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddOnceChecks
        path: ''
        startLine: 893
      syntax:
        content:
          CSharp: public Gesture AddOnceChecks(IEnumerable<Check> newChecks)
          VB: Public Function AddOnceChecks(newChecks As IEnumerable(Of Check)) As Gesture
        parameters:
        - id: newChecks
          type: System.Collections.Generic.IEnumerable{Gestures.Check}
        return:
          type: Gestures.Gesture
      overload: Gestures.Gesture.AddOnceChecks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
      commentId: M:Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
      language: CSharp
      name:
        CSharp: AddAlwaysCheck(Check)
        VB: AddAlwaysCheck(Check)
      nameWithType:
        CSharp: Gesture.AddAlwaysCheck(Check)
        VB: Gesture.AddAlwaysCheck(Check)
      qualifiedName:
        CSharp: Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
        VB: Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddAlwaysCheck
        path: ''
        startLine: 898
      syntax:
        content:
          CSharp: public Gesture AddAlwaysCheck(Check newCheck)
          VB: Public Function AddAlwaysCheck(newCheck As Check) As Gesture
        parameters:
        - id: newCheck
          type: Gestures.Check
        return:
          type: Gestures.Gesture
      overload: Gestures.Gesture.AddAlwaysCheck*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
      commentId: M:Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
      language: CSharp
      name:
        CSharp: AddAlwaysChecks(IEnumerable<Check>)
        VB: AddAlwaysChecks(IEnumerable(Of Check))
      nameWithType:
        CSharp: Gesture.AddAlwaysChecks(IEnumerable<Check>)
        VB: Gesture.AddAlwaysChecks(IEnumerable(Of Check))
      qualifiedName:
        CSharp: Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable<Gestures.Check>)
        VB: Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable(Of Gestures.Check))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddAlwaysChecks
        path: ''
        startLine: 903
      syntax:
        content:
          CSharp: public Gesture AddAlwaysChecks(IEnumerable<Check> newChecks)
          VB: Public Function AddAlwaysChecks(newChecks As IEnumerable(Of Check)) As Gesture
        parameters:
        - id: newChecks
          type: System.Collections.Generic.IEnumerable{Gestures.Check}
        return:
          type: Gestures.Gesture
      overload: Gestures.Gesture.AddAlwaysChecks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.AddSequentialCheck(Gestures.Check)
      commentId: M:Gestures.Gesture.AddSequentialCheck(Gestures.Check)
      language: CSharp
      name:
        CSharp: AddSequentialCheck(Check)
        VB: AddSequentialCheck(Check)
      nameWithType:
        CSharp: Gesture.AddSequentialCheck(Check)
        VB: Gesture.AddSequentialCheck(Check)
      qualifiedName:
        CSharp: Gestures.Gesture.AddSequentialCheck(Gestures.Check)
        VB: Gestures.Gesture.AddSequentialCheck(Gestures.Check)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddSequentialCheck
        path: ''
        startLine: 908
      syntax:
        content:
          CSharp: public Gesture AddSequentialCheck(Check newCheck)
          VB: Public Function AddSequentialCheck(newCheck As Check) As Gesture
        parameters:
        - id: newCheck
          type: Gestures.Check
        return:
          type: Gestures.Gesture
      overload: Gestures.Gesture.AddSequentialCheck*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
      commentId: M:Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
      language: CSharp
      name:
        CSharp: AddSequentialChecks(IEnumerable<Check>)
        VB: AddSequentialChecks(IEnumerable(Of Check))
      nameWithType:
        CSharp: Gesture.AddSequentialChecks(IEnumerable<Check>)
        VB: Gesture.AddSequentialChecks(IEnumerable(Of Check))
      qualifiedName:
        CSharp: Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable<Gestures.Check>)
        VB: Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable(Of Gestures.Check))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddSequentialChecks
        path: ''
        startLine: 913
      syntax:
        content:
          CSharp: public Gesture AddSequentialChecks(IEnumerable<Check> newChecks)
          VB: Public Function AddSequentialChecks(newChecks As IEnumerable(Of Check)) As Gesture
        parameters:
        - id: newChecks
          type: System.Collections.Generic.IEnumerable{Gestures.Check}
        return:
          type: Gestures.Gesture
      overload: Gestures.Gesture.AddSequentialChecks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.Gesture.VisualizeGesture(Rect)
      commentId: M:Gestures.Gesture.VisualizeGesture(Rect)
      language: CSharp
      name:
        CSharp: VisualizeGesture(Rect)
        VB: VisualizeGesture(Rect)
      nameWithType:
        CSharp: Gesture.VisualizeGesture(Rect)
        VB: Gesture.VisualizeGesture(Rect)
      qualifiedName:
        CSharp: Gestures.Gesture.VisualizeGesture(Rect)
        VB: Gestures.Gesture.VisualizeGesture(Rect)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: VisualizeGesture
        path: ''
        startLine: 918
      syntax:
        content:
          CSharp: public void VisualizeGesture(Rect grid)
          VB: Public Sub VisualizeGesture(grid As Rect)
        parameters:
        - id: grid
          type: Rect
      overload: Gestures.Gesture.VisualizeGesture*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Gestures.GestureEvent
    commentId: T:Gestures.GestureEvent
    language: CSharp
    name:
      CSharp: GestureEvent
      VB: GestureEvent
    nameWithType:
      CSharp: GestureEvent
      VB: GestureEvent
    qualifiedName:
      CSharp: Gestures.GestureEvent
      VB: Gestures.GestureEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: GestureEvent
      path: ''
      startLine: 940
    summary: "\nWrapper class for a Unity Event that takes in GestureMetaData as a parameter\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GestureEvent : UnityEvent<GestureMetaData>'
        VB: >-
          Public Class GestureEvent

              Inherits UnityEvent(Of GestureMetaData)
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.GestureEvent.#ctor
      commentId: M:Gestures.GestureEvent.#ctor
      language: CSharp
      name:
        CSharp: GestureEvent()
        VB: GestureEvent()
      nameWithType:
        CSharp: GestureEvent.GestureEvent()
        VB: GestureEvent.GestureEvent()
      qualifiedName:
        CSharp: Gestures.GestureEvent.GestureEvent()
        VB: Gestures.GestureEvent.GestureEvent()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 941
      syntax:
        content:
          CSharp: public GestureEvent()
          VB: Public Sub New
      overload: Gestures.GestureEvent.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureEvent.#ctor(UnityAction{Gestures.GestureMetaData})
      commentId: M:Gestures.GestureEvent.#ctor(UnityAction{Gestures.GestureMetaData})
      language: CSharp
      name:
        CSharp: GestureEvent(UnityAction<GestureMetaData>)
        VB: GestureEvent(UnityAction(Of GestureMetaData))
      nameWithType:
        CSharp: GestureEvent.GestureEvent(UnityAction<GestureMetaData>)
        VB: GestureEvent.GestureEvent(UnityAction(Of GestureMetaData))
      qualifiedName:
        CSharp: Gestures.GestureEvent.GestureEvent(UnityAction<Gestures.GestureMetaData>)
        VB: Gestures.GestureEvent.GestureEvent(UnityAction(Of Gestures.GestureMetaData))
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 942
      syntax:
        content:
          CSharp: public GestureEvent(UnityAction<GestureMetaData> action)
          VB: Public Sub New(action As UnityAction(Of GestureMetaData))
        parameters:
        - id: action
          type: UnityAction{Gestures.GestureMetaData}
      overload: Gestures.GestureEvent.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Gestures.GestureMetaData
    commentId: T:Gestures.GestureMetaData
    language: CSharp
    name:
      CSharp: GestureMetaData
      VB: GestureMetaData
    nameWithType:
      CSharp: GestureMetaData
      VB: GestureMetaData
    qualifiedName:
      CSharp: Gestures.GestureMetaData
      VB: Gestures.GestureMetaData
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: GestureMetaData
      path: ''
      startLine: 957
    summary: "\nA data container class to store extra meta data about the completed gesture\n"
    example: []
    syntax:
      content:
        CSharp: public class GestureMetaData
        VB: Public Class GestureMetaData
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.GestureMetaData.scale
      commentId: F:Gestures.GestureMetaData.scale
      language: CSharp
      name:
        CSharp: scale
        VB: scale
      nameWithType:
        CSharp: GestureMetaData.scale
        VB: GestureMetaData.scale
      qualifiedName:
        CSharp: Gestures.GestureMetaData.scale
        VB: Gestures.GestureMetaData.scale
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: scale
        path: ''
        startLine: 959
      summary: 'The scale of the gesture in world-space '
      example: []
      syntax:
        content:
          CSharp: public Vector3 scale
          VB: Public scale As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMetaData.centroid
      commentId: F:Gestures.GestureMetaData.centroid
      language: CSharp
      name:
        CSharp: centroid
        VB: centroid
      nameWithType:
        CSharp: GestureMetaData.centroid
        VB: GestureMetaData.centroid
      qualifiedName:
        CSharp: Gestures.GestureMetaData.centroid
        VB: Gestures.GestureMetaData.centroid
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: centroid
        path: ''
        startLine: 962
      summary: 'The center of the gesture in world-space '
      example: []
      syntax:
        content:
          CSharp: public Vector3 centroid
          VB: Public centroid As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMetaData.name
      commentId: F:Gestures.GestureMetaData.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: GestureMetaData.name
        VB: GestureMetaData.name
      qualifiedName:
        CSharp: Gestures.GestureMetaData.name
        VB: Gestures.GestureMetaData.name
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: name
        path: ''
        startLine: 965
      summary: 'The name of the completed gesture. '
      example: []
      syntax:
        content:
          CSharp: public string name
          VB: Public name As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMetaData.pointCount
      commentId: F:Gestures.GestureMetaData.pointCount
      language: CSharp
      name:
        CSharp: pointCount
        VB: pointCount
      nameWithType:
        CSharp: GestureMetaData.pointCount
        VB: GestureMetaData.pointCount
      qualifiedName:
        CSharp: Gestures.GestureMetaData.pointCount
        VB: Gestures.GestureMetaData.pointCount
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: pointCount
        path: ''
        startLine: 968
      summary: 'The number of points used to draw the gesture '
      example: []
      syntax:
        content:
          CSharp: public int pointCount
          VB: Public pointCount As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMetaData.time
      commentId: F:Gestures.GestureMetaData.time
      language: CSharp
      name:
        CSharp: time
        VB: time
      nameWithType:
        CSharp: GestureMetaData.time
        VB: GestureMetaData.time
      qualifiedName:
        CSharp: Gestures.GestureMetaData.time
        VB: Gestures.GestureMetaData.time
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: time
        path: ''
        startLine: 971
      summary: 'The total time it took to draw the gesture '
      example: []
      syntax:
        content:
          CSharp: public float time
          VB: Public time As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMetaData.precision
      commentId: F:Gestures.GestureMetaData.precision
      language: CSharp
      name:
        CSharp: precision
        VB: precision
      nameWithType:
        CSharp: GestureMetaData.precision
        VB: GestureMetaData.precision
      qualifiedName:
        CSharp: Gestures.GestureMetaData.precision
        VB: Gestures.GestureMetaData.precision
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: precision
        path: ''
        startLine: 974
      summary: 'A measure of how close a gesture was to the exact definition. A perfect gesture has a precision of 0, a gesture that barely passes has a precision of 1 '
      example: []
      syntax:
        content:
          CSharp: public float precision
          VB: Public precision As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMetaData.averageSpeed
      commentId: F:Gestures.GestureMetaData.averageSpeed
      language: CSharp
      name:
        CSharp: averageSpeed
        VB: averageSpeed
      nameWithType:
        CSharp: GestureMetaData.averageSpeed
        VB: GestureMetaData.averageSpeed
      qualifiedName:
        CSharp: Gestures.GestureMetaData.averageSpeed
        VB: Gestures.GestureMetaData.averageSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: averageSpeed
        path: ''
        startLine: 977
      summary: 'The average speed of the user&apos;s hand over the course of the gesture '
      example: []
      syntax:
        content:
          CSharp: public float averageSpeed
          VB: Public averageSpeed As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMetaData.GetGestureMetaData(System.Collections.Generic.List{Gestures.GTransform})
      commentId: M:Gestures.GestureMetaData.GetGestureMetaData(System.Collections.Generic.List{Gestures.GTransform})
      language: CSharp
      name:
        CSharp: GetGestureMetaData(List<GTransform>)
        VB: GetGestureMetaData(List(Of GTransform))
      nameWithType:
        CSharp: GestureMetaData.GetGestureMetaData(List<GTransform>)
        VB: GestureMetaData.GetGestureMetaData(List(Of GTransform))
      qualifiedName:
        CSharp: Gestures.GestureMetaData.GetGestureMetaData(System.Collections.Generic.List<Gestures.GTransform>)
        VB: Gestures.GestureMetaData.GetGestureMetaData(System.Collections.Generic.List(Of Gestures.GTransform))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: GetGestureMetaData
        path: ''
        startLine: 984
      summary: "\nStatic helper method to convert a list of transforms into a partially complete GestureMetaData object\n"
      example: []
      syntax:
        content:
          CSharp: public static GestureMetaData GetGestureMetaData(List<GTransform> transforms)
          VB: Public Shared Function GetGestureMetaData(transforms As List(Of GTransform)) As GestureMetaData
        parameters:
        - id: transforms
          type: System.Collections.Generic.List{Gestures.GTransform}
          description: The list of raw GTransform data
        return:
          type: Gestures.GestureMetaData
          description: Returns a `GestureMetaData` instance with fields populated
      overload: Gestures.GestureMetaData.GetGestureMetaData*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Gestures.GestureMonitor
    commentId: T:Gestures.GestureMonitor
    language: CSharp
    name:
      CSharp: GestureMonitor
      VB: GestureMonitor
    nameWithType:
      CSharp: GestureMonitor
      VB: GestureMonitor
    qualifiedName:
      CSharp: Gestures.GestureMonitor
      VB: Gestures.GestureMonitor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: GestureMonitor
      path: ''
      startLine: 1025
    summary: "\nClass responsible for tracking gestures. See <xref href=\"TrackerSetup\" data-throw-if-not-resolved=\"false\"></xref> for example of how to set up instance.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GestureMonitor : MonoBehaviour'
        VB: >-
          Public Class GestureMonitor

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.GestureMonitor.lineRenderer
      commentId: F:Gestures.GestureMonitor.lineRenderer
      language: CSharp
      name:
        CSharp: lineRenderer
        VB: lineRenderer
      nameWithType:
        CSharp: GestureMonitor.lineRenderer
        VB: GestureMonitor.lineRenderer
      qualifiedName:
        CSharp: Gestures.GestureMonitor.lineRenderer
        VB: Gestures.GestureMonitor.lineRenderer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: lineRenderer
        path: ''
        startLine: 1027
      syntax:
        content:
          CSharp: public LineRenderer lineRenderer
          VB: Public lineRenderer As LineRenderer
        return:
          type: LineRenderer
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.controller
      commentId: F:Gestures.GestureMonitor.controller
      language: CSharp
      name:
        CSharp: controller
        VB: controller
      nameWithType:
        CSharp: GestureMonitor.controller
        VB: GestureMonitor.controller
      qualifiedName:
        CSharp: Gestures.GestureMonitor.controller
        VB: Gestures.GestureMonitor.controller
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: controller
        path: ''
        startLine: 1028
      syntax:
        content:
          CSharp: public IController controller
          VB: Public controller As IController
        return:
          type: Gestures.IController
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.bufferSize
      commentId: F:Gestures.GestureMonitor.bufferSize
      language: CSharp
      name:
        CSharp: bufferSize
        VB: bufferSize
      nameWithType:
        CSharp: GestureMonitor.bufferSize
        VB: GestureMonitor.bufferSize
      qualifiedName:
        CSharp: Gestures.GestureMonitor.bufferSize
        VB: Gestures.GestureMonitor.bufferSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: bufferSize
        path: ''
        startLine: 1033
      syntax:
        content:
          CSharp: public int bufferSize
          VB: Public bufferSize As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.GetGestureMap
      commentId: M:Gestures.GestureMonitor.GetGestureMap
      language: CSharp
      name:
        CSharp: GetGestureMap()
        VB: GetGestureMap()
      nameWithType:
        CSharp: GestureMonitor.GetGestureMap()
        VB: GestureMonitor.GetGestureMap()
      qualifiedName:
        CSharp: Gestures.GestureMonitor.GetGestureMap()
        VB: Gestures.GestureMonitor.GetGestureMap()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: GetGestureMap
        path: ''
        startLine: 1153
      summary: "\nGet the Dictionary storing Gestures and names.\n"
      example: []
      syntax:
        content:
          CSharp: public Dictionary<string, Gesture> GetGestureMap()
          VB: Public Function GetGestureMap As Dictionary(Of String, Gesture)
        return:
          type: System.Collections.Generic.Dictionary{System.String,Gestures.Gesture}
          description: Dictionary mapping Gesture names to gestures
      overload: Gestures.GestureMonitor.GetGestureMap*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.GetViewNormalizer
      commentId: M:Gestures.GestureMonitor.GetViewNormalizer
      language: CSharp
      name:
        CSharp: GetViewNormalizer()
        VB: GetViewNormalizer()
      nameWithType:
        CSharp: GestureMonitor.GetViewNormalizer()
        VB: GestureMonitor.GetViewNormalizer()
      qualifiedName:
        CSharp: Gestures.GestureMonitor.GetViewNormalizer()
        VB: Gestures.GestureMonitor.GetViewNormalizer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: GetViewNormalizer
        path: ''
        startLine: 1161
      summary: "\nGet the data normalizer used by this monitor\n"
      example: []
      syntax:
        content:
          CSharp: public Normalizer GetViewNormalizer()
          VB: Public Function GetViewNormalizer As Normalizer
        return:
          type: Gestures.Normalizer
          description: Return the class&apos;s ViewNormalizer
      overload: Gestures.GestureMonitor.GetViewNormalizer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.GetDataBuffer
      commentId: M:Gestures.GestureMonitor.GetDataBuffer
      language: CSharp
      name:
        CSharp: GetDataBuffer()
        VB: GetDataBuffer()
      nameWithType:
        CSharp: GestureMonitor.GetDataBuffer()
        VB: GestureMonitor.GetDataBuffer()
      qualifiedName:
        CSharp: Gestures.GestureMonitor.GetDataBuffer()
        VB: Gestures.GestureMonitor.GetDataBuffer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: GetDataBuffer
        path: ''
        startLine: 1169
      summary: "\nGet the data buffer used by this monitor\n"
      example: []
      syntax:
        content:
          CSharp: public GTransformBuffer GetDataBuffer()
          VB: Public Function GetDataBuffer As GTransformBuffer
        return:
          type: Gestures.GTransformBuffer
          description: Return the class&apos;s GTransformBuffer
      overload: Gestures.GestureMonitor.GetDataBuffer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.AddGesture(System.String,Gestures.Gesture)
      commentId: M:Gestures.GestureMonitor.AddGesture(System.String,Gestures.Gesture)
      language: CSharp
      name:
        CSharp: AddGesture(String, Gesture)
        VB: AddGesture(String, Gesture)
      nameWithType:
        CSharp: GestureMonitor.AddGesture(String, Gesture)
        VB: GestureMonitor.AddGesture(String, Gesture)
      qualifiedName:
        CSharp: Gestures.GestureMonitor.AddGesture(System.String, Gestures.Gesture)
        VB: Gestures.GestureMonitor.AddGesture(System.String, Gestures.Gesture)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddGesture
        path: ''
        startLine: 1178
      summary: "\nAdd a new Gesture to be tracked\n"
      example: []
      syntax:
        content:
          CSharp: public void AddGesture(string name, Gesture g)
          VB: Public Sub AddGesture(name As String, g As Gesture)
        parameters:
        - id: name
          type: System.String
          description: The name to reference the Gesture by
        - id: g
          type: Gestures.Gesture
          description: The instance of a Gesture to track
      overload: Gestures.GestureMonitor.AddGesture*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.SetTrackGesture(System.String,System.Boolean)
      commentId: M:Gestures.GestureMonitor.SetTrackGesture(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: SetTrackGesture(String, Boolean)
        VB: SetTrackGesture(String, Boolean)
      nameWithType:
        CSharp: GestureMonitor.SetTrackGesture(String, Boolean)
        VB: GestureMonitor.SetTrackGesture(String, Boolean)
      qualifiedName:
        CSharp: Gestures.GestureMonitor.SetTrackGesture(System.String, System.Boolean)
        VB: Gestures.GestureMonitor.SetTrackGesture(System.String, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: SetTrackGesture
        path: ''
        startLine: 1188
      summary: "\nSet the tracking state for a single Gesture\n"
      example: []
      syntax:
        content:
          CSharp: public void SetTrackGesture(string gname, bool enabled)
          VB: Public Sub SetTrackGesture(gname As String, enabled As Boolean)
        parameters:
        - id: gname
          type: System.String
          description: The name of the Gesture to set the tracking state of
        - id: enabled
          type: System.Boolean
          description: '`True` if the Gesture should be enabled, `False` otherwise'
      overload: Gestures.GestureMonitor.SetTrackGesture*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.SetTrackGesture(System.Collections.Generic.List{System.String},System.Boolean)
      commentId: M:Gestures.GestureMonitor.SetTrackGesture(System.Collections.Generic.List{System.String},System.Boolean)
      language: CSharp
      name:
        CSharp: SetTrackGesture(List<String>, Boolean)
        VB: SetTrackGesture(List(Of String), Boolean)
      nameWithType:
        CSharp: GestureMonitor.SetTrackGesture(List<String>, Boolean)
        VB: GestureMonitor.SetTrackGesture(List(Of String), Boolean)
      qualifiedName:
        CSharp: Gestures.GestureMonitor.SetTrackGesture(System.Collections.Generic.List<System.String>, System.Boolean)
        VB: Gestures.GestureMonitor.SetTrackGesture(System.Collections.Generic.List(Of System.String), System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: SetTrackGesture
        path: ''
        startLine: 1202
      summary: "\nSet the tracking state for a list of Gestures\n"
      example: []
      syntax:
        content:
          CSharp: public void SetTrackGesture(List<string> names, bool enabled)
          VB: Public Sub SetTrackGesture(names As List(Of String), enabled As Boolean)
        parameters:
        - id: names
          type: System.Collections.Generic.List{System.String}
          description: The names of all Gestures to set the tracking state of
        - id: enabled
          type: System.Boolean
          description: '`True` if the Gestures should be enabled, `False` otherwise'
      overload: Gestures.GestureMonitor.SetTrackGesture*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.SetTrackAllGestures(System.Boolean)
      commentId: M:Gestures.GestureMonitor.SetTrackAllGestures(System.Boolean)
      language: CSharp
      name:
        CSharp: SetTrackAllGestures(Boolean)
        VB: SetTrackAllGestures(Boolean)
      nameWithType:
        CSharp: GestureMonitor.SetTrackAllGestures(Boolean)
        VB: GestureMonitor.SetTrackAllGestures(Boolean)
      qualifiedName:
        CSharp: Gestures.GestureMonitor.SetTrackAllGestures(System.Boolean)
        VB: Gestures.GestureMonitor.SetTrackAllGestures(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: SetTrackAllGestures
        path: ''
        startLine: 1212
      summary: "\nSet the tracking state for all Gestures\n"
      example: []
      syntax:
        content:
          CSharp: public void SetTrackAllGestures(bool enabled)
          VB: Public Sub SetTrackAllGestures(enabled As Boolean)
        parameters:
        - id: enabled
          type: System.Boolean
          description: '`True` if all Gestures should be enabled, `False` otherwise'
      overload: Gestures.GestureMonitor.SetTrackAllGestures*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.AddGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
      commentId: M:Gestures.GestureMonitor.AddGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
      language: CSharp
      name:
        CSharp: AddGestureCompleteCallback(UnityAction<GestureMetaData>)
        VB: AddGestureCompleteCallback(UnityAction(Of GestureMetaData))
      nameWithType:
        CSharp: GestureMonitor.AddGestureCompleteCallback(UnityAction<GestureMetaData>)
        VB: GestureMonitor.AddGestureCompleteCallback(UnityAction(Of GestureMetaData))
      qualifiedName:
        CSharp: Gestures.GestureMonitor.AddGestureCompleteCallback(UnityAction<Gestures.GestureMetaData>)
        VB: Gestures.GestureMonitor.AddGestureCompleteCallback(UnityAction(Of Gestures.GestureMetaData))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddGestureCompleteCallback
        path: ''
        startLine: 1227
      summary: "\nAdd an event listener for when a user completes a valid Gesture\n"
      example: []
      syntax:
        content:
          CSharp: public void AddGestureCompleteCallback(UnityAction<GestureMetaData> eve)
          VB: Public Sub AddGestureCompleteCallback(eve As UnityAction(Of GestureMetaData))
        parameters:
        - id: eve
          type: UnityAction{Gestures.GestureMetaData}
          description: ''
      overload: Gestures.GestureMonitor.AddGestureCompleteCallback*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.RemoveGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
      commentId: M:Gestures.GestureMonitor.RemoveGestureCompleteCallback(UnityAction{Gestures.GestureMetaData})
      language: CSharp
      name:
        CSharp: RemoveGestureCompleteCallback(UnityAction<GestureMetaData>)
        VB: RemoveGestureCompleteCallback(UnityAction(Of GestureMetaData))
      nameWithType:
        CSharp: GestureMonitor.RemoveGestureCompleteCallback(UnityAction<GestureMetaData>)
        VB: GestureMonitor.RemoveGestureCompleteCallback(UnityAction(Of GestureMetaData))
      qualifiedName:
        CSharp: Gestures.GestureMonitor.RemoveGestureCompleteCallback(UnityAction<Gestures.GestureMetaData>)
        VB: Gestures.GestureMonitor.RemoveGestureCompleteCallback(UnityAction(Of Gestures.GestureMetaData))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: RemoveGestureCompleteCallback
        path: ''
        startLine: 1235
      summary: "\nRemove an event listener for when a user completes a valid Gesture\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveGestureCompleteCallback(UnityAction<GestureMetaData> eve)
          VB: Public Sub RemoveGestureCompleteCallback(eve As UnityAction(Of GestureMetaData))
        parameters:
        - id: eve
          type: UnityAction{Gestures.GestureMetaData}
          description: ''
      overload: Gestures.GestureMonitor.RemoveGestureCompleteCallback*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks
      commentId: M:Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks
      language: CSharp
      name:
        CSharp: RemoveAllGestureCompleteCallbacks()
        VB: RemoveAllGestureCompleteCallbacks()
      nameWithType:
        CSharp: GestureMonitor.RemoveAllGestureCompleteCallbacks()
        VB: GestureMonitor.RemoveAllGestureCompleteCallbacks()
      qualifiedName:
        CSharp: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks()
        VB: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: RemoveAllGestureCompleteCallbacks
        path: ''
        startLine: 1242
      summary: "\nRemove all event listeners for when a user completes a valid Gesture\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveAllGestureCompleteCallbacks()
          VB: Public Sub RemoveAllGestureCompleteCallbacks
      overload: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.AddGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
      commentId: M:Gestures.GestureMonitor.AddGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
      language: CSharp
      name:
        CSharp: AddGestureFailedCallback(UnityAction<GestureMetaData>)
        VB: AddGestureFailedCallback(UnityAction(Of GestureMetaData))
      nameWithType:
        CSharp: GestureMonitor.AddGestureFailedCallback(UnityAction<GestureMetaData>)
        VB: GestureMonitor.AddGestureFailedCallback(UnityAction(Of GestureMetaData))
      qualifiedName:
        CSharp: Gestures.GestureMonitor.AddGestureFailedCallback(UnityAction<Gestures.GestureMetaData>)
        VB: Gestures.GestureMonitor.AddGestureFailedCallback(UnityAction(Of Gestures.GestureMetaData))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddGestureFailedCallback
        path: ''
        startLine: 1256
      summary: "\nAdd an event listener for when a user fails to complete a valid Gesture\n"
      example: []
      syntax:
        content:
          CSharp: public void AddGestureFailedCallback(UnityAction<GestureMetaData> eve)
          VB: Public Sub AddGestureFailedCallback(eve As UnityAction(Of GestureMetaData))
        parameters:
        - id: eve
          type: UnityAction{Gestures.GestureMetaData}
          description: ''
      overload: Gestures.GestureMonitor.AddGestureFailedCallback*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.RemoveGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
      commentId: M:Gestures.GestureMonitor.RemoveGestureFailedCallback(UnityAction{Gestures.GestureMetaData})
      language: CSharp
      name:
        CSharp: RemoveGestureFailedCallback(UnityAction<GestureMetaData>)
        VB: RemoveGestureFailedCallback(UnityAction(Of GestureMetaData))
      nameWithType:
        CSharp: GestureMonitor.RemoveGestureFailedCallback(UnityAction<GestureMetaData>)
        VB: GestureMonitor.RemoveGestureFailedCallback(UnityAction(Of GestureMetaData))
      qualifiedName:
        CSharp: Gestures.GestureMonitor.RemoveGestureFailedCallback(UnityAction<Gestures.GestureMetaData>)
        VB: Gestures.GestureMonitor.RemoveGestureFailedCallback(UnityAction(Of Gestures.GestureMetaData))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: RemoveGestureFailedCallback
        path: ''
        startLine: 1264
      summary: "\nRemove an event listener for when a user fails to complete a valid Gesture\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveGestureFailedCallback(UnityAction<GestureMetaData> eve)
          VB: Public Sub RemoveGestureFailedCallback(eve As UnityAction(Of GestureMetaData))
        parameters:
        - id: eve
          type: UnityAction{Gestures.GestureMetaData}
          description: ''
      overload: Gestures.GestureMonitor.RemoveGestureFailedCallback*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks
      commentId: M:Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks
      language: CSharp
      name:
        CSharp: RemoveAllGestureFailedCallbacks()
        VB: RemoveAllGestureFailedCallbacks()
      nameWithType:
        CSharp: GestureMonitor.RemoveAllGestureFailedCallbacks()
        VB: GestureMonitor.RemoveAllGestureFailedCallbacks()
      qualifiedName:
        CSharp: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks()
        VB: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: RemoveAllGestureFailedCallbacks
        path: ''
        startLine: 1271
      summary: "\nRemove all event listeners for when a user fails to complete a valid Gesture\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveAllGestureFailedCallbacks()
          VB: Public Sub RemoveAllGestureFailedCallbacks
      overload: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.AddGestureStartCallback(UnityAction)
      commentId: M:Gestures.GestureMonitor.AddGestureStartCallback(UnityAction)
      language: CSharp
      name:
        CSharp: AddGestureStartCallback(UnityAction)
        VB: AddGestureStartCallback(UnityAction)
      nameWithType:
        CSharp: GestureMonitor.AddGestureStartCallback(UnityAction)
        VB: GestureMonitor.AddGestureStartCallback(UnityAction)
      qualifiedName:
        CSharp: Gestures.GestureMonitor.AddGestureStartCallback(UnityAction)
        VB: Gestures.GestureMonitor.AddGestureStartCallback(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: AddGestureStartCallback
        path: ''
        startLine: 1283
      summary: "\nAdd an event listener for when a user starts drawing a Gesture\n"
      example: []
      syntax:
        content:
          CSharp: public void AddGestureStartCallback(UnityAction eve)
          VB: Public Sub AddGestureStartCallback(eve As UnityAction)
        parameters:
        - id: eve
          type: UnityAction
      overload: Gestures.GestureMonitor.AddGestureStartCallback*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.RemoveGestureStartCallback(UnityAction)
      commentId: M:Gestures.GestureMonitor.RemoveGestureStartCallback(UnityAction)
      language: CSharp
      name:
        CSharp: RemoveGestureStartCallback(UnityAction)
        VB: RemoveGestureStartCallback(UnityAction)
      nameWithType:
        CSharp: GestureMonitor.RemoveGestureStartCallback(UnityAction)
        VB: GestureMonitor.RemoveGestureStartCallback(UnityAction)
      qualifiedName:
        CSharp: Gestures.GestureMonitor.RemoveGestureStartCallback(UnityAction)
        VB: Gestures.GestureMonitor.RemoveGestureStartCallback(UnityAction)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: RemoveGestureStartCallback
        path: ''
        startLine: 1290
      summary: "\nRemove an event listeners for when a user starts drawing a Gesture\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveGestureStartCallback(UnityAction eve)
          VB: Public Sub RemoveGestureStartCallback(eve As UnityAction)
        parameters:
        - id: eve
          type: UnityAction
      overload: Gestures.GestureMonitor.RemoveGestureStartCallback*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks
      commentId: M:Gestures.GestureMonitor.RemoveAllGestureStartCallbacks
      language: CSharp
      name:
        CSharp: RemoveAllGestureStartCallbacks()
        VB: RemoveAllGestureStartCallbacks()
      nameWithType:
        CSharp: GestureMonitor.RemoveAllGestureStartCallbacks()
        VB: GestureMonitor.RemoveAllGestureStartCallbacks()
      qualifiedName:
        CSharp: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks()
        VB: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: RemoveAllGestureStartCallbacks
        path: ''
        startLine: 1297
      summary: "\nRemove all event listeners for when a user starts drawing a Gesture\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveAllGestureStartCallbacks()
          VB: Public Sub RemoveAllGestureStartCallbacks
      overload: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.SetMaxBufferSize(System.Int32)
      commentId: M:Gestures.GestureMonitor.SetMaxBufferSize(System.Int32)
      language: CSharp
      name:
        CSharp: SetMaxBufferSize(Int32)
        VB: SetMaxBufferSize(Int32)
      nameWithType:
        CSharp: GestureMonitor.SetMaxBufferSize(Int32)
        VB: GestureMonitor.SetMaxBufferSize(Int32)
      qualifiedName:
        CSharp: Gestures.GestureMonitor.SetMaxBufferSize(System.Int32)
        VB: Gestures.GestureMonitor.SetMaxBufferSize(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: SetMaxBufferSize
        path: ''
        startLine: 1306
      summary: "\nSet the max capacity of the transform buffer\n"
      example: []
      syntax:
        content:
          CSharp: public void SetMaxBufferSize(int size)
          VB: Public Sub SetMaxBufferSize(size As Integer)
        parameters:
        - id: size
          type: System.Int32
          description: Set the number of GTransforms that the buffer can hold. Default is 512
      overload: Gestures.GestureMonitor.SetMaxBufferSize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.SetBufferWrap(System.Boolean)
      commentId: M:Gestures.GestureMonitor.SetBufferWrap(System.Boolean)
      language: CSharp
      name:
        CSharp: SetBufferWrap(Boolean)
        VB: SetBufferWrap(Boolean)
      nameWithType:
        CSharp: GestureMonitor.SetBufferWrap(Boolean)
        VB: GestureMonitor.SetBufferWrap(Boolean)
      qualifiedName:
        CSharp: Gestures.GestureMonitor.SetBufferWrap(System.Boolean)
        VB: Gestures.GestureMonitor.SetBufferWrap(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: SetBufferWrap
        path: ''
        startLine: 1314
      summary: "\nSet whether the buffer should act as a standard array or a circular array\n"
      example: []
      syntax:
        content:
          CSharp: public void SetBufferWrap(bool circular)
          VB: Public Sub SetBufferWrap(circular As Boolean)
        parameters:
        - id: circular
          type: System.Boolean
          description: '`True` if the buffer should wrap, `False` otherwise'
      overload: Gestures.GestureMonitor.SetBufferWrap*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GestureMonitor.ClearBuffer
      commentId: M:Gestures.GestureMonitor.ClearBuffer
      language: CSharp
      name:
        CSharp: ClearBuffer()
        VB: ClearBuffer()
      nameWithType:
        CSharp: GestureMonitor.ClearBuffer()
        VB: GestureMonitor.ClearBuffer()
      qualifiedName:
        CSharp: Gestures.GestureMonitor.ClearBuffer()
        VB: Gestures.GestureMonitor.ClearBuffer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: ClearBuffer
        path: ''
        startLine: 1321
      summary: "\nClear the buffer of all Transforms and erase all positions from the attached LineRenderer\n"
      example: []
      syntax:
        content:
          CSharp: public void ClearBuffer()
          VB: Public Sub ClearBuffer
      overload: Gestures.GestureMonitor.ClearBuffer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      TrackerSetup: 
  - id: Gestures.GTransform
    commentId: T:Gestures.GTransform
    language: CSharp
    name:
      CSharp: GTransform
      VB: GTransform
    nameWithType:
      CSharp: GTransform
      VB: GTransform
    qualifiedName:
      CSharp: Gestures.GTransform
      VB: Gestures.GTransform
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: GTransform
      path: ''
      startLine: 1339
    summary: "\nData class to contain all necessary information related to a controller transform\n"
    example: []
    syntax:
      content:
        CSharp: public class GTransform
        VB: Public Class GTransform
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.GTransform.position
      commentId: F:Gestures.GTransform.position
      language: CSharp
      name:
        CSharp: position
        VB: position
      nameWithType:
        CSharp: GTransform.position
        VB: GTransform.position
      qualifiedName:
        CSharp: Gestures.GTransform.position
        VB: Gestures.GTransform.position
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: position
        path: ''
        startLine: 1341
      syntax:
        content:
          CSharp: public Vector3 position
          VB: Public position As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransform.rotation
      commentId: F:Gestures.GTransform.rotation
      language: CSharp
      name:
        CSharp: rotation
        VB: rotation
      nameWithType:
        CSharp: GTransform.rotation
        VB: GTransform.rotation
      qualifiedName:
        CSharp: Gestures.GTransform.rotation
        VB: Gestures.GTransform.rotation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: rotation
        path: ''
        startLine: 1342
      syntax:
        content:
          CSharp: public Quaternion rotation
          VB: Public rotation As Quaternion
        return:
          type: Quaternion
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransform.velocity
      commentId: F:Gestures.GTransform.velocity
      language: CSharp
      name:
        CSharp: velocity
        VB: velocity
      nameWithType:
        CSharp: GTransform.velocity
        VB: GTransform.velocity
      qualifiedName:
        CSharp: Gestures.GTransform.velocity
        VB: Gestures.GTransform.velocity
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: velocity
        path: ''
        startLine: 1343
      syntax:
        content:
          CSharp: public Vector3 velocity
          VB: Public velocity As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransform.time
      commentId: F:Gestures.GTransform.time
      language: CSharp
      name:
        CSharp: time
        VB: time
      nameWithType:
        CSharp: GTransform.time
        VB: GTransform.time
      qualifiedName:
        CSharp: Gestures.GTransform.time
        VB: Gestures.GTransform.time
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: time
        path: ''
        startLine: 1344
      syntax:
        content:
          CSharp: public float time
          VB: Public time As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransform.#ctor(Vector3,Quaternion,Vector3,System.Single)
      commentId: M:Gestures.GTransform.#ctor(Vector3,Quaternion,Vector3,System.Single)
      language: CSharp
      name:
        CSharp: GTransform(Vector3, Quaternion, Vector3, Single)
        VB: GTransform(Vector3, Quaternion, Vector3, Single)
      nameWithType:
        CSharp: GTransform.GTransform(Vector3, Quaternion, Vector3, Single)
        VB: GTransform.GTransform(Vector3, Quaternion, Vector3, Single)
      qualifiedName:
        CSharp: Gestures.GTransform.GTransform(Vector3, Quaternion, Vector3, System.Single)
        VB: Gestures.GTransform.GTransform(Vector3, Quaternion, Vector3, System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 1346
      syntax:
        content:
          CSharp: public GTransform(Vector3 pos, Quaternion quat, Vector3 vel, float t)
          VB: Public Sub New(pos As Vector3, quat As Quaternion, vel As Vector3, t As Single)
        parameters:
        - id: pos
          type: Vector3
        - id: quat
          type: Quaternion
        - id: vel
          type: Vector3
        - id: t
          type: System.Single
      overload: Gestures.GTransform.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransform.Copy
      commentId: M:Gestures.GTransform.Copy
      language: CSharp
      name:
        CSharp: Copy()
        VB: Copy()
      nameWithType:
        CSharp: GTransform.Copy()
        VB: GTransform.Copy()
      qualifiedName:
        CSharp: Gestures.GTransform.Copy()
        VB: Gestures.GTransform.Copy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: Copy
        path: ''
        startLine: 1359
      summary: "\nCreate a copy of the GTransform instance\n"
      example: []
      syntax:
        content:
          CSharp: public GTransform Copy()
          VB: Public Function Copy As GTransform
        return:
          type: Gestures.GTransform
          description: "\nReturn new `GTransform` with the same data as the object this method was called on.\n"
      overload: Gestures.GTransform.Copy*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Gestures.GTransformBuffer
    commentId: T:Gestures.GTransformBuffer
    language: CSharp
    name:
      CSharp: GTransformBuffer
      VB: GTransformBuffer
    nameWithType:
      CSharp: GTransformBuffer
      VB: GTransformBuffer
    qualifiedName:
      CSharp: Gestures.GTransformBuffer
      VB: Gestures.GTransformBuffer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: GTransformBuffer
      path: ''
      startLine: 1376
    summary: "\nInternal class which can behave as either a set-size array or a circular array. \n"
    example: []
    syntax:
      content:
        CSharp: 'public class GTransformBuffer : IEnumerable<GTransform>, IEnumerable'
        VB: >-
          Public Class GTransformBuffer

              Implements IEnumerable(Of GTransform), IEnumerable
    inheritance:
    - System.Object
    implements:
    - System.Collections.Generic.IEnumerable{Gestures.GTransform}
    - System.Collections.IEnumerable
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.GTransformBuffer.#ctor(System.Int32)
      commentId: M:Gestures.GTransformBuffer.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: GTransformBuffer(Int32)
        VB: GTransformBuffer(Int32)
      nameWithType:
        CSharp: GTransformBuffer.GTransformBuffer(Int32)
        VB: GTransformBuffer.GTransformBuffer(Int32)
      qualifiedName:
        CSharp: Gestures.GTransformBuffer.GTransformBuffer(System.Int32)
        VB: Gestures.GTransformBuffer.GTransformBuffer(System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 1382
      syntax:
        content:
          CSharp: public GTransformBuffer(int maxSize)
          VB: Public Sub New(maxSize As Integer)
        parameters:
        - id: maxSize
          type: System.Int32
      overload: Gestures.GTransformBuffer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransformBuffer.Enqueue(Gestures.GTransform)
      commentId: M:Gestures.GTransformBuffer.Enqueue(Gestures.GTransform)
      language: CSharp
      name:
        CSharp: Enqueue(GTransform)
        VB: Enqueue(GTransform)
      nameWithType:
        CSharp: GTransformBuffer.Enqueue(GTransform)
        VB: GTransformBuffer.Enqueue(GTransform)
      qualifiedName:
        CSharp: Gestures.GTransformBuffer.Enqueue(Gestures.GTransform)
        VB: Gestures.GTransformBuffer.Enqueue(Gestures.GTransform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: Enqueue
        path: ''
        startLine: 1387
      syntax:
        content:
          CSharp: public void Enqueue(GTransform t)
          VB: Public Sub Enqueue(t As GTransform)
        parameters:
        - id: t
          type: Gestures.GTransform
      overload: Gestures.GTransformBuffer.Enqueue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransformBuffer.SetMaxSize(System.Int32)
      commentId: M:Gestures.GTransformBuffer.SetMaxSize(System.Int32)
      language: CSharp
      name:
        CSharp: SetMaxSize(Int32)
        VB: SetMaxSize(Int32)
      nameWithType:
        CSharp: GTransformBuffer.SetMaxSize(Int32)
        VB: GTransformBuffer.SetMaxSize(Int32)
      qualifiedName:
        CSharp: Gestures.GTransformBuffer.SetMaxSize(System.Int32)
        VB: Gestures.GTransformBuffer.SetMaxSize(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: SetMaxSize
        path: ''
        startLine: 1398
      syntax:
        content:
          CSharp: public void SetMaxSize(int maxSize)
          VB: Public Sub SetMaxSize(maxSize As Integer)
        parameters:
        - id: maxSize
          type: System.Int32
      overload: Gestures.GTransformBuffer.SetMaxSize*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransformBuffer.SetCircular(System.Boolean)
      commentId: M:Gestures.GTransformBuffer.SetCircular(System.Boolean)
      language: CSharp
      name:
        CSharp: SetCircular(Boolean)
        VB: SetCircular(Boolean)
      nameWithType:
        CSharp: GTransformBuffer.SetCircular(Boolean)
        VB: GTransformBuffer.SetCircular(Boolean)
      qualifiedName:
        CSharp: Gestures.GTransformBuffer.SetCircular(System.Boolean)
        VB: Gestures.GTransformBuffer.SetCircular(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: SetCircular
        path: ''
        startLine: 1402
      syntax:
        content:
          CSharp: public void SetCircular(bool circular)
          VB: Public Sub SetCircular(circular As Boolean)
        parameters:
        - id: circular
          type: System.Boolean
      overload: Gestures.GTransformBuffer.SetCircular*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransformBuffer.Size
      commentId: M:Gestures.GTransformBuffer.Size
      language: CSharp
      name:
        CSharp: Size()
        VB: Size()
      nameWithType:
        CSharp: GTransformBuffer.Size()
        VB: GTransformBuffer.Size()
      qualifiedName:
        CSharp: Gestures.GTransformBuffer.Size()
        VB: Gestures.GTransformBuffer.Size()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: Size
        path: ''
        startLine: 1406
      syntax:
        content:
          CSharp: public int Size()
          VB: Public Function Size As Integer
        return:
          type: System.Int32
      overload: Gestures.GTransformBuffer.Size*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransformBuffer.Dequeue
      commentId: M:Gestures.GTransformBuffer.Dequeue
      language: CSharp
      name:
        CSharp: Dequeue()
        VB: Dequeue()
      nameWithType:
        CSharp: GTransformBuffer.Dequeue()
        VB: GTransformBuffer.Dequeue()
      qualifiedName:
        CSharp: Gestures.GTransformBuffer.Dequeue()
        VB: Gestures.GTransformBuffer.Dequeue()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: Dequeue
        path: ''
        startLine: 1410
      syntax:
        content:
          CSharp: public void Dequeue()
          VB: Public Sub Dequeue
      overload: Gestures.GTransformBuffer.Dequeue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransformBuffer.Clear
      commentId: M:Gestures.GTransformBuffer.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: GTransformBuffer.Clear()
        VB: GTransformBuffer.Clear()
      qualifiedName:
        CSharp: Gestures.GTransformBuffer.Clear()
        VB: Gestures.GTransformBuffer.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: Clear
        path: ''
        startLine: 1414
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      overload: Gestures.GTransformBuffer.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.GTransformBuffer.GetEnumerator
      commentId: M:Gestures.GTransformBuffer.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: GTransformBuffer.GetEnumerator()
        VB: GTransformBuffer.GetEnumerator()
      qualifiedName:
        CSharp: Gestures.GTransformBuffer.GetEnumerator()
        VB: Gestures.GTransformBuffer.GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: GetEnumerator
        path: ''
        startLine: 1418
      syntax:
        content:
          CSharp: public IEnumerator<GTransform> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of GTransform)
        return:
          type: System.Collections.Generic.IEnumerator{Gestures.GTransform}
      overload: Gestures.GTransformBuffer.GetEnumerator*
      implements:
      - System.Collections.Generic.IEnumerable{Gestures.GTransform}.GetEnumerator
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - isEii: true
      id: Gestures.GTransformBuffer.System#Collections#IEnumerable#GetEnumerator
      commentId: M:Gestures.GTransformBuffer.System#Collections#IEnumerable#GetEnumerator
      language: CSharp
      name:
        CSharp: IEnumerable.GetEnumerator()
        VB: System.Collections.IEnumerable.GetEnumerator()
      nameWithType:
        CSharp: GTransformBuffer.IEnumerable.GetEnumerator()
        VB: GTransformBuffer.System.Collections.IEnumerable.GetEnumerator()
      qualifiedName:
        CSharp: Gestures.GTransformBuffer.System.Collections.IEnumerable.GetEnumerator()
        VB: Gestures.GTransformBuffer.System.Collections.IEnumerable.GetEnumerator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: System.Collections.IEnumerable.GetEnumerator
        path: ''
        startLine: 1424
      syntax:
        content:
          CSharp: IEnumerator IEnumerable.GetEnumerator()
          VB: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
        return:
          type: System.Collections.IEnumerator
      overload: Gestures.GTransformBuffer.System#Collections#IEnumerable#GetEnumerator*
      implements:
      - System.Collections.IEnumerable.GetEnumerator
      modifiers:
        CSharp: []
        VB: []
    - id: Gestures.GTransformBuffer.ToArray
      commentId: M:Gestures.GTransformBuffer.ToArray
      language: CSharp
      name:
        CSharp: ToArray()
        VB: ToArray()
      nameWithType:
        CSharp: GTransformBuffer.ToArray()
        VB: GTransformBuffer.ToArray()
      qualifiedName:
        CSharp: Gestures.GTransformBuffer.ToArray()
        VB: Gestures.GTransformBuffer.ToArray()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: ToArray
        path: ''
        startLine: 1428
      syntax:
        content:
          CSharp: public Vector3[] ToArray()
          VB: Public Function ToArray As Vector3()
        return:
          type: Vector3[]
      overload: Gestures.GTransformBuffer.ToArray*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Gestures.GestureVisualizerWindow
    commentId: T:Gestures.GestureVisualizerWindow
    language: CSharp
    name:
      CSharp: GestureVisualizerWindow
      VB: GestureVisualizerWindow
    nameWithType:
      CSharp: GestureVisualizerWindow
      VB: GestureVisualizerWindow
    qualifiedName:
      CSharp: Gestures.GestureVisualizerWindow
      VB: Gestures.GestureVisualizerWindow
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: GestureVisualizerWindow
      path: ''
      startLine: 1449
    syntax:
      content:
        CSharp: 'public class GestureVisualizerWindow : EditorWindow'
        VB: >-
          Public Class GestureVisualizerWindow

              Inherits EditorWindow
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Gestures.FittedNormalizer
    commentId: T:Gestures.FittedNormalizer
    language: CSharp
    name:
      CSharp: FittedNormalizer
      VB: FittedNormalizer
    nameWithType:
      CSharp: FittedNormalizer
      VB: FittedNormalizer
    qualifiedName:
      CSharp: Gestures.FittedNormalizer
      VB: Gestures.FittedNormalizer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: FittedNormalizer
      path: ''
      startLine: 1616
    summary: "\nFitted Normalizer will be the standard normalizer for any 2D or 3D Gestures.  \n"
    example: []
    syntax:
      content:
        CSharp: 'public class FittedNormalizer : Normalizer'
        VB: >-
          Public Class FittedNormalizer

              Implements Normalizer
    inheritance:
    - System.Object
    implements:
    - Gestures.Normalizer
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.FittedNormalizer.#ctor
      commentId: M:Gestures.FittedNormalizer.#ctor
      language: CSharp
      name:
        CSharp: FittedNormalizer()
        VB: FittedNormalizer()
      nameWithType:
        CSharp: FittedNormalizer.FittedNormalizer()
        VB: FittedNormalizer.FittedNormalizer()
      qualifiedName:
        CSharp: Gestures.FittedNormalizer.FittedNormalizer()
        VB: Gestures.FittedNormalizer.FittedNormalizer()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 1621
      syntax:
        content:
          CSharp: public FittedNormalizer()
          VB: Public Sub New
      overload: Gestures.FittedNormalizer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.FittedNormalizer.#ctor(Vector3,Vector3,System.Boolean)
      commentId: M:Gestures.FittedNormalizer.#ctor(Vector3,Vector3,System.Boolean)
      language: CSharp
      name:
        CSharp: FittedNormalizer(Vector3, Vector3, Boolean)
        VB: FittedNormalizer(Vector3, Vector3, Boolean)
      nameWithType:
        CSharp: FittedNormalizer.FittedNormalizer(Vector3, Vector3, Boolean)
        VB: FittedNormalizer.FittedNormalizer(Vector3, Vector3, Boolean)
      qualifiedName:
        CSharp: Gestures.FittedNormalizer.FittedNormalizer(Vector3, Vector3, System.Boolean)
        VB: Gestures.FittedNormalizer.FittedNormalizer(Vector3, Vector3, System.Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 1629
      summary: "\nCreate a new Fitted Normalizer with specific bounds\n"
      example: []
      syntax:
        content:
          CSharp: public FittedNormalizer(Vector3 bottomLeft, Vector3 topRight, bool maintainAspectRatio = false)
          VB: Public Sub New(bottomLeft As Vector3, topRight As Vector3, maintainAspectRatio As Boolean = False)
        parameters:
        - id: bottomLeft
          type: Vector3
          description: Vector3 defining the bottomleft-most coordinate of the bounding box encompassing the Gesture
        - id: topRight
          type: Vector3
          description: Vector3 defining the topright-most coordinate of the bounding box encompassing the Gesture
        - id: maintainAspectRatio
          type: System.Boolean
          description: '`True` if the Gesture must be performed such that the aspect ratio of the drawn figure matches the aspect ratio of the Gesture definition. Most of the time, this should be `False`'
      overload: Gestures.FittedNormalizer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.FittedNormalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      commentId: M:Gestures.FittedNormalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      language: CSharp
      name:
        CSharp: Normalize(List<GTransform>)
        VB: Normalize(List(Of GTransform))
      nameWithType:
        CSharp: FittedNormalizer.Normalize(List<GTransform>)
        VB: FittedNormalizer.Normalize(List(Of GTransform))
      qualifiedName:
        CSharp: Gestures.FittedNormalizer.Normalize(System.Collections.Generic.List<Gestures.GTransform>)
        VB: Gestures.FittedNormalizer.Normalize(System.Collections.Generic.List(Of Gestures.GTransform))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: Normalize
        path: ''
        startLine: 1648
      syntax:
        content:
          CSharp: public List<GTransform> Normalize(List<GTransform> data)
          VB: Public Function Normalize(data As List(Of GTransform)) As List(Of GTransform)
        parameters:
        - id: data
          type: System.Collections.Generic.List{Gestures.GTransform}
        return:
          type: System.Collections.Generic.List{Gestures.GTransform}
      overload: Gestures.FittedNormalizer.Normalize*
      implements:
      - Gestures.Normalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Gestures.FittedNormalizer.MinMaxDelegate
    commentId: T:Gestures.FittedNormalizer.MinMaxDelegate
    language: CSharp
    name:
      CSharp: FittedNormalizer.MinMaxDelegate
      VB: FittedNormalizer.MinMaxDelegate
    nameWithType:
      CSharp: FittedNormalizer.MinMaxDelegate
      VB: FittedNormalizer.MinMaxDelegate
    qualifiedName:
      CSharp: Gestures.FittedNormalizer.MinMaxDelegate
      VB: Gestures.FittedNormalizer.MinMaxDelegate
    type: Delegate
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: MinMaxDelegate
      path: ''
      startLine: 1635
    syntax:
      content:
        CSharp: public delegate float MinMaxDelegate(float a, float b);
        VB: Public Delegate Function MinMaxDelegate(a As Single, b As Single) As Single
      parameters:
      - id: a
        type: System.Single
      - id: b
        type: System.Single
      return:
        type: System.Single
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: Gestures.LineNormalizer
    commentId: T:Gestures.LineNormalizer
    language: CSharp
    name:
      CSharp: LineNormalizer
      VB: LineNormalizer
    nameWithType:
      CSharp: LineNormalizer
      VB: LineNormalizer
    qualifiedName:
      CSharp: Gestures.LineNormalizer
      VB: Gestures.LineNormalizer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: LineNormalizer
      path: ''
      startLine: 1714
    summary: "\nA Normalizer that only works to normalize single line segments. \n"
    remarks: "\nThe class has little use outside of detecting horizontal and vertical lines\n"
    example: []
    syntax:
      content:
        CSharp: 'public class LineNormalizer : Normalizer'
        VB: >-
          Public Class LineNormalizer

              Implements Normalizer
    inheritance:
    - System.Object
    implements:
    - Gestures.Normalizer
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.LineNormalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      commentId: M:Gestures.LineNormalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      language: CSharp
      name:
        CSharp: Normalize(List<GTransform>)
        VB: Normalize(List(Of GTransform))
      nameWithType:
        CSharp: LineNormalizer.Normalize(List<GTransform>)
        VB: LineNormalizer.Normalize(List(Of GTransform))
      qualifiedName:
        CSharp: Gestures.LineNormalizer.Normalize(System.Collections.Generic.List<Gestures.GTransform>)
        VB: Gestures.LineNormalizer.Normalize(System.Collections.Generic.List(Of Gestures.GTransform))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: Normalize
        path: ''
        startLine: 1716
      syntax:
        content:
          CSharp: public List<GTransform> Normalize(List<GTransform> data)
          VB: Public Function Normalize(data As List(Of GTransform)) As List(Of GTransform)
        parameters:
        - id: data
          type: System.Collections.Generic.List{Gestures.GTransform}
        return:
          type: System.Collections.Generic.List{Gestures.GTransform}
      overload: Gestures.LineNormalizer.Normalize*
      implements:
      - Gestures.Normalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.LineNormalizer.Abs(Vector2)
      commentId: M:Gestures.LineNormalizer.Abs(Vector2)
      language: CSharp
      name:
        CSharp: Abs(Vector2)
        VB: Abs(Vector2)
      nameWithType:
        CSharp: LineNormalizer.Abs(Vector2)
        VB: LineNormalizer.Abs(Vector2)
      qualifiedName:
        CSharp: Gestures.LineNormalizer.Abs(Vector2)
        VB: Gestures.LineNormalizer.Abs(Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: Abs
        path: ''
        startLine: 1750
      syntax:
        content:
          CSharp: public Vector2 Abs(Vector2 v)
          VB: Public Function Abs(v As Vector2) As Vector2
        parameters:
        - id: v
          type: Vector2
        return:
          type: Vector2
      overload: Gestures.LineNormalizer.Abs*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Gestures.Normalizer
    commentId: T:Gestures.Normalizer
    language: CSharp
    name:
      CSharp: Normalizer
      VB: Normalizer
    nameWithType:
      CSharp: Normalizer
      VB: Normalizer
    qualifiedName:
      CSharp: Gestures.Normalizer
      VB: Gestures.Normalizer
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: Normalizer
      path: ''
      startLine: 1769
    summary: "\nMultipurpose interface for normalizing data into a form that can be more easily recognized by the gesture detection algorithm\n"
    example: []
    syntax:
      content:
        CSharp: public interface Normalizer
        VB: Public Interface Normalizer
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: Gestures.Normalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      commentId: M:Gestures.Normalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      language: CSharp
      name:
        CSharp: Normalize(List<GTransform>)
        VB: Normalize(List(Of GTransform))
      nameWithType:
        CSharp: Normalizer.Normalize(List<GTransform>)
        VB: Normalizer.Normalize(List(Of GTransform))
      qualifiedName:
        CSharp: Gestures.Normalizer.Normalize(System.Collections.Generic.List<Gestures.GTransform>)
        VB: Gestures.Normalizer.Normalize(System.Collections.Generic.List(Of Gestures.GTransform))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: Normalize
        path: ''
        startLine: 1775
      summary: "\nNormalize a set of points into a form that is easier for the system to interpret\n"
      example: []
      syntax:
        content:
          CSharp: List<GTransform> Normalize(List<GTransform> data)
          VB: Function Normalize(data As List(Of GTransform)) As List(Of GTransform)
        parameters:
        - id: data
          type: System.Collections.Generic.List{Gestures.GTransform}
          description: List of GTransform data to normalize
        return:
          type: System.Collections.Generic.List{Gestures.GTransform}
          description: List of normalized GTransforms
      overload: Gestures.Normalizer.Normalize*
      modifiers:
        CSharp: []
        VB: []
  - id: Gestures.ViewNormalizer
    commentId: T:Gestures.ViewNormalizer
    language: CSharp
    name:
      CSharp: ViewNormalizer
      VB: ViewNormalizer
    nameWithType:
      CSharp: ViewNormalizer
      VB: ViewNormalizer
    qualifiedName:
      CSharp: Gestures.ViewNormalizer
      VB: Gestures.ViewNormalizer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Gestures
    source:
      id: ViewNormalizer
      path: ''
      startLine: 1791
    summary: "\nNormalizer implementation that takes the raw world-space GTransform data and rotates it about the user&apos;s position.\n"
    remarks: "\nThe algorithm behind this class is not perfect yet. There are still problems with gestures that are too far above or below the user&apos;s eyeline\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ViewNormalizer : Normalizer'
        VB: >-
          Public Class ViewNormalizer

              Implements Normalizer
    inheritance:
    - System.Object
    implements:
    - Gestures.Normalizer
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Gestures.ViewNormalizer.#ctor(Transform)
      commentId: M:Gestures.ViewNormalizer.#ctor(Transform)
      language: CSharp
      name:
        CSharp: ViewNormalizer(Transform)
        VB: ViewNormalizer(Transform)
      nameWithType:
        CSharp: ViewNormalizer.ViewNormalizer(Transform)
        VB: ViewNormalizer.ViewNormalizer(Transform)
      qualifiedName:
        CSharp: Gestures.ViewNormalizer.ViewNormalizer(Transform)
        VB: Gestures.ViewNormalizer.ViewNormalizer(Transform)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: .ctor
        path: ''
        startLine: 1800
      syntax:
        content:
          CSharp: public ViewNormalizer(Transform userTransform)
          VB: Public Sub New(userTransform As Transform)
        parameters:
        - id: userTransform
          type: Transform
      overload: Gestures.ViewNormalizer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Gestures.ViewNormalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      commentId: M:Gestures.ViewNormalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      language: CSharp
      name:
        CSharp: Normalize(List<GTransform>)
        VB: Normalize(List(Of GTransform))
      nameWithType:
        CSharp: ViewNormalizer.Normalize(List<GTransform>)
        VB: ViewNormalizer.Normalize(List(Of GTransform))
      qualifiedName:
        CSharp: Gestures.ViewNormalizer.Normalize(System.Collections.Generic.List<Gestures.GTransform>)
        VB: Gestures.ViewNormalizer.Normalize(System.Collections.Generic.List(Of Gestures.GTransform))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Gestures
      source:
        id: Normalize
        path: ''
        startLine: 1804
      syntax:
        content:
          CSharp: public List<GTransform> Normalize(List<GTransform> data)
          VB: Public Function Normalize(data As List(Of GTransform)) As List(Of GTransform)
        parameters:
        - id: data
          type: System.Collections.Generic.List{Gestures.GTransform}
        return:
          type: System.Collections.Generic.List{Gestures.GTransform}
      overload: Gestures.ViewNormalizer.Normalize*
      implements:
      - Gestures.Normalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: UI
  commentId: N:UI
  language: CSharp
  name:
    CSharp: UI
    VB: UI
  nameWithType:
    CSharp: UI
    VB: UI
  qualifiedName:
    CSharp: UI
    VB: UI
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: UI.NewButtonScript
    commentId: T:UI.NewButtonScript
    language: CSharp
    name:
      CSharp: NewButtonScript
      VB: NewButtonScript
    nameWithType:
      CSharp: NewButtonScript
      VB: NewButtonScript
    qualifiedName:
      CSharp: UI.NewButtonScript
      VB: UI.NewButtonScript
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: NewButtonScript
      path: ''
      startLine: 1891
    syntax:
      content:
        CSharp: 'public class NewButtonScript : MonoBehaviour'
        VB: >-
          Public Class NewButtonScript

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.NewButtonScript.gradient
      commentId: F:UI.NewButtonScript.gradient
      language: CSharp
      name:
        CSharp: gradient
        VB: gradient
      nameWithType:
        CSharp: NewButtonScript.gradient
        VB: NewButtonScript.gradient
      qualifiedName:
        CSharp: UI.NewButtonScript.gradient
        VB: UI.NewButtonScript.gradient
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: gradient
        path: ''
        startLine: 1911
      summary: "\nThe gradient for color changing\n"
      example: []
      syntax:
        content:
          CSharp: public Gradient gradient
          VB: Public gradient As Gradient
        return:
          type: Gradient
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.useGradient
      commentId: F:UI.NewButtonScript.useGradient
      language: CSharp
      name:
        CSharp: useGradient
        VB: useGradient
      nameWithType:
        CSharp: NewButtonScript.useGradient
        VB: NewButtonScript.useGradient
      qualifiedName:
        CSharp: UI.NewButtonScript.useGradient
        VB: UI.NewButtonScript.useGradient
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: useGradient
        path: ''
        startLine: 1916
      summary: "\nWeather we use the gradient or instant transition\n"
      example: []
      syntax:
        content:
          CSharp: public bool useGradient
          VB: Public useGradient As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.startColor
      commentId: F:UI.NewButtonScript.startColor
      language: CSharp
      name:
        CSharp: startColor
        VB: startColor
      nameWithType:
        CSharp: NewButtonScript.startColor
        VB: NewButtonScript.startColor
      qualifiedName:
        CSharp: UI.NewButtonScript.startColor
        VB: UI.NewButtonScript.startColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: startColor
        path: ''
        startLine: 1921
      summary: "\nThe start color in instant transitions\n"
      example: []
      syntax:
        content:
          CSharp: public Color startColor
          VB: Public startColor As Color
        return:
          type: Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.endColor
      commentId: F:UI.NewButtonScript.endColor
      language: CSharp
      name:
        CSharp: endColor
        VB: endColor
      nameWithType:
        CSharp: NewButtonScript.endColor
        VB: NewButtonScript.endColor
      qualifiedName:
        CSharp: UI.NewButtonScript.endColor
        VB: UI.NewButtonScript.endColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: endColor
        path: ''
        startLine: 1926
      summary: "\nThe end color in instant transitions\n"
      example: []
      syntax:
        content:
          CSharp: public Color endColor
          VB: Public endColor As Color
        return:
          type: Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.ItemFade
      commentId: F:UI.NewButtonScript.ItemFade
      language: CSharp
      name:
        CSharp: ItemFade
        VB: ItemFade
      nameWithType:
        CSharp: NewButtonScript.ItemFade
        VB: NewButtonScript.ItemFade
      qualifiedName:
        CSharp: UI.NewButtonScript.ItemFade
        VB: UI.NewButtonScript.ItemFade
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: ItemFade
        path: ''
        startLine: 1932
      summary: "\nThe time it takes to get the hovered item to do a fade transition\nset to 0 for instant transitions\n"
      example: []
      syntax:
        content:
          CSharp: public float ItemFade
          VB: Public ItemFade As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.delay
      commentId: F:UI.NewButtonScript.delay
      language: CSharp
      name:
        CSharp: delay
        VB: delay
      nameWithType:
        CSharp: NewButtonScript.delay
        VB: NewButtonScript.delay
      qualifiedName:
        CSharp: UI.NewButtonScript.delay
        VB: UI.NewButtonScript.delay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: delay
        path: ''
        startLine: 1938
      summary: "\nThe delay after which inputs are considered legitmate to reduce input spamming\nmust be negative float in seconds\n"
      example: []
      syntax:
        content:
          CSharp: public float delay
          VB: Public delay As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.onEnterUseForHover
      commentId: F:UI.NewButtonScript.onEnterUseForHover
      language: CSharp
      name:
        CSharp: onEnterUseForHover
        VB: onEnterUseForHover
      nameWithType:
        CSharp: NewButtonScript.onEnterUseForHover
        VB: NewButtonScript.onEnterUseForHover
      qualifiedName:
        CSharp: UI.NewButtonScript.onEnterUseForHover
        VB: UI.NewButtonScript.onEnterUseForHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onEnterUseForHover
        path: ''
        startLine: 1948
      summary: "\nIf we use onEnter for the hovering layer\n"
      example: []
      syntax:
        content:
          CSharp: public bool onEnterUseForHover
          VB: Public onEnterUseForHover As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.onEnterUseForActivation
      commentId: F:UI.NewButtonScript.onEnterUseForActivation
      language: CSharp
      name:
        CSharp: onEnterUseForActivation
        VB: onEnterUseForActivation
      nameWithType:
        CSharp: NewButtonScript.onEnterUseForActivation
        VB: NewButtonScript.onEnterUseForActivation
      qualifiedName:
        CSharp: UI.NewButtonScript.onEnterUseForActivation
        VB: UI.NewButtonScript.onEnterUseForActivation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onEnterUseForActivation
        path: ''
        startLine: 1953
      summary: "\nIf we use onEnter for the hovering layer\n"
      example: []
      syntax:
        content:
          CSharp: public bool onEnterUseForActivation
          VB: Public onEnterUseForActivation As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.onEnter
      commentId: F:UI.NewButtonScript.onEnter
      language: CSharp
      name:
        CSharp: onEnter
        VB: onEnter
      nameWithType:
        CSharp: NewButtonScript.onEnter
        VB: NewButtonScript.onEnter
      qualifiedName:
        CSharp: UI.NewButtonScript.onEnter
        VB: UI.NewButtonScript.onEnter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onEnter
        path: ''
        startLine: 1954
      syntax:
        content:
          CSharp: public UnityEvent onEnter
          VB: Public onEnter As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.onStayUseForHover
      commentId: F:UI.NewButtonScript.onStayUseForHover
      language: CSharp
      name:
        CSharp: onStayUseForHover
        VB: onStayUseForHover
      nameWithType:
        CSharp: NewButtonScript.onStayUseForHover
        VB: NewButtonScript.onStayUseForHover
      qualifiedName:
        CSharp: UI.NewButtonScript.onStayUseForHover
        VB: UI.NewButtonScript.onStayUseForHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onStayUseForHover
        path: ''
        startLine: 1960
      summary: "\nIf we use onStay for the hovering layer\n"
      example: []
      syntax:
        content:
          CSharp: public bool onStayUseForHover
          VB: Public onStayUseForHover As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.onStayUseForActivation
      commentId: F:UI.NewButtonScript.onStayUseForActivation
      language: CSharp
      name:
        CSharp: onStayUseForActivation
        VB: onStayUseForActivation
      nameWithType:
        CSharp: NewButtonScript.onStayUseForActivation
        VB: NewButtonScript.onStayUseForActivation
      qualifiedName:
        CSharp: UI.NewButtonScript.onStayUseForActivation
        VB: UI.NewButtonScript.onStayUseForActivation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onStayUseForActivation
        path: ''
        startLine: 1965
      summary: "\nIf we use onStay for the activating layer\n"
      example: []
      syntax:
        content:
          CSharp: public bool onStayUseForActivation
          VB: Public onStayUseForActivation As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.onHover
      commentId: F:UI.NewButtonScript.onHover
      language: CSharp
      name:
        CSharp: onHover
        VB: onHover
      nameWithType:
        CSharp: NewButtonScript.onHover
        VB: NewButtonScript.onHover
      qualifiedName:
        CSharp: UI.NewButtonScript.onHover
        VB: UI.NewButtonScript.onHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onHover
        path: ''
        startLine: 1966
      syntax:
        content:
          CSharp: public UnityEvent onHover
          VB: Public onHover As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.onExitUseForHover
      commentId: F:UI.NewButtonScript.onExitUseForHover
      language: CSharp
      name:
        CSharp: onExitUseForHover
        VB: onExitUseForHover
      nameWithType:
        CSharp: NewButtonScript.onExitUseForHover
        VB: NewButtonScript.onExitUseForHover
      qualifiedName:
        CSharp: UI.NewButtonScript.onExitUseForHover
        VB: UI.NewButtonScript.onExitUseForHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onExitUseForHover
        path: ''
        startLine: 1972
      summary: "\nIf we use onExit for the hovering layer\n"
      example: []
      syntax:
        content:
          CSharp: public bool onExitUseForHover
          VB: Public onExitUseForHover As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.onExitUseForActivation
      commentId: F:UI.NewButtonScript.onExitUseForActivation
      language: CSharp
      name:
        CSharp: onExitUseForActivation
        VB: onExitUseForActivation
      nameWithType:
        CSharp: NewButtonScript.onExitUseForActivation
        VB: NewButtonScript.onExitUseForActivation
      qualifiedName:
        CSharp: UI.NewButtonScript.onExitUseForActivation
        VB: UI.NewButtonScript.onExitUseForActivation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onExitUseForActivation
        path: ''
        startLine: 1977
      summary: "\nIf we use onExit for the activating layer\n"
      example: []
      syntax:
        content:
          CSharp: public bool onExitUseForActivation
          VB: Public onExitUseForActivation As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.onExit
      commentId: F:UI.NewButtonScript.onExit
      language: CSharp
      name:
        CSharp: onExit
        VB: onExit
      nameWithType:
        CSharp: NewButtonScript.onExit
        VB: NewButtonScript.onExit
      qualifiedName:
        CSharp: UI.NewButtonScript.onExit
        VB: UI.NewButtonScript.onExit
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onExit
        path: ''
        startLine: 1978
      syntax:
        content:
          CSharp: public UnityEvent onExit
          VB: Public onExit As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.onPress
      commentId: F:UI.NewButtonScript.onPress
      language: CSharp
      name:
        CSharp: onPress
        VB: onPress
      nameWithType:
        CSharp: NewButtonScript.onPress
        VB: NewButtonScript.onPress
      qualifiedName:
        CSharp: UI.NewButtonScript.onPress
        VB: UI.NewButtonScript.onPress
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onPress
        path: ''
        startLine: 1980
      syntax:
        content:
          CSharp: public UnityEvent onPress
          VB: Public onPress As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.detectOnEnter
      commentId: F:UI.NewButtonScript.detectOnEnter
      language: CSharp
      name:
        CSharp: detectOnEnter
        VB: detectOnEnter
      nameWithType:
        CSharp: NewButtonScript.detectOnEnter
        VB: NewButtonScript.detectOnEnter
      qualifiedName:
        CSharp: UI.NewButtonScript.detectOnEnter
        VB: UI.NewButtonScript.detectOnEnter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: detectOnEnter
        path: ''
        startLine: 1986
      summary: "\ndetermines if we detect onEnter events\n"
      example: []
      syntax:
        content:
          CSharp: public bool detectOnEnter
          VB: Public detectOnEnter As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.detectOnHover
      commentId: F:UI.NewButtonScript.detectOnHover
      language: CSharp
      name:
        CSharp: detectOnHover
        VB: detectOnHover
      nameWithType:
        CSharp: NewButtonScript.detectOnHover
        VB: NewButtonScript.detectOnHover
      qualifiedName:
        CSharp: UI.NewButtonScript.detectOnHover
        VB: UI.NewButtonScript.detectOnHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: detectOnHover
        path: ''
        startLine: 1991
      summary: "\ndetermines if we detect onHover events\n"
      example: []
      syntax:
        content:
          CSharp: public bool detectOnHover
          VB: Public detectOnHover As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.detectOnExit
      commentId: F:UI.NewButtonScript.detectOnExit
      language: CSharp
      name:
        CSharp: detectOnExit
        VB: detectOnExit
      nameWithType:
        CSharp: NewButtonScript.detectOnExit
        VB: NewButtonScript.detectOnExit
      qualifiedName:
        CSharp: UI.NewButtonScript.detectOnExit
        VB: UI.NewButtonScript.detectOnExit
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: detectOnExit
        path: ''
        startLine: 1996
      summary: "\ndetermines if we detect onExit events\n"
      example: []
      syntax:
        content:
          CSharp: public bool detectOnExit
          VB: Public detectOnExit As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.hoverLayer
      commentId: F:UI.NewButtonScript.hoverLayer
      language: CSharp
      name:
        CSharp: hoverLayer
        VB: hoverLayer
      nameWithType:
        CSharp: NewButtonScript.hoverLayer
        VB: NewButtonScript.hoverLayer
      qualifiedName:
        CSharp: UI.NewButtonScript.hoverLayer
        VB: UI.NewButtonScript.hoverLayer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: hoverLayer
        path: ''
        startLine: 2001
      summary: "\nThe layer that object are in to be considered hovering\n"
      example: []
      syntax:
        content:
          CSharp: public LayerMask hoverLayer
          VB: Public hoverLayer As LayerMask
        return:
          type: LayerMask
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.activationLayer
      commentId: F:UI.NewButtonScript.activationLayer
      language: CSharp
      name:
        CSharp: activationLayer
        VB: activationLayer
      nameWithType:
        CSharp: NewButtonScript.activationLayer
        VB: NewButtonScript.activationLayer
      qualifiedName:
        CSharp: UI.NewButtonScript.activationLayer
        VB: UI.NewButtonScript.activationLayer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: activationLayer
        path: ''
        startLine: 2006
      summary: "\nThe layer that object are in to be considered activating\n"
      example: []
      syntax:
        content:
          CSharp: public LayerMask activationLayer
          VB: Public activationLayer As LayerMask
        return:
          type: LayerMask
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.hovered
      commentId: F:UI.NewButtonScript.hovered
      language: CSharp
      name:
        CSharp: hovered
        VB: hovered
      nameWithType:
        CSharp: NewButtonScript.hovered
        VB: NewButtonScript.hovered
      qualifiedName:
        CSharp: UI.NewButtonScript.hovered
        VB: UI.NewButtonScript.hovered
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: hovered
        path: ''
        startLine: 2012
      summary: "\nDetermines if the button is being hovered\n"
      example: []
      syntax:
        content:
          CSharp: public bool hovered
          VB: Public hovered As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.pressed
      commentId: F:UI.NewButtonScript.pressed
      language: CSharp
      name:
        CSharp: pressed
        VB: pressed
      nameWithType:
        CSharp: NewButtonScript.pressed
        VB: NewButtonScript.pressed
      qualifiedName:
        CSharp: UI.NewButtonScript.pressed
        VB: UI.NewButtonScript.pressed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: pressed
        path: ''
        startLine: 2017
      summary: "\nDetermines if the button has been pressed\n"
      example: []
      syntax:
        content:
          CSharp: public bool pressed
          VB: Public pressed As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.disabled
      commentId: F:UI.NewButtonScript.disabled
      language: CSharp
      name:
        CSharp: disabled
        VB: disabled
      nameWithType:
        CSharp: NewButtonScript.disabled
        VB: NewButtonScript.disabled
      qualifiedName:
        CSharp: UI.NewButtonScript.disabled
        VB: UI.NewButtonScript.disabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: disabled
        path: ''
        startLine: 2022
      summary: "\nDetermines if the button has been disabled\n"
      example: []
      syntax:
        content:
          CSharp: public bool disabled
          VB: Public disabled As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.extras
      commentId: F:UI.NewButtonScript.extras
      language: CSharp
      name:
        CSharp: extras
        VB: extras
      nameWithType:
        CSharp: NewButtonScript.extras
        VB: NewButtonScript.extras
      qualifiedName:
        CSharp: UI.NewButtonScript.extras
        VB: UI.NewButtonScript.extras
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: extras
        path: ''
        startLine: 2027
      summary: "\nThe normal item that are added to the button when it is not in any other state\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject extras
          VB: Public extras As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.extrasHovered
      commentId: F:UI.NewButtonScript.extrasHovered
      language: CSharp
      name:
        CSharp: extrasHovered
        VB: extrasHovered
      nameWithType:
        CSharp: NewButtonScript.extrasHovered
        VB: NewButtonScript.extrasHovered
      qualifiedName:
        CSharp: UI.NewButtonScript.extrasHovered
        VB: UI.NewButtonScript.extrasHovered
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: extrasHovered
        path: ''
        startLine: 2032
      summary: "\nThe normal item that are added to the button when it is hovered\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject extrasHovered
          VB: Public extrasHovered As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.extrasPressed
      commentId: F:UI.NewButtonScript.extrasPressed
      language: CSharp
      name:
        CSharp: extrasPressed
        VB: extrasPressed
      nameWithType:
        CSharp: NewButtonScript.extrasPressed
        VB: NewButtonScript.extrasPressed
      qualifiedName:
        CSharp: UI.NewButtonScript.extrasPressed
        VB: UI.NewButtonScript.extrasPressed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: extrasPressed
        path: ''
        startLine: 2037
      summary: "\nThe normal item that are added to the button when it is pressed\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject extrasPressed
          VB: Public extrasPressed As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.extrasDisabled
      commentId: F:UI.NewButtonScript.extrasDisabled
      language: CSharp
      name:
        CSharp: extrasDisabled
        VB: extrasDisabled
      nameWithType:
        CSharp: NewButtonScript.extrasDisabled
        VB: NewButtonScript.extrasDisabled
      qualifiedName:
        CSharp: UI.NewButtonScript.extrasDisabled
        VB: UI.NewButtonScript.extrasDisabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: extrasDisabled
        path: ''
        startLine: 2042
      summary: "\nThe normal item that are added to the button when it is disabled\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject extrasDisabled
          VB: Public extrasDisabled As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.setEnabled(System.Boolean)
      commentId: M:UI.NewButtonScript.setEnabled(System.Boolean)
      language: CSharp
      name:
        CSharp: setEnabled(Boolean)
        VB: setEnabled(Boolean)
      nameWithType:
        CSharp: NewButtonScript.setEnabled(Boolean)
        VB: NewButtonScript.setEnabled(Boolean)
      qualifiedName:
        CSharp: UI.NewButtonScript.setEnabled(System.Boolean)
        VB: UI.NewButtonScript.setEnabled(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: setEnabled
        path: ''
        startLine: 2269
      summary: "\nEnables the object\n"
      example: []
      syntax:
        content:
          CSharp: public void setEnabled(bool value)
          VB: Public Sub setEnabled(value As Boolean)
        parameters:
        - id: value
          type: System.Boolean
          description: boolean of enabled or not
      overload: UI.NewButtonScript.setEnabled*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.setHovered(System.Boolean)
      commentId: M:UI.NewButtonScript.setHovered(System.Boolean)
      language: CSharp
      name:
        CSharp: setHovered(Boolean)
        VB: setHovered(Boolean)
      nameWithType:
        CSharp: NewButtonScript.setHovered(Boolean)
        VB: NewButtonScript.setHovered(Boolean)
      qualifiedName:
        CSharp: UI.NewButtonScript.setHovered(System.Boolean)
        VB: UI.NewButtonScript.setHovered(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: setHovered
        path: ''
        startLine: 2351
      summary: "\nSet weather the item is hovered\n"
      example: []
      syntax:
        content:
          CSharp: public void setHovered(bool state)
          VB: Public Sub setHovered(state As Boolean)
        parameters:
        - id: state
          type: System.Boolean
          description: weather the item is hovered
      overload: UI.NewButtonScript.setHovered*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.setPressed(System.Boolean)
      commentId: M:UI.NewButtonScript.setPressed(System.Boolean)
      language: CSharp
      name:
        CSharp: setPressed(Boolean)
        VB: setPressed(Boolean)
      nameWithType:
        CSharp: NewButtonScript.setPressed(Boolean)
        VB: NewButtonScript.setPressed(Boolean)
      qualifiedName:
        CSharp: UI.NewButtonScript.setPressed(System.Boolean)
        VB: UI.NewButtonScript.setPressed(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: setPressed
        path: ''
        startLine: 2360
      summary: "\nSet weather the item is pressed\n"
      example: []
      syntax:
        content:
          CSharp: public void setPressed(bool state)
          VB: Public Sub setPressed(state As Boolean)
        parameters:
        - id: state
          type: System.Boolean
          description: weather the item is pressed
      overload: UI.NewButtonScript.setPressed*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.setDisabled(System.Boolean)
      commentId: M:UI.NewButtonScript.setDisabled(System.Boolean)
      language: CSharp
      name:
        CSharp: setDisabled(Boolean)
        VB: setDisabled(Boolean)
      nameWithType:
        CSharp: NewButtonScript.setDisabled(Boolean)
        VB: NewButtonScript.setDisabled(Boolean)
      qualifiedName:
        CSharp: UI.NewButtonScript.setDisabled(System.Boolean)
        VB: UI.NewButtonScript.setDisabled(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: setDisabled
        path: ''
        startLine: 2369
      summary: "\nset weather the item is disabled\n"
      example: []
      syntax:
        content:
          CSharp: public void setDisabled(bool state)
          VB: Public Sub setDisabled(state As Boolean)
        parameters:
        - id: state
          type: System.Boolean
          description: weather the item is disabled
      overload: UI.NewButtonScript.setDisabled*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.setHoveringlayer(LayerMask)
      commentId: M:UI.NewButtonScript.setHoveringlayer(LayerMask)
      language: CSharp
      name:
        CSharp: setHoveringlayer(LayerMask)
        VB: setHoveringlayer(LayerMask)
      nameWithType:
        CSharp: NewButtonScript.setHoveringlayer(LayerMask)
        VB: NewButtonScript.setHoveringlayer(LayerMask)
      qualifiedName:
        CSharp: UI.NewButtonScript.setHoveringlayer(LayerMask)
        VB: UI.NewButtonScript.setHoveringlayer(LayerMask)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: setHoveringlayer
        path: ''
        startLine: 2378
      summary: "\nSet the hovering layer for the button\n"
      example: []
      syntax:
        content:
          CSharp: public void setHoveringlayer(LayerMask hovering)
          VB: Public Sub setHoveringlayer(hovering As LayerMask)
        parameters:
        - id: hovering
          type: LayerMask
          description: The layermask that is used for hovering
      overload: UI.NewButtonScript.setHoveringlayer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.NewButtonScript.setActivatinglayer(LayerMask)
      commentId: M:UI.NewButtonScript.setActivatinglayer(LayerMask)
      language: CSharp
      name:
        CSharp: setActivatinglayer(LayerMask)
        VB: setActivatinglayer(LayerMask)
      nameWithType:
        CSharp: NewButtonScript.setActivatinglayer(LayerMask)
        VB: NewButtonScript.setActivatinglayer(LayerMask)
      qualifiedName:
        CSharp: UI.NewButtonScript.setActivatinglayer(LayerMask)
        VB: UI.NewButtonScript.setActivatinglayer(LayerMask)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: setActivatinglayer
        path: ''
        startLine: 2386
      summary: "\nSet the activating layer for the button\n"
      example: []
      syntax:
        content:
          CSharp: public void setActivatinglayer(LayerMask activating)
          VB: Public Sub setActivatinglayer(activating As LayerMask)
        parameters:
        - id: activating
          type: LayerMask
          description: The layermask that is used for activating
      overload: UI.NewButtonScript.setActivatinglayer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.DropDownControl
    commentId: T:UI.DropDownControl
    language: CSharp
    name:
      CSharp: DropDownControl
      VB: DropDownControl
    nameWithType:
      CSharp: DropDownControl
      VB: DropDownControl
    qualifiedName:
      CSharp: UI.DropDownControl
      VB: UI.DropDownControl
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: DropDownControl
      path: ''
      startLine: 2408
    syntax:
      content:
        CSharp: 'public class DropDownControl : MonoBehaviour'
        VB: >-
          Public Class DropDownControl

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.DropDownControl.interactable
      commentId: F:UI.DropDownControl.interactable
      language: CSharp
      name:
        CSharp: interactable
        VB: interactable
      nameWithType:
        CSharp: DropDownControl.interactable
        VB: DropDownControl.interactable
      qualifiedName:
        CSharp: UI.DropDownControl.interactable
        VB: UI.DropDownControl.interactable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: interactable
        path: ''
        startLine: 2446
      summary: "\nthis is the bool used to determine if the item is interactable\n"
      example: []
      syntax:
        content:
          CSharp: public bool interactable
          VB: Public interactable As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.hovering
      commentId: F:UI.DropDownControl.hovering
      language: CSharp
      name:
        CSharp: hovering
        VB: hovering
      nameWithType:
        CSharp: DropDownControl.hovering
        VB: DropDownControl.hovering
      qualifiedName:
        CSharp: UI.DropDownControl.hovering
        VB: UI.DropDownControl.hovering
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: hovering
        path: ''
        startLine: 2451
      summary: "\nThis is the layer mask that will be used to determine if the buttons are being hovered on\n"
      example: []
      syntax:
        content:
          CSharp: public LayerMask hovering
          VB: Public hovering As LayerMask
        return:
          type: LayerMask
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.activating
      commentId: F:UI.DropDownControl.activating
      language: CSharp
      name:
        CSharp: activating
        VB: activating
      nameWithType:
        CSharp: DropDownControl.activating
        VB: DropDownControl.activating
      qualifiedName:
        CSharp: UI.DropDownControl.activating
        VB: UI.DropDownControl.activating
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: activating
        path: ''
        startLine: 2456
      summary: "\nThis is the layer mask that will be used to determine if the buttons are being activated\n"
      example: []
      syntax:
        content:
          CSharp: public LayerMask activating
          VB: Public activating As LayerMask
        return:
          type: LayerMask
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.interactable_
      commentId: P:UI.DropDownControl.interactable_
      language: CSharp
      name:
        CSharp: interactable_
        VB: interactable_
      nameWithType:
        CSharp: DropDownControl.interactable_
        VB: DropDownControl.interactable_
      qualifiedName:
        CSharp: UI.DropDownControl.interactable_
        VB: UI.DropDownControl.interactable_
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: interactable_
        path: ''
        startLine: 2466
      summary: "\nWeather the dropdown is interactable, sets all items to off, but will not set all items to on if they were off before\n"
      example: []
      syntax:
        content:
          CSharp: public bool interactable_ { get; set; }
          VB: Public Property interactable_ As Boolean
        parameters: []
        return:
          type: System.Boolean
          description: "\nThe boolean that represents the state of the system\n"
      overload: UI.DropDownControl.interactable_*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: UI.DropDownControl.template
      commentId: F:UI.DropDownControl.template
      language: CSharp
      name:
        CSharp: template
        VB: template
      nameWithType:
        CSharp: DropDownControl.template
        VB: DropDownControl.template
      qualifiedName:
        CSharp: UI.DropDownControl.template
        VB: UI.DropDownControl.template
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: template
        path: ''
        startLine: 2496
      summary: "\nThe sub item that will be created in the dropdown\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject template
          VB: Public template As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.changeInHeight
      commentId: F:UI.DropDownControl.changeInHeight
      language: CSharp
      name:
        CSharp: changeInHeight
        VB: changeInHeight
      nameWithType:
        CSharp: DropDownControl.changeInHeight
        VB: DropDownControl.changeInHeight
      qualifiedName:
        CSharp: UI.DropDownControl.changeInHeight
        VB: UI.DropDownControl.changeInHeight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: changeInHeight
        path: ''
        startLine: 2502
      summary: "\nThe difference in the heights of the item when drawn\n"
      example: []
      syntax:
        content:
          CSharp: public float changeInHeight
          VB: Public changeInHeight As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.firstOffset
      commentId: F:UI.DropDownControl.firstOffset
      language: CSharp
      name:
        CSharp: firstOffset
        VB: firstOffset
      nameWithType:
        CSharp: DropDownControl.firstOffset
        VB: DropDownControl.firstOffset
      qualifiedName:
        CSharp: UI.DropDownControl.firstOffset
        VB: UI.DropDownControl.firstOffset
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: firstOffset
        path: ''
        startLine: 2508
      summary: "\nThe distance from base item and the first item of the dropdown\n"
      example: []
      syntax:
        content:
          CSharp: public float firstOffset
          VB: Public firstOffset As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.boundingBox
      commentId: F:UI.DropDownControl.boundingBox
      language: CSharp
      name:
        CSharp: boundingBox
        VB: boundingBox
      nameWithType:
        CSharp: DropDownControl.boundingBox
        VB: DropDownControl.boundingBox
      qualifiedName:
        CSharp: UI.DropDownControl.boundingBox
        VB: UI.DropDownControl.boundingBox
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: boundingBox
        path: ''
        startLine: 2514
      summary: "\nThe item that will surround all the items in the dropdown\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject boundingBox
          VB: Public boundingBox As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.defaultString
      commentId: F:UI.DropDownControl.defaultString
      language: CSharp
      name:
        CSharp: defaultString
        VB: defaultString
      nameWithType:
        CSharp: DropDownControl.defaultString
        VB: DropDownControl.defaultString
      qualifiedName:
        CSharp: UI.DropDownControl.defaultString
        VB: UI.DropDownControl.defaultString
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: defaultString
        path: ''
        startLine: 2520
      summary: "\nThe option that is selected if there is no input\n"
      example: []
      syntax:
        content:
          CSharp: public string defaultString
          VB: Public defaultString As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.defaultnumber
      commentId: F:UI.DropDownControl.defaultnumber
      language: CSharp
      name:
        CSharp: defaultnumber
        VB: defaultnumber
      nameWithType:
        CSharp: DropDownControl.defaultnumber
        VB: DropDownControl.defaultnumber
      qualifiedName:
        CSharp: UI.DropDownControl.defaultnumber
        VB: UI.DropDownControl.defaultnumber
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: defaultnumber
        path: ''
        startLine: 2527
      summary: "\nWhere in the list the item will appear in the drop down. If it will not appear in the dropdown, set to -1\n"
      example: []
      syntax:
        content:
          CSharp: public int defaultnumber
          VB: Public defaultnumber As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.maxOptionsShown
      commentId: F:UI.DropDownControl.maxOptionsShown
      language: CSharp
      name:
        CSharp: maxOptionsShown
        VB: maxOptionsShown
      nameWithType:
        CSharp: DropDownControl.maxOptionsShown
        VB: DropDownControl.maxOptionsShown
      qualifiedName:
        CSharp: UI.DropDownControl.maxOptionsShown
        VB: UI.DropDownControl.maxOptionsShown
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: maxOptionsShown
        path: ''
        startLine: 2533
      summary: "\nHow many options you can display\n"
      example: []
      syntax:
        content:
          CSharp: public int maxOptionsShown
          VB: Public maxOptionsShown As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.oldSlider
      commentId: F:UI.DropDownControl.oldSlider
      language: CSharp
      name:
        CSharp: oldSlider
        VB: oldSlider
      nameWithType:
        CSharp: DropDownControl.oldSlider
        VB: DropDownControl.oldSlider
      qualifiedName:
        CSharp: UI.DropDownControl.oldSlider
        VB: UI.DropDownControl.oldSlider
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: oldSlider
        path: ''
        startLine: 2540
      summary: "\nLegacy code for implementing slider, may see the light of day pending slider support.\nCurrently uses a normal Unity slider, but this would require a legitimate VR slider to be of use.\n"
      example: []
      syntax:
        content:
          CSharp: public Slider oldSlider
          VB: Public oldSlider As Slider
        return:
          type: Slider
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.hangpercentage
      commentId: F:UI.DropDownControl.hangpercentage
      language: CSharp
      name:
        CSharp: hangpercentage
        VB: hangpercentage
      nameWithType:
        CSharp: DropDownControl.hangpercentage
        VB: DropDownControl.hangpercentage
      qualifiedName:
        CSharp: UI.DropDownControl.hangpercentage
        VB: UI.DropDownControl.hangpercentage
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: hangpercentage
        path: ''
        startLine: 2545
      summary: "\nAffects when an item will be faded out in the slider implementation\n"
      example: []
      syntax:
        content:
          CSharp: public float hangpercentage
          VB: Public hangpercentage As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.DropDownBoxGradient
      commentId: F:UI.DropDownControl.DropDownBoxGradient
      language: CSharp
      name:
        CSharp: DropDownBoxGradient
        VB: DropDownBoxGradient
      nameWithType:
        CSharp: DropDownControl.DropDownBoxGradient
        VB: DropDownControl.DropDownBoxGradient
      qualifiedName:
        CSharp: UI.DropDownControl.DropDownBoxGradient
        VB: UI.DropDownControl.DropDownBoxGradient
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: DropDownBoxGradient
        path: ''
        startLine: 2551
      summary: "\nWill the dropdown box use gradient or switch implementation\n"
      example: []
      syntax:
        content:
          CSharp: public bool DropDownBoxGradient
          VB: Public DropDownBoxGradient As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.boxGradient
      commentId: F:UI.DropDownControl.boxGradient
      language: CSharp
      name:
        CSharp: boxGradient
        VB: boxGradient
      nameWithType:
        CSharp: DropDownControl.boxGradient
        VB: DropDownControl.boxGradient
      qualifiedName:
        CSharp: UI.DropDownControl.boxGradient
        VB: UI.DropDownControl.boxGradient
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: boxGradient
        path: ''
        startLine: 2557
      summary: "\nWill the dropdown box use gradient or switch implementation\n"
      example: []
      syntax:
        content:
          CSharp: public Gradient boxGradient
          VB: Public boxGradient As Gradient
        return:
          type: Gradient
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.BoxFade
      commentId: F:UI.DropDownControl.BoxFade
      language: CSharp
      name:
        CSharp: BoxFade
        VB: BoxFade
      nameWithType:
        CSharp: DropDownControl.BoxFade
        VB: DropDownControl.BoxFade
      qualifiedName:
        CSharp: UI.DropDownControl.BoxFade
        VB: UI.DropDownControl.BoxFade
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: BoxFade
        path: ''
        startLine: 2563
      summary: "\nWill the dropdown box use gradient or switch implementation\n"
      example: []
      syntax:
        content:
          CSharp: public float BoxFade
          VB: Public BoxFade As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.delay
      commentId: F:UI.DropDownControl.delay
      language: CSharp
      name:
        CSharp: delay
        VB: delay
      nameWithType:
        CSharp: DropDownControl.delay
        VB: DropDownControl.delay
      qualifiedName:
        CSharp: UI.DropDownControl.delay
        VB: UI.DropDownControl.delay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: delay
        path: ''
        startLine: 2569
      summary: "\nWill the dropdown box use gradient or switch implementation\n"
      example: []
      syntax:
        content:
          CSharp: public float delay
          VB: Public delay As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.DropDownItemGradient
      commentId: F:UI.DropDownControl.DropDownItemGradient
      language: CSharp
      name:
        CSharp: DropDownItemGradient
        VB: DropDownItemGradient
      nameWithType:
        CSharp: DropDownControl.DropDownItemGradient
        VB: DropDownControl.DropDownItemGradient
      qualifiedName:
        CSharp: UI.DropDownControl.DropDownItemGradient
        VB: UI.DropDownControl.DropDownItemGradient
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: DropDownItemGradient
        path: ''
        startLine: 2575
      summary: "\nWill the dropdown box use gradient or switch implementation\n"
      example: []
      syntax:
        content:
          CSharp: public bool DropDownItemGradient
          VB: Public DropDownItemGradient As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.buttonGradient
      commentId: F:UI.DropDownControl.buttonGradient
      language: CSharp
      name:
        CSharp: buttonGradient
        VB: buttonGradient
      nameWithType:
        CSharp: DropDownControl.buttonGradient
        VB: DropDownControl.buttonGradient
      qualifiedName:
        CSharp: UI.DropDownControl.buttonGradient
        VB: UI.DropDownControl.buttonGradient
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: buttonGradient
        path: ''
        startLine: 2581
      summary: "\nWill the dropdown box use gradient or switch implementation\n"
      example: []
      syntax:
        content:
          CSharp: public Gradient buttonGradient
          VB: Public buttonGradient As Gradient
        return:
          type: Gradient
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.ItemFade
      commentId: F:UI.DropDownControl.ItemFade
      language: CSharp
      name:
        CSharp: ItemFade
        VB: ItemFade
      nameWithType:
        CSharp: DropDownControl.ItemFade
        VB: DropDownControl.ItemFade
      qualifiedName:
        CSharp: UI.DropDownControl.ItemFade
        VB: UI.DropDownControl.ItemFade
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: ItemFade
        path: ''
        startLine: 2587
      summary: "\nWill the dropdown box use gradient or switch implementation\n"
      example: []
      syntax:
        content:
          CSharp: public float ItemFade
          VB: Public ItemFade As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.startColor
      commentId: F:UI.DropDownControl.startColor
      language: CSharp
      name:
        CSharp: startColor
        VB: startColor
      nameWithType:
        CSharp: DropDownControl.startColor
        VB: DropDownControl.startColor
      qualifiedName:
        CSharp: UI.DropDownControl.startColor
        VB: UI.DropDownControl.startColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: startColor
        path: ''
        startLine: 2593
      summary: "\nWill the dropdown box use gradient or switch implementation\n"
      example: []
      syntax:
        content:
          CSharp: public Color startColor
          VB: Public startColor As Color
        return:
          type: Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.endColor
      commentId: F:UI.DropDownControl.endColor
      language: CSharp
      name:
        CSharp: endColor
        VB: endColor
      nameWithType:
        CSharp: DropDownControl.endColor
        VB: DropDownControl.endColor
      qualifiedName:
        CSharp: UI.DropDownControl.endColor
        VB: UI.DropDownControl.endColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: endColor
        path: ''
        startLine: 2599
      summary: "\nWill the dropdown box use gradient or switch implementation\n"
      example: []
      syntax:
        content:
          CSharp: public Color endColor
          VB: Public endColor As Color
        return:
          type: Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.label
      commentId: F:UI.DropDownControl.label
      language: CSharp
      name:
        CSharp: label
        VB: label
      nameWithType:
        CSharp: DropDownControl.label
        VB: DropDownControl.label
      qualifiedName:
        CSharp: UI.DropDownControl.label
        VB: UI.DropDownControl.label
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: label
        path: ''
        startLine: 2602
      syntax:
        content:
          CSharp: public TextMesh label
          VB: Public label As TextMesh
        return:
          type: TextMesh
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.onDropClick
      commentId: F:UI.DropDownControl.onDropClick
      language: CSharp
      name:
        CSharp: onDropClick
        VB: onDropClick
      nameWithType:
        CSharp: DropDownControl.onDropClick
        VB: DropDownControl.onDropClick
      qualifiedName:
        CSharp: UI.DropDownControl.onDropClick
        VB: UI.DropDownControl.onDropClick
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onDropClick
        path: ''
        startLine: 2604
      syntax:
        content:
          CSharp: public UnityEvent onDropClick
          VB: Public onDropClick As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.onSelectClick
      commentId: F:UI.DropDownControl.onSelectClick
      language: CSharp
      name:
        CSharp: onSelectClick
        VB: onSelectClick
      nameWithType:
        CSharp: DropDownControl.onSelectClick
        VB: DropDownControl.onSelectClick
      qualifiedName:
        CSharp: UI.DropDownControl.onSelectClick
        VB: UI.DropDownControl.onSelectClick
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onSelectClick
        path: ''
        startLine: 2606
      syntax:
        content:
          CSharp: public UnityEvent onSelectClick
          VB: Public onSelectClick As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.onHover
      commentId: F:UI.DropDownControl.onHover
      language: CSharp
      name:
        CSharp: onHover
        VB: onHover
      nameWithType:
        CSharp: DropDownControl.onHover
        VB: DropDownControl.onHover
      qualifiedName:
        CSharp: UI.DropDownControl.onHover
        VB: UI.DropDownControl.onHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onHover
        path: ''
        startLine: 2608
      syntax:
        content:
          CSharp: public UnityEvent onHover
          VB: Public onHover As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.onEnter
      commentId: F:UI.DropDownControl.onEnter
      language: CSharp
      name:
        CSharp: onEnter
        VB: onEnter
      nameWithType:
        CSharp: DropDownControl.onEnter
        VB: DropDownControl.onEnter
      qualifiedName:
        CSharp: UI.DropDownControl.onEnter
        VB: UI.DropDownControl.onEnter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onEnter
        path: ''
        startLine: 2610
      syntax:
        content:
          CSharp: public UnityEvent onEnter
          VB: Public onEnter As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.onExit
      commentId: F:UI.DropDownControl.onExit
      language: CSharp
      name:
        CSharp: onExit
        VB: onExit
      nameWithType:
        CSharp: DropDownControl.onExit
        VB: DropDownControl.onExit
      qualifiedName:
        CSharp: UI.DropDownControl.onExit
        VB: UI.DropDownControl.onExit
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onExit
        path: ''
        startLine: 2612
      syntax:
        content:
          CSharp: public UnityEvent onExit
          VB: Public onExit As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.onValueChanged
      commentId: F:UI.DropDownControl.onValueChanged
      language: CSharp
      name:
        CSharp: onValueChanged
        VB: onValueChanged
      nameWithType:
        CSharp: DropDownControl.onValueChanged
        VB: DropDownControl.onValueChanged
      qualifiedName:
        CSharp: UI.DropDownControl.onValueChanged
        VB: UI.DropDownControl.onValueChanged
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onValueChanged
        path: ''
        startLine: 2625
      syntax:
        content:
          CSharp: public DropDownControl.onValueChange onValueChanged
          VB: Public onValueChanged As DropDownControl.onValueChange
        return:
          type: UI.DropDownControl.onValueChange
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.options
      commentId: F:UI.DropDownControl.options
      language: CSharp
      name:
        CSharp: options
        VB: options
      nameWithType:
        CSharp: DropDownControl.options
        VB: DropDownControl.options
      qualifiedName:
        CSharp: UI.DropDownControl.options
        VB: UI.DropDownControl.options
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: options
        path: ''
        startLine: 2631
      summary: "\nlets users create buttons in the menu, contains information about making buttons on dropdown activation\n"
      example: []
      syntax:
        content:
          CSharp: public DropDownControl.Option[] options
          VB: Public options As DropDownControl.Option()
        return:
          type: UI.DropDownControl.Option[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.SliderUpdate
      commentId: M:UI.DropDownControl.SliderUpdate
      language: CSharp
      name:
        CSharp: SliderUpdate()
        VB: SliderUpdate()
      nameWithType:
        CSharp: DropDownControl.SliderUpdate()
        VB: DropDownControl.SliderUpdate()
      qualifiedName:
        CSharp: UI.DropDownControl.SliderUpdate()
        VB: UI.DropDownControl.SliderUpdate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: SliderUpdate
        path: ''
        startLine: 2928
      syntax:
        content:
          CSharp: public void SliderUpdate()
          VB: Public Sub SliderUpdate
      overload: UI.DropDownControl.SliderUpdate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.closeAndPick(System.Int32)
      commentId: M:UI.DropDownControl.closeAndPick(System.Int32)
      language: CSharp
      name:
        CSharp: closeAndPick(Int32)
        VB: closeAndPick(Int32)
      nameWithType:
        CSharp: DropDownControl.closeAndPick(Int32)
        VB: DropDownControl.closeAndPick(Int32)
      qualifiedName:
        CSharp: UI.DropDownControl.closeAndPick(System.Int32)
        VB: UI.DropDownControl.closeAndPick(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: closeAndPick
        path: ''
        startLine: 3028
      summary: "\nThis will handle the selection process and the event handling, calls the deconstruction.\n"
      example: []
      syntax:
        content:
          CSharp: public void closeAndPick(int chosen)
          VB: Public Sub closeAndPick(chosen As Integer)
        parameters:
        - id: chosen
          type: System.Int32
          description: The integer of the index of the item in the options array that was picked
      overload: UI.DropDownControl.closeAndPick*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.setHoveringlayer(LayerMask)
      commentId: M:UI.DropDownControl.setHoveringlayer(LayerMask)
      language: CSharp
      name:
        CSharp: setHoveringlayer(LayerMask)
        VB: setHoveringlayer(LayerMask)
      nameWithType:
        CSharp: DropDownControl.setHoveringlayer(LayerMask)
        VB: DropDownControl.setHoveringlayer(LayerMask)
      qualifiedName:
        CSharp: UI.DropDownControl.setHoveringlayer(LayerMask)
        VB: UI.DropDownControl.setHoveringlayer(LayerMask)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: setHoveringlayer
        path: ''
        startLine: 3049
      summary: "\nsetter for the hovering layer\n"
      example: []
      syntax:
        content:
          CSharp: public void setHoveringlayer(LayerMask hovering)
          VB: Public Sub setHoveringlayer(hovering As LayerMask)
        parameters:
        - id: hovering
          type: LayerMask
          description: The layer mask we are using for hovering
      overload: UI.DropDownControl.setHoveringlayer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.setActivatinglayer(LayerMask)
      commentId: M:UI.DropDownControl.setActivatinglayer(LayerMask)
      language: CSharp
      name:
        CSharp: setActivatinglayer(LayerMask)
        VB: setActivatinglayer(LayerMask)
      nameWithType:
        CSharp: DropDownControl.setActivatinglayer(LayerMask)
        VB: DropDownControl.setActivatinglayer(LayerMask)
      qualifiedName:
        CSharp: UI.DropDownControl.setActivatinglayer(LayerMask)
        VB: UI.DropDownControl.setActivatinglayer(LayerMask)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: setActivatinglayer
        path: ''
        startLine: 3057
      summary: "\nsetter for the activating layer\n"
      example: []
      syntax:
        content:
          CSharp: public void setActivatinglayer(LayerMask activating)
          VB: Public Sub setActivatinglayer(activating As LayerMask)
        parameters:
        - id: activating
          type: LayerMask
          description: The layer mask we are using for activating
      overload: UI.DropDownControl.setActivatinglayer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.DropDownControl.Option
    commentId: T:UI.DropDownControl.Option
    language: CSharp
    name:
      CSharp: DropDownControl.Option
      VB: DropDownControl.Option
    nameWithType:
      CSharp: DropDownControl.Option
      VB: DropDownControl.Option
    qualifiedName:
      CSharp: UI.DropDownControl.Option
      VB: UI.DropDownControl.Option
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: Option
      path: ''
      startLine: 2417
    summary: "\nThis is an object that contains all the needed information about the dropdown buttons\n"
    remarks: "\nThis is designed to be used in a array that holds all the dropdowns. \nThe serialization also helps make all the items able to be set in the inspector\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Option
        VB: >-
          <Serializable>

          Public Class Option
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.DropDownControl.Option.label
      commentId: F:UI.DropDownControl.Option.label
      language: CSharp
      name:
        CSharp: label
        VB: label
      nameWithType:
        CSharp: DropDownControl.Option.label
        VB: DropDownControl.Option.label
      qualifiedName:
        CSharp: UI.DropDownControl.Option.label
        VB: UI.DropDownControl.Option.label
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: label
        path: ''
        startLine: 2421
      syntax:
        content:
          CSharp: public string label
          VB: Public label As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.Option.extras
      commentId: F:UI.DropDownControl.Option.extras
      language: CSharp
      name:
        CSharp: extras
        VB: extras
      nameWithType:
        CSharp: DropDownControl.Option.extras
        VB: DropDownControl.Option.extras
      qualifiedName:
        CSharp: UI.DropDownControl.Option.extras
        VB: UI.DropDownControl.Option.extras
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: extras
        path: ''
        startLine: 2423
      syntax:
        content:
          CSharp: public GameObject extras
          VB: Public extras As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.Option.extrasHovered
      commentId: F:UI.DropDownControl.Option.extrasHovered
      language: CSharp
      name:
        CSharp: extrasHovered
        VB: extrasHovered
      nameWithType:
        CSharp: DropDownControl.Option.extrasHovered
        VB: DropDownControl.Option.extrasHovered
      qualifiedName:
        CSharp: UI.DropDownControl.Option.extrasHovered
        VB: UI.DropDownControl.Option.extrasHovered
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: extrasHovered
        path: ''
        startLine: 2425
      syntax:
        content:
          CSharp: public GameObject extrasHovered
          VB: Public extrasHovered As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.Option.extrasPressed
      commentId: F:UI.DropDownControl.Option.extrasPressed
      language: CSharp
      name:
        CSharp: extrasPressed
        VB: extrasPressed
      nameWithType:
        CSharp: DropDownControl.Option.extrasPressed
        VB: DropDownControl.Option.extrasPressed
      qualifiedName:
        CSharp: UI.DropDownControl.Option.extrasPressed
        VB: UI.DropDownControl.Option.extrasPressed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: extrasPressed
        path: ''
        startLine: 2427
      syntax:
        content:
          CSharp: public GameObject extrasPressed
          VB: Public extrasPressed As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.Option.extrasDisabled
      commentId: F:UI.DropDownControl.Option.extrasDisabled
      language: CSharp
      name:
        CSharp: extrasDisabled
        VB: extrasDisabled
      nameWithType:
        CSharp: DropDownControl.Option.extrasDisabled
        VB: DropDownControl.Option.extrasDisabled
      qualifiedName:
        CSharp: UI.DropDownControl.Option.extrasDisabled
        VB: UI.DropDownControl.Option.extrasDisabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: extrasDisabled
        path: ''
        startLine: 2429
      syntax:
        content:
          CSharp: public GameObject extrasDisabled
          VB: Public extrasDisabled As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.Option.Pressed
      commentId: F:UI.DropDownControl.Option.Pressed
      language: CSharp
      name:
        CSharp: Pressed
        VB: Pressed
      nameWithType:
        CSharp: DropDownControl.Option.Pressed
        VB: DropDownControl.Option.Pressed
      qualifiedName:
        CSharp: UI.DropDownControl.Option.Pressed
        VB: UI.DropDownControl.Option.Pressed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: Pressed
        path: ''
        startLine: 2431
      syntax:
        content:
          CSharp: public bool Pressed
          VB: Public Pressed As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.Option.Disabled
      commentId: F:UI.DropDownControl.Option.Disabled
      language: CSharp
      name:
        CSharp: Disabled
        VB: Disabled
      nameWithType:
        CSharp: DropDownControl.Option.Disabled
        VB: DropDownControl.Option.Disabled
      qualifiedName:
        CSharp: UI.DropDownControl.Option.Disabled
        VB: UI.DropDownControl.Option.Disabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: Disabled
        path: ''
        startLine: 2433
      syntax:
        content:
          CSharp: public bool Disabled
          VB: Public Disabled As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.Option.Hovered
      commentId: F:UI.DropDownControl.Option.Hovered
      language: CSharp
      name:
        CSharp: Hovered
        VB: Hovered
      nameWithType:
        CSharp: DropDownControl.Option.Hovered
        VB: DropDownControl.Option.Hovered
      qualifiedName:
        CSharp: UI.DropDownControl.Option.Hovered
        VB: UI.DropDownControl.Option.Hovered
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: Hovered
        path: ''
        startLine: 2435
      syntax:
        content:
          CSharp: public bool Hovered
          VB: Public Hovered As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.Option.buttonGrad
      commentId: F:UI.DropDownControl.Option.buttonGrad
      language: CSharp
      name:
        CSharp: buttonGrad
        VB: buttonGrad
      nameWithType:
        CSharp: DropDownControl.Option.buttonGrad
        VB: DropDownControl.Option.buttonGrad
      qualifiedName:
        CSharp: UI.DropDownControl.Option.buttonGrad
        VB: UI.DropDownControl.Option.buttonGrad
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: buttonGrad
        path: ''
        startLine: 2437
      syntax:
        content:
          CSharp: public Gradient buttonGrad
          VB: Public buttonGrad As Gradient
        return:
          type: Gradient
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DropDownControl.Option.#ctor
      commentId: M:UI.DropDownControl.Option.#ctor
      language: CSharp
      name:
        CSharp: Option()
        VB: Option()
      nameWithType:
        CSharp: DropDownControl.Option.Option()
        VB: DropDownControl.Option.Option()
      qualifiedName:
        CSharp: UI.DropDownControl.Option.Option()
        VB: UI.DropDownControl.Option.Option()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: .ctor
        path: ''
        startLine: 2438
      syntax:
        content:
          CSharp: public Option()
          VB: Public Sub New
      overload: UI.DropDownControl.Option.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.DropDownControl.onValueChange
    commentId: T:UI.DropDownControl.onValueChange
    language: CSharp
    name:
      CSharp: DropDownControl.onValueChange
      VB: DropDownControl.onValueChange
    nameWithType:
      CSharp: DropDownControl.onValueChange
      VB: DropDownControl.onValueChange
    qualifiedName:
      CSharp: UI.DropDownControl.onValueChange
      VB: UI.DropDownControl.onValueChange
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: onValueChange
      path: ''
      startLine: 2622
    summary: "\ncustom event to tell listeners what item was selected\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class onValueChange : UnityEvent<int>
        VB: >-
          <Serializable>

          Public Class onValueChange

              Inherits UnityEvent(Of Integer)
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: UI.BackTextScript
    commentId: T:UI.BackTextScript
    language: CSharp
    name:
      CSharp: BackTextScript
      VB: BackTextScript
    nameWithType:
      CSharp: BackTextScript
      VB: BackTextScript
    qualifiedName:
      CSharp: UI.BackTextScript
      VB: UI.BackTextScript
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: BackTextScript
      path: ''
      startLine: 3068
    syntax:
      content:
        CSharp: 'public class BackTextScript : MonoBehaviour'
        VB: >-
          Public Class BackTextScript

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.BackTextScript.text
      commentId: F:UI.BackTextScript.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: BackTextScript.text
        VB: BackTextScript.text
      qualifiedName:
        CSharp: UI.BackTextScript.text
        VB: UI.BackTextScript.text
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: text
        path: ''
        startLine: 3069
      syntax:
        content:
          CSharp: public Text text
          VB: Public text As Text
        return:
          type: Text
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.BackTextScript.timeDelay
      commentId: F:UI.BackTextScript.timeDelay
      language: CSharp
      name:
        CSharp: timeDelay
        VB: timeDelay
      nameWithType:
        CSharp: BackTextScript.timeDelay
        VB: BackTextScript.timeDelay
      qualifiedName:
        CSharp: UI.BackTextScript.timeDelay
        VB: UI.BackTextScript.timeDelay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: timeDelay
        path: ''
        startLine: 3072
      syntax:
        content:
          CSharp: public float timeDelay
          VB: Public timeDelay As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.BackTextScript.AddText
      commentId: M:UI.BackTextScript.AddText
      language: CSharp
      name:
        CSharp: AddText()
        VB: AddText()
      nameWithType:
        CSharp: BackTextScript.AddText()
        VB: BackTextScript.AddText()
      qualifiedName:
        CSharp: UI.BackTextScript.AddText()
        VB: UI.BackTextScript.AddText()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: AddText
        path: ''
        startLine: 3091
      syntax:
        content:
          CSharp: public void AddText()
          VB: Public Sub AddText
      overload: UI.BackTextScript.AddText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.ButtonScript
    commentId: T:UI.ButtonScript
    language: CSharp
    name:
      CSharp: ButtonScript
      VB: ButtonScript
    nameWithType:
      CSharp: ButtonScript
      VB: ButtonScript
    qualifiedName:
      CSharp: UI.ButtonScript
      VB: UI.ButtonScript
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: ButtonScript
      path: ''
      startLine: 3108
    syntax:
      content:
        CSharp: 'public class ButtonScript : MonoBehaviour'
        VB: >-
          Public Class ButtonScript

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.ButtonScript.onEnterUseForHover
      commentId: F:UI.ButtonScript.onEnterUseForHover
      language: CSharp
      name:
        CSharp: onEnterUseForHover
        VB: onEnterUseForHover
      nameWithType:
        CSharp: ButtonScript.onEnterUseForHover
        VB: ButtonScript.onEnterUseForHover
      qualifiedName:
        CSharp: UI.ButtonScript.onEnterUseForHover
        VB: UI.ButtonScript.onEnterUseForHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onEnterUseForHover
        path: ''
        startLine: 3109
      syntax:
        content:
          CSharp: public bool onEnterUseForHover
          VB: Public onEnterUseForHover As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.onEnterUseForActivation
      commentId: F:UI.ButtonScript.onEnterUseForActivation
      language: CSharp
      name:
        CSharp: onEnterUseForActivation
        VB: onEnterUseForActivation
      nameWithType:
        CSharp: ButtonScript.onEnterUseForActivation
        VB: ButtonScript.onEnterUseForActivation
      qualifiedName:
        CSharp: UI.ButtonScript.onEnterUseForActivation
        VB: UI.ButtonScript.onEnterUseForActivation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onEnterUseForActivation
        path: ''
        startLine: 3110
      syntax:
        content:
          CSharp: public bool onEnterUseForActivation
          VB: Public onEnterUseForActivation As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.onEnter
      commentId: F:UI.ButtonScript.onEnter
      language: CSharp
      name:
        CSharp: onEnter
        VB: onEnter
      nameWithType:
        CSharp: ButtonScript.onEnter
        VB: ButtonScript.onEnter
      qualifiedName:
        CSharp: UI.ButtonScript.onEnter
        VB: UI.ButtonScript.onEnter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onEnter
        path: ''
        startLine: 3111
      syntax:
        content:
          CSharp: public UnityEvent onEnter
          VB: Public onEnter As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.onStayUseForHover
      commentId: F:UI.ButtonScript.onStayUseForHover
      language: CSharp
      name:
        CSharp: onStayUseForHover
        VB: onStayUseForHover
      nameWithType:
        CSharp: ButtonScript.onStayUseForHover
        VB: ButtonScript.onStayUseForHover
      qualifiedName:
        CSharp: UI.ButtonScript.onStayUseForHover
        VB: UI.ButtonScript.onStayUseForHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onStayUseForHover
        path: ''
        startLine: 3113
      syntax:
        content:
          CSharp: public bool onStayUseForHover
          VB: Public onStayUseForHover As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.onStayUseForActivation
      commentId: F:UI.ButtonScript.onStayUseForActivation
      language: CSharp
      name:
        CSharp: onStayUseForActivation
        VB: onStayUseForActivation
      nameWithType:
        CSharp: ButtonScript.onStayUseForActivation
        VB: ButtonScript.onStayUseForActivation
      qualifiedName:
        CSharp: UI.ButtonScript.onStayUseForActivation
        VB: UI.ButtonScript.onStayUseForActivation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onStayUseForActivation
        path: ''
        startLine: 3114
      syntax:
        content:
          CSharp: public bool onStayUseForActivation
          VB: Public onStayUseForActivation As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.onStay
      commentId: F:UI.ButtonScript.onStay
      language: CSharp
      name:
        CSharp: onStay
        VB: onStay
      nameWithType:
        CSharp: ButtonScript.onStay
        VB: ButtonScript.onStay
      qualifiedName:
        CSharp: UI.ButtonScript.onStay
        VB: UI.ButtonScript.onStay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onStay
        path: ''
        startLine: 3115
      syntax:
        content:
          CSharp: public UnityEvent onStay
          VB: Public onStay As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.onExitUseForHover
      commentId: F:UI.ButtonScript.onExitUseForHover
      language: CSharp
      name:
        CSharp: onExitUseForHover
        VB: onExitUseForHover
      nameWithType:
        CSharp: ButtonScript.onExitUseForHover
        VB: ButtonScript.onExitUseForHover
      qualifiedName:
        CSharp: UI.ButtonScript.onExitUseForHover
        VB: UI.ButtonScript.onExitUseForHover
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onExitUseForHover
        path: ''
        startLine: 3117
      syntax:
        content:
          CSharp: public bool onExitUseForHover
          VB: Public onExitUseForHover As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.onExitUseForActivation
      commentId: F:UI.ButtonScript.onExitUseForActivation
      language: CSharp
      name:
        CSharp: onExitUseForActivation
        VB: onExitUseForActivation
      nameWithType:
        CSharp: ButtonScript.onExitUseForActivation
        VB: ButtonScript.onExitUseForActivation
      qualifiedName:
        CSharp: UI.ButtonScript.onExitUseForActivation
        VB: UI.ButtonScript.onExitUseForActivation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onExitUseForActivation
        path: ''
        startLine: 3118
      syntax:
        content:
          CSharp: public bool onExitUseForActivation
          VB: Public onExitUseForActivation As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.onExit
      commentId: F:UI.ButtonScript.onExit
      language: CSharp
      name:
        CSharp: onExit
        VB: onExit
      nameWithType:
        CSharp: ButtonScript.onExit
        VB: ButtonScript.onExit
      qualifiedName:
        CSharp: UI.ButtonScript.onExit
        VB: UI.ButtonScript.onExit
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: onExit
        path: ''
        startLine: 3119
      syntax:
        content:
          CSharp: public UnityEvent onExit
          VB: Public onExit As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.detectOnEnter
      commentId: F:UI.ButtonScript.detectOnEnter
      language: CSharp
      name:
        CSharp: detectOnEnter
        VB: detectOnEnter
      nameWithType:
        CSharp: ButtonScript.detectOnEnter
        VB: ButtonScript.detectOnEnter
      qualifiedName:
        CSharp: UI.ButtonScript.detectOnEnter
        VB: UI.ButtonScript.detectOnEnter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: detectOnEnter
        path: ''
        startLine: 3121
      syntax:
        content:
          CSharp: public bool detectOnEnter
          VB: Public detectOnEnter As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.detectOnStay
      commentId: F:UI.ButtonScript.detectOnStay
      language: CSharp
      name:
        CSharp: detectOnStay
        VB: detectOnStay
      nameWithType:
        CSharp: ButtonScript.detectOnStay
        VB: ButtonScript.detectOnStay
      qualifiedName:
        CSharp: UI.ButtonScript.detectOnStay
        VB: UI.ButtonScript.detectOnStay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: detectOnStay
        path: ''
        startLine: 3122
      syntax:
        content:
          CSharp: public bool detectOnStay
          VB: Public detectOnStay As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.detectOnExit
      commentId: F:UI.ButtonScript.detectOnExit
      language: CSharp
      name:
        CSharp: detectOnExit
        VB: detectOnExit
      nameWithType:
        CSharp: ButtonScript.detectOnExit
        VB: ButtonScript.detectOnExit
      qualifiedName:
        CSharp: UI.ButtonScript.detectOnExit
        VB: UI.ButtonScript.detectOnExit
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: detectOnExit
        path: ''
        startLine: 3123
      syntax:
        content:
          CSharp: public bool detectOnExit
          VB: Public detectOnExit As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.activationLayer
      commentId: F:UI.ButtonScript.activationLayer
      language: CSharp
      name:
        CSharp: activationLayer
        VB: activationLayer
      nameWithType:
        CSharp: ButtonScript.activationLayer
        VB: ButtonScript.activationLayer
      qualifiedName:
        CSharp: UI.ButtonScript.activationLayer
        VB: UI.ButtonScript.activationLayer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: activationLayer
        path: ''
        startLine: 3124
      syntax:
        content:
          CSharp: public LayerMask activationLayer
          VB: Public activationLayer As LayerMask
        return:
          type: LayerMask
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.hoverLayer
      commentId: F:UI.ButtonScript.hoverLayer
      language: CSharp
      name:
        CSharp: hoverLayer
        VB: hoverLayer
      nameWithType:
        CSharp: ButtonScript.hoverLayer
        VB: ButtonScript.hoverLayer
      qualifiedName:
        CSharp: UI.ButtonScript.hoverLayer
        VB: UI.ButtonScript.hoverLayer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: hoverLayer
        path: ''
        startLine: 3125
      syntax:
        content:
          CSharp: public LayerMask hoverLayer
          VB: Public hoverLayer As LayerMask
        return:
          type: LayerMask
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ButtonScript.isActive
      commentId: F:UI.ButtonScript.isActive
      language: CSharp
      name:
        CSharp: isActive
        VB: isActive
      nameWithType:
        CSharp: ButtonScript.isActive
        VB: ButtonScript.isActive
      qualifiedName:
        CSharp: UI.ButtonScript.isActive
        VB: UI.ButtonScript.isActive
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: isActive
        path: ''
        startLine: 3127
      syntax:
        content:
          CSharp: public bool isActive
          VB: Public isActive As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.EnterTextScript
    commentId: T:UI.EnterTextScript
    language: CSharp
    name:
      CSharp: EnterTextScript
      VB: EnterTextScript
    nameWithType:
      CSharp: EnterTextScript
      VB: EnterTextScript
    qualifiedName:
      CSharp: UI.EnterTextScript
      VB: UI.EnterTextScript
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: EnterTextScript
      path: ''
      startLine: 3196
    syntax:
      content:
        CSharp: 'public class EnterTextScript : MonoBehaviour'
        VB: >-
          Public Class EnterTextScript

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.EnterTextScript.text
      commentId: F:UI.EnterTextScript.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: EnterTextScript.text
        VB: EnterTextScript.text
      qualifiedName:
        CSharp: UI.EnterTextScript.text
        VB: UI.EnterTextScript.text
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: text
        path: ''
        startLine: 3197
      syntax:
        content:
          CSharp: public Text text
          VB: Public text As Text
        return:
          type: Text
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.EnterTextScript.timeDelay
      commentId: F:UI.EnterTextScript.timeDelay
      language: CSharp
      name:
        CSharp: timeDelay
        VB: timeDelay
      nameWithType:
        CSharp: EnterTextScript.timeDelay
        VB: EnterTextScript.timeDelay
      qualifiedName:
        CSharp: UI.EnterTextScript.timeDelay
        VB: UI.EnterTextScript.timeDelay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: timeDelay
        path: ''
        startLine: 3200
      syntax:
        content:
          CSharp: public float timeDelay
          VB: Public timeDelay As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.EnterTextScript.AddText
      commentId: M:UI.EnterTextScript.AddText
      language: CSharp
      name:
        CSharp: AddText()
        VB: AddText()
      nameWithType:
        CSharp: EnterTextScript.AddText()
        VB: EnterTextScript.AddText()
      qualifiedName:
        CSharp: UI.EnterTextScript.AddText()
        VB: UI.EnterTextScript.AddText()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: AddText
        path: ''
        startLine: 3219
      syntax:
        content:
          CSharp: public void AddText()
          VB: Public Sub AddText
      overload: UI.EnterTextScript.AddText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.Pointer
    commentId: T:UI.Pointer
    language: CSharp
    name:
      CSharp: Pointer
      VB: Pointer
    nameWithType:
      CSharp: Pointer
      VB: Pointer
    qualifiedName:
      CSharp: UI.Pointer
      VB: UI.Pointer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: Pointer
      path: ''
      startLine: 3234
    syntax:
      content:
        CSharp: 'public class Pointer : MonoBehaviour'
        VB: >-
          Public Class Pointer

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.Pointer.initialLayer
      commentId: F:UI.Pointer.initialLayer
      language: CSharp
      name:
        CSharp: initialLayer
        VB: initialLayer
      nameWithType:
        CSharp: Pointer.initialLayer
        VB: Pointer.initialLayer
      qualifiedName:
        CSharp: UI.Pointer.initialLayer
        VB: UI.Pointer.initialLayer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: initialLayer
        path: ''
        startLine: 3235
      syntax:
        content:
          CSharp: public LayerMask initialLayer
          VB: Public initialLayer As LayerMask
        return:
          type: LayerMask
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.Pointer.layerForCollision
      commentId: F:UI.Pointer.layerForCollision
      language: CSharp
      name:
        CSharp: layerForCollision
        VB: layerForCollision
      nameWithType:
        CSharp: Pointer.layerForCollision
        VB: Pointer.layerForCollision
      qualifiedName:
        CSharp: UI.Pointer.layerForCollision
        VB: UI.Pointer.layerForCollision
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: layerForCollision
        path: ''
        startLine: 3236
      syntax:
        content:
          CSharp: public LayerMask layerForCollision
          VB: Public layerForCollision As LayerMask
        return:
          type: LayerMask
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.TextScript
    commentId: T:UI.TextScript
    language: CSharp
    name:
      CSharp: TextScript
      VB: TextScript
    nameWithType:
      CSharp: TextScript
      VB: TextScript
    qualifiedName:
      CSharp: UI.TextScript
      VB: UI.TextScript
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: TextScript
      path: ''
      startLine: 3268
    syntax:
      content:
        CSharp: 'public class TextScript : MonoBehaviour'
        VB: >-
          Public Class TextScript

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.TextScript.text
      commentId: F:UI.TextScript.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: TextScript.text
        VB: TextScript.text
      qualifiedName:
        CSharp: UI.TextScript.text
        VB: UI.TextScript.text
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: text
        path: ''
        startLine: 3269
      syntax:
        content:
          CSharp: public Text text
          VB: Public text As Text
        return:
          type: Text
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.TextScript.key
      commentId: F:UI.TextScript.key
      language: CSharp
      name:
        CSharp: key
        VB: key
      nameWithType:
        CSharp: TextScript.key
        VB: TextScript.key
      qualifiedName:
        CSharp: UI.TextScript.key
        VB: UI.TextScript.key
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: key
        path: ''
        startLine: 3270
      syntax:
        content:
          CSharp: public char key
          VB: Public key As Char
        return:
          type: System.Char
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.TextScript.timeDelay
      commentId: F:UI.TextScript.timeDelay
      language: CSharp
      name:
        CSharp: timeDelay
        VB: timeDelay
      nameWithType:
        CSharp: TextScript.timeDelay
        VB: TextScript.timeDelay
      qualifiedName:
        CSharp: UI.TextScript.timeDelay
        VB: UI.TextScript.timeDelay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: timeDelay
        path: ''
        startLine: 3273
      syntax:
        content:
          CSharp: public float timeDelay
          VB: Public timeDelay As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.TextScript.AddText
      commentId: M:UI.TextScript.AddText
      language: CSharp
      name:
        CSharp: AddText()
        VB: AddText()
      nameWithType:
        CSharp: TextScript.AddText()
        VB: TextScript.AddText()
      qualifiedName:
        CSharp: UI.TextScript.AddText()
        VB: UI.TextScript.AddText()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: AddText
        path: ''
        startLine: 3295
      syntax:
        content:
          CSharp: public void AddText()
          VB: Public Sub AddText
      overload: UI.TextScript.AddText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.DisappearAtDistance
    commentId: T:UI.DisappearAtDistance
    language: CSharp
    name:
      CSharp: DisappearAtDistance
      VB: DisappearAtDistance
    nameWithType:
      CSharp: DisappearAtDistance
      VB: DisappearAtDistance
    qualifiedName:
      CSharp: UI.DisappearAtDistance
      VB: UI.DisappearAtDistance
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: DisappearAtDistance
      path: ''
      startLine: 3318
    syntax:
      content:
        CSharp: 'public class DisappearAtDistance : MonoBehaviour'
        VB: >-
          Public Class DisappearAtDistance

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.DisappearAtDistance.userCamera
      commentId: F:UI.DisappearAtDistance.userCamera
      language: CSharp
      name:
        CSharp: userCamera
        VB: userCamera
      nameWithType:
        CSharp: DisappearAtDistance.userCamera
        VB: DisappearAtDistance.userCamera
      qualifiedName:
        CSharp: UI.DisappearAtDistance.userCamera
        VB: UI.DisappearAtDistance.userCamera
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: userCamera
        path: ''
        startLine: 3323
      summary: "\nCamera for doing vector calculations. The camera that the user uses to see the world\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject userCamera
          VB: Public userCamera As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DisappearAtDistance.pivotPoint
      commentId: F:UI.DisappearAtDistance.pivotPoint
      language: CSharp
      name:
        CSharp: pivotPoint
        VB: pivotPoint
      nameWithType:
        CSharp: DisappearAtDistance.pivotPoint
        VB: DisappearAtDistance.pivotPoint
      qualifiedName:
        CSharp: UI.DisappearAtDistance.pivotPoint
        VB: UI.DisappearAtDistance.pivotPoint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: pivotPoint
        path: ''
        startLine: 3328
      summary: "\nWhat this object will use as the second point to determine distance and scale, use is center to use this object\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject pivotPoint
          VB: Public pivotPoint As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DisappearAtDistance.isCenter
      commentId: F:UI.DisappearAtDistance.isCenter
      language: CSharp
      name:
        CSharp: isCenter
        VB: isCenter
      nameWithType:
        CSharp: DisappearAtDistance.isCenter
        VB: DisappearAtDistance.isCenter
      qualifiedName:
        CSharp: UI.DisappearAtDistance.isCenter
        VB: UI.DisappearAtDistance.isCenter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: isCenter
        path: ''
        startLine: 3333
      summary: "\nIs this object the second point to determine the distance and scale?\n"
      example: []
      syntax:
        content:
          CSharp: public bool isCenter
          VB: Public isCenter As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DisappearAtDistance.scaleDist
      commentId: F:UI.DisappearAtDistance.scaleDist
      language: CSharp
      name:
        CSharp: scaleDist
        VB: scaleDist
      nameWithType:
        CSharp: DisappearAtDistance.scaleDist
        VB: DisappearAtDistance.scaleDist
      qualifiedName:
        CSharp: UI.DisappearAtDistance.scaleDist
        VB: UI.DisappearAtDistance.scaleDist
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: scaleDist
        path: ''
        startLine: 3338
      summary: "\nWhere the object should have its original size\n"
      example: []
      syntax:
        content:
          CSharp: public float scaleDist
          VB: Public scaleDist As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DisappearAtDistance.disapearAtCloseDistance
      commentId: F:UI.DisappearAtDistance.disapearAtCloseDistance
      language: CSharp
      name:
        CSharp: disapearAtCloseDistance
        VB: disapearAtCloseDistance
      nameWithType:
        CSharp: DisappearAtDistance.disapearAtCloseDistance
        VB: DisappearAtDistance.disapearAtCloseDistance
      qualifiedName:
        CSharp: UI.DisappearAtDistance.disapearAtCloseDistance
        VB: UI.DisappearAtDistance.disapearAtCloseDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: disapearAtCloseDistance
        path: ''
        startLine: 3343
      summary: "\nHow close the user should be when this item disappears\n"
      example: []
      syntax:
        content:
          CSharp: public float disapearAtCloseDistance
          VB: Public disapearAtCloseDistance As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DisappearAtDistance.disapearWhenFarAway
      commentId: F:UI.DisappearAtDistance.disapearWhenFarAway
      language: CSharp
      name:
        CSharp: disapearWhenFarAway
        VB: disapearWhenFarAway
      nameWithType:
        CSharp: DisappearAtDistance.disapearWhenFarAway
        VB: DisappearAtDistance.disapearWhenFarAway
      qualifiedName:
        CSharp: UI.DisappearAtDistance.disapearWhenFarAway
        VB: UI.DisappearAtDistance.disapearWhenFarAway
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: disapearWhenFarAway
        path: ''
        startLine: 3348
      summary: "\nShould this item disappear if the user gets to far away?\n"
      example: []
      syntax:
        content:
          CSharp: public bool disapearWhenFarAway
          VB: Public disapearWhenFarAway As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DisappearAtDistance.disapearAtFarDistance
      commentId: F:UI.DisappearAtDistance.disapearAtFarDistance
      language: CSharp
      name:
        CSharp: disapearAtFarDistance
        VB: disapearAtFarDistance
      nameWithType:
        CSharp: DisappearAtDistance.disapearAtFarDistance
        VB: DisappearAtDistance.disapearAtFarDistance
      qualifiedName:
        CSharp: UI.DisappearAtDistance.disapearAtFarDistance
        VB: UI.DisappearAtDistance.disapearAtFarDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: disapearAtFarDistance
        path: ''
        startLine: 3353
      summary: "\nThe distance at which this item should disapear\n"
      example: []
      syntax:
        content:
          CSharp: public float disapearAtFarDistance
          VB: Public disapearAtFarDistance As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DisappearAtDistance.renderList
      commentId: F:UI.DisappearAtDistance.renderList
      language: CSharp
      name:
        CSharp: renderList
        VB: renderList
      nameWithType:
        CSharp: DisappearAtDistance.renderList
        VB: DisappearAtDistance.renderList
      qualifiedName:
        CSharp: UI.DisappearAtDistance.renderList
        VB: UI.DisappearAtDistance.renderList
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: renderList
        path: ''
        startLine: 3358
      summary: "\nRenderers that will turn on or off as stated by the script\n"
      example: []
      syntax:
        content:
          CSharp: public ArrayList renderList
          VB: Public renderList As ArrayList
        return:
          type: System.Collections.ArrayList
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DisappearAtDistance.itemRenderer
      commentId: F:UI.DisappearAtDistance.itemRenderer
      language: CSharp
      name:
        CSharp: itemRenderer
        VB: itemRenderer
      nameWithType:
        CSharp: DisappearAtDistance.itemRenderer
        VB: DisappearAtDistance.itemRenderer
      qualifiedName:
        CSharp: UI.DisappearAtDistance.itemRenderer
        VB: UI.DisappearAtDistance.itemRenderer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: itemRenderer
        path: ''
        startLine: 3363
      summary: "\nUse all renderers in this item\n"
      example: []
      syntax:
        content:
          CSharp: public bool itemRenderer
          VB: Public itemRenderer As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DisappearAtDistance.childrenRenderer
      commentId: F:UI.DisappearAtDistance.childrenRenderer
      language: CSharp
      name:
        CSharp: childrenRenderer
        VB: childrenRenderer
      nameWithType:
        CSharp: DisappearAtDistance.childrenRenderer
        VB: DisappearAtDistance.childrenRenderer
      qualifiedName:
        CSharp: UI.DisappearAtDistance.childrenRenderer
        VB: UI.DisappearAtDistance.childrenRenderer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: childrenRenderer
        path: ''
        startLine: 3368
      summary: "\nUse all renderers in children\n"
      example: []
      syntax:
        content:
          CSharp: public bool childrenRenderer
          VB: Public childrenRenderer As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.DisappearAtDistance.isVisible
      commentId: F:UI.DisappearAtDistance.isVisible
      language: CSharp
      name:
        CSharp: isVisible
        VB: isVisible
      nameWithType:
        CSharp: DisappearAtDistance.isVisible
        VB: DisappearAtDistance.isVisible
      qualifiedName:
        CSharp: UI.DisappearAtDistance.isVisible
        VB: UI.DisappearAtDistance.isVisible
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: isVisible
        path: ''
        startLine: 3373
      summary: "\nIs this item visible?\n"
      example: []
      syntax:
        content:
          CSharp: public bool isVisible
          VB: Public isVisible As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.RotateToUser
    commentId: T:UI.RotateToUser
    language: CSharp
    name:
      CSharp: RotateToUser
      VB: RotateToUser
    nameWithType:
      CSharp: RotateToUser
      VB: RotateToUser
    qualifiedName:
      CSharp: UI.RotateToUser
      VB: UI.RotateToUser
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: RotateToUser
      path: ''
      startLine: 3479
    syntax:
      content:
        CSharp: 'public class RotateToUser : MonoBehaviour'
        VB: >-
          Public Class RotateToUser

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.RotateToUser.userCamera
      commentId: F:UI.RotateToUser.userCamera
      language: CSharp
      name:
        CSharp: userCamera
        VB: userCamera
      nameWithType:
        CSharp: RotateToUser.userCamera
        VB: RotateToUser.userCamera
      qualifiedName:
        CSharp: UI.RotateToUser.userCamera
        VB: UI.RotateToUser.userCamera
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: userCamera
        path: ''
        startLine: 3484
      summary: "\nThe camera that the user uses to see the world\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject userCamera
          VB: Public userCamera As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.RotateToUser.pivotPoint
      commentId: F:UI.RotateToUser.pivotPoint
      language: CSharp
      name:
        CSharp: pivotPoint
        VB: pivotPoint
      nameWithType:
        CSharp: RotateToUser.pivotPoint
        VB: RotateToUser.pivotPoint
      qualifiedName:
        CSharp: UI.RotateToUser.pivotPoint
        VB: UI.RotateToUser.pivotPoint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: pivotPoint
        path: ''
        startLine: 3489
      summary: "\nWhat this object will orbit around\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject pivotPoint
          VB: Public pivotPoint As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.RotateToUser.distanceFromPivotPoint
      commentId: F:UI.RotateToUser.distanceFromPivotPoint
      language: CSharp
      name:
        CSharp: distanceFromPivotPoint
        VB: distanceFromPivotPoint
      nameWithType:
        CSharp: RotateToUser.distanceFromPivotPoint
        VB: RotateToUser.distanceFromPivotPoint
      qualifiedName:
        CSharp: UI.RotateToUser.distanceFromPivotPoint
        VB: UI.RotateToUser.distanceFromPivotPoint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: distanceFromPivotPoint
        path: ''
        startLine: 3494
      summary: "\nDistance this object will orbit around the pivotPoint\n"
      example: []
      syntax:
        content:
          CSharp: public float distanceFromPivotPoint
          VB: Public distanceFromPivotPoint As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.ScaleToUser
    commentId: T:UI.ScaleToUser
    language: CSharp
    name:
      CSharp: ScaleToUser
      VB: ScaleToUser
    nameWithType:
      CSharp: ScaleToUser
      VB: ScaleToUser
    qualifiedName:
      CSharp: UI.ScaleToUser
      VB: UI.ScaleToUser
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: ScaleToUser
      path: ''
      startLine: 3538
    syntax:
      content:
        CSharp: 'public class ScaleToUser : MonoBehaviour'
        VB: >-
          Public Class ScaleToUser

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.ScaleToUser.userCamera
      commentId: F:UI.ScaleToUser.userCamera
      language: CSharp
      name:
        CSharp: userCamera
        VB: userCamera
      nameWithType:
        CSharp: ScaleToUser.userCamera
        VB: ScaleToUser.userCamera
      qualifiedName:
        CSharp: UI.ScaleToUser.userCamera
        VB: UI.ScaleToUser.userCamera
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: userCamera
        path: ''
        startLine: 3543
      summary: "\nThe camera that the user uses to see the world\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject userCamera
          VB: Public userCamera As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ScaleToUser.pivotPoint
      commentId: F:UI.ScaleToUser.pivotPoint
      language: CSharp
      name:
        CSharp: pivotPoint
        VB: pivotPoint
      nameWithType:
        CSharp: ScaleToUser.pivotPoint
        VB: ScaleToUser.pivotPoint
      qualifiedName:
        CSharp: UI.ScaleToUser.pivotPoint
        VB: UI.ScaleToUser.pivotPoint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: pivotPoint
        path: ''
        startLine: 3548
      summary: "\nWhat this object will use as the second point to determine distance and scale, use is center to use this object\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject pivotPoint
          VB: Public pivotPoint As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ScaleToUser.isCenter
      commentId: F:UI.ScaleToUser.isCenter
      language: CSharp
      name:
        CSharp: isCenter
        VB: isCenter
      nameWithType:
        CSharp: ScaleToUser.isCenter
        VB: ScaleToUser.isCenter
      qualifiedName:
        CSharp: UI.ScaleToUser.isCenter
        VB: UI.ScaleToUser.isCenter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: isCenter
        path: ''
        startLine: 3553
      summary: "\nboolean for if this object is the second point to determine the distance and scale\n"
      example: []
      syntax:
        content:
          CSharp: public bool isCenter
          VB: Public isCenter As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ScaleToUser.farScale
      commentId: F:UI.ScaleToUser.farScale
      language: CSharp
      name:
        CSharp: farScale
        VB: farScale
      nameWithType:
        CSharp: ScaleToUser.farScale
        VB: ScaleToUser.farScale
      qualifiedName:
        CSharp: UI.ScaleToUser.farScale
        VB: UI.ScaleToUser.farScale
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: farScale
        path: ''
        startLine: 3558
      summary: "\nThe linear scaling past the scaleDist\n"
      example: []
      syntax:
        content:
          CSharp: public float farScale
          VB: Public farScale As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ScaleToUser.nearScale
      commentId: F:UI.ScaleToUser.nearScale
      language: CSharp
      name:
        CSharp: nearScale
        VB: nearScale
      nameWithType:
        CSharp: ScaleToUser.nearScale
        VB: ScaleToUser.nearScale
      qualifiedName:
        CSharp: UI.ScaleToUser.nearScale
        VB: UI.ScaleToUser.nearScale
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: nearScale
        path: ''
        startLine: 3563
      summary: "\nThe linear scaling between the scaleDist and the pivotPoint\n"
      example: []
      syntax:
        content:
          CSharp: public float nearScale
          VB: Public nearScale As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.ScaleToUser.scaleDist
      commentId: F:UI.ScaleToUser.scaleDist
      language: CSharp
      name:
        CSharp: scaleDist
        VB: scaleDist
      nameWithType:
        CSharp: ScaleToUser.scaleDist
        VB: ScaleToUser.scaleDist
      qualifiedName:
        CSharp: UI.ScaleToUser.scaleDist
        VB: UI.ScaleToUser.scaleDist
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: scaleDist
        path: ''
        startLine: 3568
      summary: "\nWhere the object should have its original size\n"
      example: []
      syntax:
        content:
          CSharp: public float scaleDist
          VB: Public scaleDist As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.SetCorrectCameraHeight
    commentId: T:UI.SetCorrectCameraHeight
    language: CSharp
    name:
      CSharp: SetCorrectCameraHeight
      VB: SetCorrectCameraHeight
    nameWithType:
      CSharp: SetCorrectCameraHeight
      VB: SetCorrectCameraHeight
    qualifiedName:
      CSharp: UI.SetCorrectCameraHeight
      VB: UI.SetCorrectCameraHeight
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: SetCorrectCameraHeight
      path: ''
      startLine: 3610
    syntax:
      content:
        CSharp: 'public class SetCorrectCameraHeight : MonoBehaviour'
        VB: >-
          Public Class SetCorrectCameraHeight

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: UI.BackButtonLogic
    commentId: T:UI.BackButtonLogic
    language: CSharp
    name:
      CSharp: BackButtonLogic
      VB: BackButtonLogic
    nameWithType:
      CSharp: BackButtonLogic
      VB: BackButtonLogic
    qualifiedName:
      CSharp: UI.BackButtonLogic
      VB: UI.BackButtonLogic
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: BackButtonLogic
      path: ''
      startLine: 3805
    syntax:
      content:
        CSharp: 'public class BackButtonLogic : MonoBehaviour'
        VB: >-
          Public Class BackButtonLogic

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: UI.UIInteraction
    commentId: T:UI.UIInteraction
    language: CSharp
    name:
      CSharp: UIInteraction
      VB: UIInteraction
    nameWithType:
      CSharp: UIInteraction
      VB: UIInteraction
    qualifiedName:
      CSharp: UI.UIInteraction
      VB: UI.UIInteraction
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: UIInteraction
      path: ''
      startLine: 7024
    syntax:
      content:
        CSharp: 'public class UIInteraction : MonoBehaviour'
        VB: >-
          Public Class UIInteraction

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.UIInteraction.outText
      commentId: F:UI.UIInteraction.outText
      language: CSharp
      name:
        CSharp: outText
        VB: outText
      nameWithType:
        CSharp: UIInteraction.outText
        VB: UIInteraction.outText
      qualifiedName:
        CSharp: UI.UIInteraction.outText
        VB: UI.UIInteraction.outText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: outText
        path: ''
        startLine: 7025
      syntax:
        content:
          CSharp: public Text outText
          VB: Public outText As Text
        return:
          type: UnityEngine.UI.Text
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.UIInteraction.OnButtonClicked
      commentId: M:UI.UIInteraction.OnButtonClicked
      language: CSharp
      name:
        CSharp: OnButtonClicked()
        VB: OnButtonClicked()
      nameWithType:
        CSharp: UIInteraction.OnButtonClicked()
        VB: UIInteraction.OnButtonClicked()
      qualifiedName:
        CSharp: UI.UIInteraction.OnButtonClicked()
        VB: UI.UIInteraction.OnButtonClicked()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: OnButtonClicked
        path: ''
        startLine: 7027
      syntax:
        content:
          CSharp: public void OnButtonClicked()
          VB: Public Sub OnButtonClicked
      overload: UI.UIInteraction.OnButtonClicked*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.UIInteraction.OnSliderChanged(System.Single)
      commentId: M:UI.UIInteraction.OnSliderChanged(System.Single)
      language: CSharp
      name:
        CSharp: OnSliderChanged(Single)
        VB: OnSliderChanged(Single)
      nameWithType:
        CSharp: UIInteraction.OnSliderChanged(Single)
        VB: UIInteraction.OnSliderChanged(Single)
      qualifiedName:
        CSharp: UI.UIInteraction.OnSliderChanged(System.Single)
        VB: UI.UIInteraction.OnSliderChanged(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: OnSliderChanged
        path: ''
        startLine: 7033
      syntax:
        content:
          CSharp: public void OnSliderChanged(float value)
          VB: Public Sub OnSliderChanged(value As Single)
        parameters:
        - id: value
          type: System.Single
      overload: UI.UIInteraction.OnSliderChanged*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.UIInteraction.OnToggleChanged(System.Boolean)
      commentId: M:UI.UIInteraction.OnToggleChanged(System.Boolean)
      language: CSharp
      name:
        CSharp: OnToggleChanged(Boolean)
        VB: OnToggleChanged(Boolean)
      nameWithType:
        CSharp: UIInteraction.OnToggleChanged(Boolean)
        VB: UIInteraction.OnToggleChanged(Boolean)
      qualifiedName:
        CSharp: UI.UIInteraction.OnToggleChanged(System.Boolean)
        VB: UI.UIInteraction.OnToggleChanged(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: OnToggleChanged
        path: ''
        startLine: 7039
      syntax:
        content:
          CSharp: public void OnToggleChanged(bool value)
          VB: Public Sub OnToggleChanged(value As Boolean)
        parameters:
        - id: value
          type: System.Boolean
      overload: UI.UIInteraction.OnToggleChanged*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.UIInteraction.OnClearText
      commentId: M:UI.UIInteraction.OnClearText
      language: CSharp
      name:
        CSharp: OnClearText()
        VB: OnClearText()
      nameWithType:
        CSharp: UIInteraction.OnClearText()
        VB: UIInteraction.OnClearText()
      qualifiedName:
        CSharp: UI.UIInteraction.OnClearText()
        VB: UI.UIInteraction.OnClearText()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: OnClearText
        path: ''
        startLine: 7045
      syntax:
        content:
          CSharp: public void OnClearText()
          VB: Public Sub OnClearText
      overload: UI.UIInteraction.OnClearText*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.UIInteraction.OnBackToMenu
      commentId: M:UI.UIInteraction.OnBackToMenu
      language: CSharp
      name:
        CSharp: OnBackToMenu()
        VB: OnBackToMenu()
      nameWithType:
        CSharp: UIInteraction.OnBackToMenu()
        VB: UIInteraction.OnBackToMenu()
      qualifiedName:
        CSharp: UI.UIInteraction.OnBackToMenu()
        VB: UI.UIInteraction.OnBackToMenu()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: OnBackToMenu
        path: ''
        startLine: 7051
      syntax:
        content:
          CSharp: public void OnBackToMenu()
          VB: Public Sub OnBackToMenu
      overload: UI.UIInteraction.OnBackToMenu*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  Gestures:
    name:
      CSharp:
      - name: Gestures
        nameWithType: Gestures
        qualifiedName: Gestures
      VB:
      - name: Gestures
        nameWithType: Gestures
        qualifiedName: Gestures
    isDefinition: true
    commentId: N:Gestures
  Gestures.Gesture:
    name:
      CSharp:
      - id: Gestures.Gesture
        name: Gesture
        nameWithType: Gesture
        qualifiedName: Gestures.Gesture
      VB:
      - id: Gestures.Gesture
        name: Gesture
        nameWithType: Gesture
        qualifiedName: Gestures.Gesture
    isDefinition: true
    parent: Gestures
    commentId: T:Gestures.Gesture
  Gestures.Gesture.checks:
    name:
      CSharp:
      - id: Gestures.Gesture.checks
        name: checks
        nameWithType: Gesture.checks
        qualifiedName: Gestures.Gesture.checks
      VB:
      - id: Gestures.Gesture.checks
        name: checks
        nameWithType: Gesture.checks
        qualifiedName: Gestures.Gesture.checks
    isDefinition: true
    parent: Gestures.Gesture
    commentId: F:Gestures.Gesture.checks
  Gestures.Gesture.sequentialChecks:
    name:
      CSharp:
      - id: Gestures.Gesture.sequentialChecks
        name: sequentialChecks
        nameWithType: Gesture.sequentialChecks
        qualifiedName: Gestures.Gesture.sequentialChecks
      VB:
      - id: Gestures.Gesture.sequentialChecks
        name: sequentialChecks
        nameWithType: Gesture.sequentialChecks
        qualifiedName: Gestures.Gesture.sequentialChecks
    isDefinition: true
    parent: Gestures.Gesture
    commentId: F:Gestures.Gesture.sequentialChecks
  Gestures.Gesture.alwaysChecks:
    name:
      CSharp:
      - id: Gestures.Gesture.alwaysChecks
        name: alwaysChecks
        nameWithType: Gesture.alwaysChecks
        qualifiedName: Gestures.Gesture.alwaysChecks
      VB:
      - id: Gestures.Gesture.alwaysChecks
        name: alwaysChecks
        nameWithType: Gesture.alwaysChecks
        qualifiedName: Gestures.Gesture.alwaysChecks
    isDefinition: true
    parent: Gestures.Gesture
    commentId: F:Gestures.Gesture.alwaysChecks
  Gestures.Gesture.isEnabled:
    name:
      CSharp:
      - id: Gestures.Gesture.isEnabled
        name: isEnabled
        nameWithType: Gesture.isEnabled
        qualifiedName: Gestures.Gesture.isEnabled
      VB:
      - id: Gestures.Gesture.isEnabled
        name: isEnabled
        nameWithType: Gesture.isEnabled
        qualifiedName: Gestures.Gesture.isEnabled
    isDefinition: true
    parent: Gestures.Gesture
    commentId: P:Gestures.Gesture.isEnabled
  Gestures.Gesture.normalizer:
    name:
      CSharp:
      - id: Gestures.Gesture.normalizer
        name: normalizer
        nameWithType: Gesture.normalizer
        qualifiedName: Gestures.Gesture.normalizer
      VB:
      - id: Gestures.Gesture.normalizer
        name: normalizer
        nameWithType: Gesture.normalizer
        qualifiedName: Gestures.Gesture.normalizer
    isDefinition: true
    parent: Gestures.Gesture
    commentId: F:Gestures.Gesture.normalizer
  Gestures.Gesture.completeEvent:
    name:
      CSharp:
      - id: Gestures.Gesture.completeEvent
        name: completeEvent
        nameWithType: Gesture.completeEvent
        qualifiedName: Gestures.Gesture.completeEvent
      VB:
      - id: Gestures.Gesture.completeEvent
        name: completeEvent
        nameWithType: Gesture.completeEvent
        qualifiedName: Gestures.Gesture.completeEvent
    isDefinition: true
    parent: Gestures.Gesture
    commentId: F:Gestures.Gesture.completeEvent
  Gestures.Gesture.gestureCompleteConfidence:
    name:
      CSharp:
      - id: Gestures.Gesture.gestureCompleteConfidence
        name: gestureCompleteConfidence
        nameWithType: Gesture.gestureCompleteConfidence
        qualifiedName: Gestures.Gesture.gestureCompleteConfidence
      VB:
      - id: Gestures.Gesture.gestureCompleteConfidence
        name: gestureCompleteConfidence
        nameWithType: Gesture.gestureCompleteConfidence
        qualifiedName: Gestures.Gesture.gestureCompleteConfidence
    isDefinition: true
    parent: Gestures.Gesture
    commentId: P:Gestures.Gesture.gestureCompleteConfidence
  Gestures.Gesture.gestureCompletionPrecision:
    name:
      CSharp:
      - id: Gestures.Gesture.gestureCompletionPrecision
        name: gestureCompletionPrecision
        nameWithType: Gesture.gestureCompletionPrecision
        qualifiedName: Gestures.Gesture.gestureCompletionPrecision
      VB:
      - id: Gestures.Gesture.gestureCompletionPrecision
        name: gestureCompletionPrecision
        nameWithType: Gesture.gestureCompletionPrecision
        qualifiedName: Gestures.Gesture.gestureCompletionPrecision
    isDefinition: true
    parent: Gestures.Gesture
    commentId: F:Gestures.Gesture.gestureCompletionPrecision
  Gestures.Gesture.GestureCompleted(System.Collections.Generic.List{Gestures.GTransform}):
    name:
      CSharp:
      - id: Gestures.Gesture.GestureCompleted(System.Collections.Generic.List{Gestures.GTransform})
        name: GestureCompleted
        nameWithType: Gesture.GestureCompleted
        qualifiedName: Gestures.Gesture.GestureCompleted
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.GestureCompleted(System.Collections.Generic.List{Gestures.GTransform})
        name: GestureCompleted
        nameWithType: Gesture.GestureCompleted
        qualifiedName: Gestures.Gesture.GestureCompleted
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.GestureCompleted(System.Collections.Generic.List{Gestures.GTransform})
  Gestures.Gesture.FireEvent(Gestures.GestureMetaData):
    name:
      CSharp:
      - id: Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
        name: FireEvent
        nameWithType: Gesture.FireEvent
        qualifiedName: Gestures.Gesture.FireEvent
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.GestureMetaData
        name: GestureMetaData
        nameWithType: GestureMetaData
        qualifiedName: Gestures.GestureMetaData
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
        name: FireEvent
        nameWithType: Gesture.FireEvent
        qualifiedName: Gestures.Gesture.FireEvent
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.GestureMetaData
        name: GestureMetaData
        nameWithType: GestureMetaData
        qualifiedName: Gestures.GestureMetaData
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.FireEvent(Gestures.GestureMetaData)
  Gestures.Gesture.AddEvent(UnityAction{Gestures.GestureMetaData}):
    name:
      CSharp:
      - id: Gestures.Gesture.AddEvent(UnityAction{Gestures.GestureMetaData})
        name: AddEvent
        nameWithType: Gesture.AddEvent
        qualifiedName: Gestures.Gesture.AddEvent
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: UnityAction`1
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.GestureMetaData
        name: GestureMetaData
        nameWithType: GestureMetaData
        qualifiedName: Gestures.GestureMetaData
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.AddEvent(UnityAction{Gestures.GestureMetaData})
        name: AddEvent
        nameWithType: Gesture.AddEvent
        qualifiedName: Gestures.Gesture.AddEvent
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: UnityAction`1
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.GestureMetaData
        name: GestureMetaData
        nameWithType: GestureMetaData
        qualifiedName: Gestures.GestureMetaData
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.AddEvent(UnityAction{Gestures.GestureMetaData})
  Gestures.Gesture.ClearEvents:
    name:
      CSharp:
      - id: Gestures.Gesture.ClearEvents
        name: ClearEvents
        nameWithType: Gesture.ClearEvents
        qualifiedName: Gestures.Gesture.ClearEvents
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.ClearEvents
        name: ClearEvents
        nameWithType: Gesture.ClearEvents
        qualifiedName: Gestures.Gesture.ClearEvents
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.ClearEvents
  Gestures.Gesture.SetNormalizer(Gestures.Normalizer):
    name:
      CSharp:
      - id: Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
        name: SetNormalizer
        nameWithType: Gesture.SetNormalizer
        qualifiedName: Gestures.Gesture.SetNormalizer
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.Normalizer
        name: Normalizer
        nameWithType: Normalizer
        qualifiedName: Gestures.Normalizer
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
        name: SetNormalizer
        nameWithType: Gesture.SetNormalizer
        qualifiedName: Gestures.Gesture.SetNormalizer
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.Normalizer
        name: Normalizer
        nameWithType: Normalizer
        qualifiedName: Gestures.Normalizer
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.SetNormalizer(Gestures.Normalizer)
  Gestures.Gesture.AddOnceCheck(Gestures.Check):
    name:
      CSharp:
      - id: Gestures.Gesture.AddOnceCheck(Gestures.Check)
        name: AddOnceCheck
        nameWithType: Gesture.AddOnceCheck
        qualifiedName: Gestures.Gesture.AddOnceCheck
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.AddOnceCheck(Gestures.Check)
        name: AddOnceCheck
        nameWithType: Gesture.AddOnceCheck
        qualifiedName: Gestures.Gesture.AddOnceCheck
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.AddOnceCheck(Gestures.Check)
  Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable{Gestures.Check}):
    name:
      CSharp:
      - id: Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
        name: AddOnceChecks
        nameWithType: Gesture.AddOnceChecks
        qualifiedName: Gestures.Gesture.AddOnceChecks
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
        name: AddOnceChecks
        nameWithType: Gesture.AddOnceChecks
        qualifiedName: Gestures.Gesture.AddOnceChecks
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.AddOnceChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
  Gestures.Gesture.AddAlwaysCheck(Gestures.Check):
    name:
      CSharp:
      - id: Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
        name: AddAlwaysCheck
        nameWithType: Gesture.AddAlwaysCheck
        qualifiedName: Gestures.Gesture.AddAlwaysCheck
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
        name: AddAlwaysCheck
        nameWithType: Gesture.AddAlwaysCheck
        qualifiedName: Gestures.Gesture.AddAlwaysCheck
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.AddAlwaysCheck(Gestures.Check)
  Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable{Gestures.Check}):
    name:
      CSharp:
      - id: Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
        name: AddAlwaysChecks
        nameWithType: Gesture.AddAlwaysChecks
        qualifiedName: Gestures.Gesture.AddAlwaysChecks
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
        name: AddAlwaysChecks
        nameWithType: Gesture.AddAlwaysChecks
        qualifiedName: Gestures.Gesture.AddAlwaysChecks
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.AddAlwaysChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
  Gestures.Gesture.AddSequentialCheck(Gestures.Check):
    name:
      CSharp:
      - id: Gestures.Gesture.AddSequentialCheck(Gestures.Check)
        name: AddSequentialCheck
        nameWithType: Gesture.AddSequentialCheck
        qualifiedName: Gestures.Gesture.AddSequentialCheck
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.AddSequentialCheck(Gestures.Check)
        name: AddSequentialCheck
        nameWithType: Gesture.AddSequentialCheck
        qualifiedName: Gestures.Gesture.AddSequentialCheck
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.AddSequentialCheck(Gestures.Check)
  Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable{Gestures.Check}):
    name:
      CSharp:
      - id: Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
        name: AddSequentialChecks
        nameWithType: Gesture.AddSequentialChecks
        qualifiedName: Gestures.Gesture.AddSequentialChecks
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
        name: AddSequentialChecks
        nameWithType: Gesture.AddSequentialChecks
        qualifiedName: Gestures.Gesture.AddSequentialChecks
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.AddSequentialChecks(System.Collections.Generic.IEnumerable{Gestures.Check})
  Gestures.Gesture.VisualizeGesture(Rect):
    name:
      CSharp:
      - id: Gestures.Gesture.VisualizeGesture(Rect)
        name: VisualizeGesture
        nameWithType: Gesture.VisualizeGesture
        qualifiedName: Gestures.Gesture.VisualizeGesture
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Gesture.VisualizeGesture(Rect)
        name: VisualizeGesture
        nameWithType: Gesture.VisualizeGesture
        qualifiedName: Gestures.Gesture.VisualizeGesture
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Gesture
    commentId: M:Gestures.Gesture.VisualizeGesture(Rect)
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  Gestures.CircleGesture.#ctor*:
    name:
      CSharp:
      - id: Gestures.CircleGesture.#ctor*
        name: CircleGesture
        nameWithType: CircleGesture.CircleGesture
        qualifiedName: Gestures.CircleGesture.CircleGesture
      VB:
      - id: Gestures.CircleGesture.#ctor*
        name: CircleGesture
        nameWithType: CircleGesture.CircleGesture
        qualifiedName: Gestures.CircleGesture.CircleGesture
    isDefinition: true
    commentId: Overload:Gestures.CircleGesture.#ctor
  Gestures.CircleGesture:
    name:
      CSharp:
      - id: Gestures.CircleGesture
        name: CircleGesture
        nameWithType: CircleGesture
        qualifiedName: Gestures.CircleGesture
      VB:
      - id: Gestures.CircleGesture
        name: CircleGesture
        nameWithType: CircleGesture
        qualifiedName: Gestures.CircleGesture
    isDefinition: true
    commentId: T:Gestures.CircleGesture
  Gestures.HeartGesture.#ctor*:
    name:
      CSharp:
      - id: Gestures.HeartGesture.#ctor*
        name: HeartGesture
        nameWithType: HeartGesture.HeartGesture
        qualifiedName: Gestures.HeartGesture.HeartGesture
      VB:
      - id: Gestures.HeartGesture.#ctor*
        name: HeartGesture
        nameWithType: HeartGesture.HeartGesture
        qualifiedName: Gestures.HeartGesture.HeartGesture
    isDefinition: true
    commentId: Overload:Gestures.HeartGesture.#ctor
  Gestures.HeartGesture:
    name:
      CSharp:
      - id: Gestures.HeartGesture
        name: HeartGesture
        nameWithType: HeartGesture
        qualifiedName: Gestures.HeartGesture
      VB:
      - id: Gestures.HeartGesture
        name: HeartGesture
        nameWithType: HeartGesture
        qualifiedName: Gestures.HeartGesture
    isDefinition: true
    commentId: T:Gestures.HeartGesture
  Gestures.SquareGesture.#ctor*:
    name:
      CSharp:
      - id: Gestures.SquareGesture.#ctor*
        name: SquareGesture
        nameWithType: SquareGesture.SquareGesture
        qualifiedName: Gestures.SquareGesture.SquareGesture
      VB:
      - id: Gestures.SquareGesture.#ctor*
        name: SquareGesture
        nameWithType: SquareGesture.SquareGesture
        qualifiedName: Gestures.SquareGesture.SquareGesture
    isDefinition: true
    commentId: Overload:Gestures.SquareGesture.#ctor
  Gestures.SquareGesture:
    name:
      CSharp:
      - id: Gestures.SquareGesture
        name: SquareGesture
        nameWithType: SquareGesture
        qualifiedName: Gestures.SquareGesture
      VB:
      - id: Gestures.SquareGesture
        name: SquareGesture
        nameWithType: SquareGesture
        qualifiedName: Gestures.SquareGesture
    isDefinition: true
    commentId: T:Gestures.SquareGesture
  Gestures.TriangleGesture.#ctor*:
    name:
      CSharp:
      - id: Gestures.TriangleGesture.#ctor*
        name: TriangleGesture
        nameWithType: TriangleGesture.TriangleGesture
        qualifiedName: Gestures.TriangleGesture.TriangleGesture
      VB:
      - id: Gestures.TriangleGesture.#ctor*
        name: TriangleGesture
        nameWithType: TriangleGesture.TriangleGesture
        qualifiedName: Gestures.TriangleGesture.TriangleGesture
    isDefinition: true
    commentId: Overload:Gestures.TriangleGesture.#ctor
  Gestures.TriangleGesture:
    name:
      CSharp:
      - id: Gestures.TriangleGesture
        name: TriangleGesture
        nameWithType: TriangleGesture
        qualifiedName: Gestures.TriangleGesture
      VB:
      - id: Gestures.TriangleGesture
        name: TriangleGesture
        nameWithType: TriangleGesture
        qualifiedName: Gestures.TriangleGesture
    isDefinition: true
    commentId: T:Gestures.TriangleGesture
  Gestures.Check:
    name:
      CSharp:
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      VB:
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
    isDefinition: true
    parent: Gestures
    commentId: T:Gestures.Check
  Vector3:
    name:
      CSharp:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Gestures.ArcCheck.ARC_ORIENTATION:
    name:
      CSharp:
      - id: Gestures.ArcCheck.ARC_ORIENTATION
        name: ArcCheck.ARC_ORIENTATION
        nameWithType: ArcCheck.ARC_ORIENTATION
        qualifiedName: Gestures.ArcCheck.ARC_ORIENTATION
      VB:
      - id: Gestures.ArcCheck.ARC_ORIENTATION
        name: ArcCheck.ARC_ORIENTATION
        nameWithType: ArcCheck.ARC_ORIENTATION
        qualifiedName: Gestures.ArcCheck.ARC_ORIENTATION
    isDefinition: true
    parent: Gestures
    commentId: T:Gestures.ArcCheck.ARC_ORIENTATION
  Gestures.ArcCheck.#ctor*:
    name:
      CSharp:
      - id: Gestures.ArcCheck.#ctor*
        name: ArcCheck
        nameWithType: ArcCheck.ArcCheck
        qualifiedName: Gestures.ArcCheck.ArcCheck
      VB:
      - id: Gestures.ArcCheck.#ctor*
        name: ArcCheck
        nameWithType: ArcCheck.ArcCheck
        qualifiedName: Gestures.ArcCheck.ArcCheck
    isDefinition: true
    commentId: Overload:Gestures.ArcCheck.#ctor
  Gestures.GTransform:
    name:
      CSharp:
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      VB:
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
    isDefinition: true
    parent: Gestures
    commentId: T:Gestures.GTransform
  Gestures.Check.CheckPasses(Gestures.GTransform):
    name:
      CSharp:
      - id: Gestures.Check.CheckPasses(Gestures.GTransform)
        name: CheckPasses
        nameWithType: Check.CheckPasses
        qualifiedName: Gestures.Check.CheckPasses
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Check.CheckPasses(Gestures.GTransform)
        name: CheckPasses
        nameWithType: Check.CheckPasses
        qualifiedName: Gestures.Check.CheckPasses
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Check
    commentId: M:Gestures.Check.CheckPasses(Gestures.GTransform)
  Gestures.ArcCheck.CheckPasses*:
    name:
      CSharp:
      - id: Gestures.ArcCheck.CheckPasses*
        name: CheckPasses
        nameWithType: ArcCheck.CheckPasses
        qualifiedName: Gestures.ArcCheck.CheckPasses
      VB:
      - id: Gestures.ArcCheck.CheckPasses*
        name: CheckPasses
        nameWithType: ArcCheck.CheckPasses
        qualifiedName: Gestures.ArcCheck.CheckPasses
    isDefinition: true
    commentId: Overload:Gestures.ArcCheck.CheckPasses
  Rect:
    name:
      CSharp:
      - id: Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      VB:
      - id: Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
    isDefinition: true
  Gestures.Check.VisualizeCheck(Rect):
    name:
      CSharp:
      - id: Gestures.Check.VisualizeCheck(Rect)
        name: VisualizeCheck
        nameWithType: Check.VisualizeCheck
        qualifiedName: Gestures.Check.VisualizeCheck
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Check.VisualizeCheck(Rect)
        name: VisualizeCheck
        nameWithType: Check.VisualizeCheck
        qualifiedName: Gestures.Check.VisualizeCheck
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Rect
        name: Rect
        nameWithType: Rect
        qualifiedName: Rect
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Check
    commentId: M:Gestures.Check.VisualizeCheck(Rect)
  Gestures.ArcCheck.VisualizeCheck*:
    name:
      CSharp:
      - id: Gestures.ArcCheck.VisualizeCheck*
        name: VisualizeCheck
        nameWithType: ArcCheck.VisualizeCheck
        qualifiedName: Gestures.ArcCheck.VisualizeCheck
      VB:
      - id: Gestures.ArcCheck.VisualizeCheck*
        name: VisualizeCheck
        nameWithType: ArcCheck.VisualizeCheck
        qualifiedName: Gestures.ArcCheck.VisualizeCheck
    isDefinition: true
    commentId: Overload:Gestures.ArcCheck.VisualizeCheck
  Gestures.ArcCheck:
    name:
      CSharp:
      - id: Gestures.ArcCheck
        name: ArcCheck
        nameWithType: ArcCheck
        qualifiedName: Gestures.ArcCheck
      VB:
      - id: Gestures.ArcCheck
        name: ArcCheck
        nameWithType: ArcCheck
        qualifiedName: Gestures.ArcCheck
    isDefinition: true
    commentId: T:Gestures.ArcCheck
  Gestures.Check.CheckPasses*:
    name:
      CSharp:
      - id: Gestures.Check.CheckPasses*
        name: CheckPasses
        nameWithType: Check.CheckPasses
        qualifiedName: Gestures.Check.CheckPasses
      VB:
      - id: Gestures.Check.CheckPasses*
        name: CheckPasses
        nameWithType: Check.CheckPasses
        qualifiedName: Gestures.Check.CheckPasses
    isDefinition: true
    commentId: Overload:Gestures.Check.CheckPasses
  Gestures.Check.VisualizeCheck*:
    name:
      CSharp:
      - id: Gestures.Check.VisualizeCheck*
        name: VisualizeCheck
        nameWithType: Check.VisualizeCheck
        qualifiedName: Gestures.Check.VisualizeCheck
      VB:
      - id: Gestures.Check.VisualizeCheck*
        name: VisualizeCheck
        nameWithType: Check.VisualizeCheck
        qualifiedName: Gestures.Check.VisualizeCheck
    isDefinition: true
    commentId: Overload:Gestures.Check.VisualizeCheck
  Gestures.LineCheck.#ctor*:
    name:
      CSharp:
      - id: Gestures.LineCheck.#ctor*
        name: LineCheck
        nameWithType: LineCheck.LineCheck
        qualifiedName: Gestures.LineCheck.LineCheck
      VB:
      - id: Gestures.LineCheck.#ctor*
        name: LineCheck
        nameWithType: LineCheck.LineCheck
        qualifiedName: Gestures.LineCheck.LineCheck
    isDefinition: true
    commentId: Overload:Gestures.LineCheck.#ctor
  Gestures.LineCheck.CheckPasses*:
    name:
      CSharp:
      - id: Gestures.LineCheck.CheckPasses*
        name: CheckPasses
        nameWithType: LineCheck.CheckPasses
        qualifiedName: Gestures.LineCheck.CheckPasses
      VB:
      - id: Gestures.LineCheck.CheckPasses*
        name: CheckPasses
        nameWithType: LineCheck.CheckPasses
        qualifiedName: Gestures.LineCheck.CheckPasses
    isDefinition: true
    commentId: Overload:Gestures.LineCheck.CheckPasses
  Gestures.LineCheck.GetClosestPointOnLineSegment*:
    name:
      CSharp:
      - id: Gestures.LineCheck.GetClosestPointOnLineSegment*
        name: GetClosestPointOnLineSegment
        nameWithType: LineCheck.GetClosestPointOnLineSegment
        qualifiedName: Gestures.LineCheck.GetClosestPointOnLineSegment
      VB:
      - id: Gestures.LineCheck.GetClosestPointOnLineSegment*
        name: GetClosestPointOnLineSegment
        nameWithType: LineCheck.GetClosestPointOnLineSegment
        qualifiedName: Gestures.LineCheck.GetClosestPointOnLineSegment
    isDefinition: true
    commentId: Overload:Gestures.LineCheck.GetClosestPointOnLineSegment
  Gestures.LineCheck.VisualizeCheck*:
    name:
      CSharp:
      - id: Gestures.LineCheck.VisualizeCheck*
        name: VisualizeCheck
        nameWithType: LineCheck.VisualizeCheck
        qualifiedName: Gestures.LineCheck.VisualizeCheck
      VB:
      - id: Gestures.LineCheck.VisualizeCheck*
        name: VisualizeCheck
        nameWithType: LineCheck.VisualizeCheck
        qualifiedName: Gestures.LineCheck.VisualizeCheck
    isDefinition: true
    commentId: Overload:Gestures.LineCheck.VisualizeCheck
  Gestures.LineCheck:
    name:
      CSharp:
      - id: Gestures.LineCheck
        name: LineCheck
        nameWithType: LineCheck
        qualifiedName: Gestures.LineCheck
      VB:
      - id: Gestures.LineCheck
        name: LineCheck
        nameWithType: LineCheck
        qualifiedName: Gestures.LineCheck
    isDefinition: true
    commentId: T:Gestures.LineCheck
  Gestures.RadiusCheck.#ctor*:
    name:
      CSharp:
      - id: Gestures.RadiusCheck.#ctor*
        name: RadiusCheck
        nameWithType: RadiusCheck.RadiusCheck
        qualifiedName: Gestures.RadiusCheck.RadiusCheck
      VB:
      - id: Gestures.RadiusCheck.#ctor*
        name: RadiusCheck
        nameWithType: RadiusCheck.RadiusCheck
        qualifiedName: Gestures.RadiusCheck.RadiusCheck
    isDefinition: true
    commentId: Overload:Gestures.RadiusCheck.#ctor
  Gestures.RadiusCheck.CheckPasses*:
    name:
      CSharp:
      - id: Gestures.RadiusCheck.CheckPasses*
        name: CheckPasses
        nameWithType: RadiusCheck.CheckPasses
        qualifiedName: Gestures.RadiusCheck.CheckPasses
      VB:
      - id: Gestures.RadiusCheck.CheckPasses*
        name: CheckPasses
        nameWithType: RadiusCheck.CheckPasses
        qualifiedName: Gestures.RadiusCheck.CheckPasses
    isDefinition: true
    commentId: Overload:Gestures.RadiusCheck.CheckPasses
  Gestures.RadiusCheck.VisualizeCheck*:
    name:
      CSharp:
      - id: Gestures.RadiusCheck.VisualizeCheck*
        name: VisualizeCheck
        nameWithType: RadiusCheck.VisualizeCheck
        qualifiedName: Gestures.RadiusCheck.VisualizeCheck
      VB:
      - id: Gestures.RadiusCheck.VisualizeCheck*
        name: VisualizeCheck
        nameWithType: RadiusCheck.VisualizeCheck
        qualifiedName: Gestures.RadiusCheck.VisualizeCheck
    isDefinition: true
    commentId: Overload:Gestures.RadiusCheck.VisualizeCheck
  Gestures.RadiusCheck:
    name:
      CSharp:
      - id: Gestures.RadiusCheck
        name: RadiusCheck
        nameWithType: RadiusCheck
        qualifiedName: Gestures.RadiusCheck
      VB:
      - id: Gestures.RadiusCheck
        name: RadiusCheck
        nameWithType: RadiusCheck
        qualifiedName: Gestures.RadiusCheck
    isDefinition: true
    commentId: T:Gestures.RadiusCheck
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Gestures.SpeedCheck.#ctor*:
    name:
      CSharp:
      - id: Gestures.SpeedCheck.#ctor*
        name: SpeedCheck
        nameWithType: SpeedCheck.SpeedCheck
        qualifiedName: Gestures.SpeedCheck.SpeedCheck
      VB:
      - id: Gestures.SpeedCheck.#ctor*
        name: SpeedCheck
        nameWithType: SpeedCheck.SpeedCheck
        qualifiedName: Gestures.SpeedCheck.SpeedCheck
    isDefinition: true
    commentId: Overload:Gestures.SpeedCheck.#ctor
  Gestures.SpeedCheck.CheckPasses*:
    name:
      CSharp:
      - id: Gestures.SpeedCheck.CheckPasses*
        name: CheckPasses
        nameWithType: SpeedCheck.CheckPasses
        qualifiedName: Gestures.SpeedCheck.CheckPasses
      VB:
      - id: Gestures.SpeedCheck.CheckPasses*
        name: CheckPasses
        nameWithType: SpeedCheck.CheckPasses
        qualifiedName: Gestures.SpeedCheck.CheckPasses
    isDefinition: true
    commentId: Overload:Gestures.SpeedCheck.CheckPasses
  Gestures.SpeedCheck.VisualizeCheck*:
    name:
      CSharp:
      - id: Gestures.SpeedCheck.VisualizeCheck*
        name: VisualizeCheck
        nameWithType: SpeedCheck.VisualizeCheck
        qualifiedName: Gestures.SpeedCheck.VisualizeCheck
      VB:
      - id: Gestures.SpeedCheck.VisualizeCheck*
        name: VisualizeCheck
        nameWithType: SpeedCheck.VisualizeCheck
        qualifiedName: Gestures.SpeedCheck.VisualizeCheck
    isDefinition: true
    commentId: Overload:Gestures.SpeedCheck.VisualizeCheck
  Gestures.SpeedCheck:
    name:
      CSharp:
      - id: Gestures.SpeedCheck
        name: SpeedCheck
        nameWithType: SpeedCheck
        qualifiedName: Gestures.SpeedCheck
      VB:
      - id: Gestures.SpeedCheck
        name: SpeedCheck
        nameWithType: SpeedCheck
        qualifiedName: Gestures.SpeedCheck
    isDefinition: true
    commentId: T:Gestures.SpeedCheck
  Gestures.IController.QueryGTransform*:
    name:
      CSharp:
      - id: Gestures.IController.QueryGTransform*
        name: QueryGTransform
        nameWithType: IController.QueryGTransform
        qualifiedName: Gestures.IController.QueryGTransform
      VB:
      - id: Gestures.IController.QueryGTransform*
        name: QueryGTransform
        nameWithType: IController.QueryGTransform
        qualifiedName: Gestures.IController.QueryGTransform
    isDefinition: true
    commentId: Overload:Gestures.IController.QueryGTransform
  Gestures.IController.GestureActive*:
    name:
      CSharp:
      - id: Gestures.IController.GestureActive*
        name: GestureActive
        nameWithType: IController.GestureActive
        qualifiedName: Gestures.IController.GestureActive
      VB:
      - id: Gestures.IController.GestureActive*
        name: GestureActive
        nameWithType: IController.GestureActive
        qualifiedName: Gestures.IController.GestureActive
    isDefinition: true
    commentId: Overload:Gestures.IController.GestureActive
  Gestures.IController:
    name:
      CSharp:
      - id: Gestures.IController
        name: IController
        nameWithType: IController
        qualifiedName: Gestures.IController
      VB:
      - id: Gestures.IController
        name: IController
        nameWithType: IController
        qualifiedName: Gestures.IController
    isDefinition: true
    parent: Gestures
    commentId: T:Gestures.IController
  OVRInput.Controller:
    name:
      CSharp:
      - id: OVRInput.Controller
        name: OVRInput.Controller
        nameWithType: OVRInput.Controller
        qualifiedName: OVRInput.Controller
        isExternal: true
      VB:
      - id: OVRInput.Controller
        name: OVRInput.Controller
        nameWithType: OVRInput.Controller
        qualifiedName: OVRInput.Controller
        isExternal: true
    isDefinition: true
    commentId: '!:OVRInput.Controller'
  OVRInput.Button:
    name:
      CSharp:
      - id: OVRInput.Button
        name: OVRInput.Button
        nameWithType: OVRInput.Button
        qualifiedName: OVRInput.Button
        isExternal: true
      VB:
      - id: OVRInput.Button
        name: OVRInput.Button
        nameWithType: OVRInput.Button
        qualifiedName: OVRInput.Button
        isExternal: true
    isDefinition: true
    commentId: '!:OVRInput.Button'
  Gestures.IController.QueryGTransform:
    name:
      CSharp:
      - id: Gestures.IController.QueryGTransform
        name: QueryGTransform
        nameWithType: IController.QueryGTransform
        qualifiedName: Gestures.IController.QueryGTransform
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.IController.QueryGTransform
        name: QueryGTransform
        nameWithType: IController.QueryGTransform
        qualifiedName: Gestures.IController.QueryGTransform
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.IController
    commentId: M:Gestures.IController.QueryGTransform
  Gestures.TouchController.QueryGTransform*:
    name:
      CSharp:
      - id: Gestures.TouchController.QueryGTransform*
        name: QueryGTransform
        nameWithType: TouchController.QueryGTransform
        qualifiedName: Gestures.TouchController.QueryGTransform
      VB:
      - id: Gestures.TouchController.QueryGTransform*
        name: QueryGTransform
        nameWithType: TouchController.QueryGTransform
        qualifiedName: Gestures.TouchController.QueryGTransform
    isDefinition: true
    commentId: Overload:Gestures.TouchController.QueryGTransform
  Gestures.IController.GestureActive:
    name:
      CSharp:
      - id: Gestures.IController.GestureActive
        name: GestureActive
        nameWithType: IController.GestureActive
        qualifiedName: Gestures.IController.GestureActive
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.IController.GestureActive
        name: GestureActive
        nameWithType: IController.GestureActive
        qualifiedName: Gestures.IController.GestureActive
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.IController
    commentId: M:Gestures.IController.GestureActive
  Gestures.TouchController.GestureActive*:
    name:
      CSharp:
      - id: Gestures.TouchController.GestureActive*
        name: GestureActive
        nameWithType: TouchController.GestureActive
        qualifiedName: Gestures.TouchController.GestureActive
      VB:
      - id: Gestures.TouchController.GestureActive*
        name: GestureActive
        nameWithType: TouchController.GestureActive
        qualifiedName: Gestures.TouchController.GestureActive
    isDefinition: true
    commentId: Overload:Gestures.TouchController.GestureActive
  Gestures.TouchController:
    name:
      CSharp:
      - id: Gestures.TouchController
        name: TouchController
        nameWithType: TouchController
        qualifiedName: Gestures.TouchController
      VB:
      - id: Gestures.TouchController
        name: TouchController
        nameWithType: TouchController
        qualifiedName: Gestures.TouchController
    isDefinition: true
    commentId: T:Gestures.TouchController
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{Gestures.Check}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Gestures.Check}
  Gestures.Gesture.isEnabled*:
    name:
      CSharp:
      - id: Gestures.Gesture.isEnabled*
        name: isEnabled
        nameWithType: Gesture.isEnabled
        qualifiedName: Gestures.Gesture.isEnabled
      VB:
      - id: Gestures.Gesture.isEnabled*
        name: isEnabled
        nameWithType: Gesture.isEnabled
        qualifiedName: Gestures.Gesture.isEnabled
    isDefinition: true
    commentId: Overload:Gestures.Gesture.isEnabled
  Gestures.Normalizer:
    name:
      CSharp:
      - id: Gestures.Normalizer
        name: Normalizer
        nameWithType: Normalizer
        qualifiedName: Gestures.Normalizer
      VB:
      - id: Gestures.Normalizer
        name: Normalizer
        nameWithType: Normalizer
        qualifiedName: Gestures.Normalizer
    isDefinition: true
    parent: Gestures
    commentId: T:Gestures.Normalizer
  UnityEvent`1:
    name:
      CSharp:
      - id: UnityEvent`1
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: UnityEvent`1
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  UnityEvent{Gestures.GestureMetaData}:
    name:
      CSharp:
      - id: UnityEvent`1
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.GestureMetaData
        name: GestureMetaData
        nameWithType: GestureMetaData
        qualifiedName: Gestures.GestureMetaData
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: UnityEvent`1
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.GestureMetaData
        name: GestureMetaData
        nameWithType: GestureMetaData
        qualifiedName: Gestures.GestureMetaData
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UnityEvent`1
    commentId: '!:UnityEvent{Gestures.GestureMetaData}'
  Gestures.Gesture.gestureCompleteConfidence*:
    name:
      CSharp:
      - id: Gestures.Gesture.gestureCompleteConfidence*
        name: gestureCompleteConfidence
        nameWithType: Gesture.gestureCompleteConfidence
        qualifiedName: Gestures.Gesture.gestureCompleteConfidence
      VB:
      - id: Gestures.Gesture.gestureCompleteConfidence*
        name: gestureCompleteConfidence
        nameWithType: Gesture.gestureCompleteConfidence
        qualifiedName: Gestures.Gesture.gestureCompleteConfidence
    isDefinition: true
    commentId: Overload:Gestures.Gesture.gestureCompleteConfidence
  Gestures.Gesture.#ctor*:
    name:
      CSharp:
      - id: Gestures.Gesture.#ctor*
        name: Gesture
        nameWithType: Gesture.Gesture
        qualifiedName: Gestures.Gesture.Gesture
      VB:
      - id: Gestures.Gesture.#ctor*
        name: Gesture
        nameWithType: Gesture.Gesture
        qualifiedName: Gestures.Gesture.Gesture
    isDefinition: true
    commentId: Overload:Gestures.Gesture.#ctor
  System.Collections.Generic.List{Gestures.GTransform}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Gestures.GTransform}
  Gestures.Gesture.GestureCompleted*:
    name:
      CSharp:
      - id: Gestures.Gesture.GestureCompleted*
        name: GestureCompleted
        nameWithType: Gesture.GestureCompleted
        qualifiedName: Gestures.Gesture.GestureCompleted
      VB:
      - id: Gestures.Gesture.GestureCompleted*
        name: GestureCompleted
        nameWithType: Gesture.GestureCompleted
        qualifiedName: Gestures.Gesture.GestureCompleted
    isDefinition: true
    commentId: Overload:Gestures.Gesture.GestureCompleted
  Gestures.GestureMetaData:
    name:
      CSharp:
      - id: Gestures.GestureMetaData
        name: GestureMetaData
        nameWithType: GestureMetaData
        qualifiedName: Gestures.GestureMetaData
      VB:
      - id: Gestures.GestureMetaData
        name: GestureMetaData
        nameWithType: GestureMetaData
        qualifiedName: Gestures.GestureMetaData
    isDefinition: true
    parent: Gestures
    commentId: T:Gestures.GestureMetaData
  Gestures.Gesture.FireEvent*:
    name:
      CSharp:
      - id: Gestures.Gesture.FireEvent*
        name: FireEvent
        nameWithType: Gesture.FireEvent
        qualifiedName: Gestures.Gesture.FireEvent
      VB:
      - id: Gestures.Gesture.FireEvent*
        name: FireEvent
        nameWithType: Gesture.FireEvent
        qualifiedName: Gestures.Gesture.FireEvent
    isDefinition: true
    commentId: Overload:Gestures.Gesture.FireEvent
  UnityAction`1:
    name:
      CSharp:
      - id: UnityAction`1
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: UnityAction`1
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  UnityAction{Gestures.GestureMetaData}:
    name:
      CSharp:
      - id: UnityAction`1
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.GestureMetaData
        name: GestureMetaData
        nameWithType: GestureMetaData
        qualifiedName: Gestures.GestureMetaData
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: UnityAction`1
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.GestureMetaData
        name: GestureMetaData
        nameWithType: GestureMetaData
        qualifiedName: Gestures.GestureMetaData
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: UnityAction`1
    commentId: '!:UnityAction{Gestures.GestureMetaData}'
  Gestures.Gesture.AddEvent*:
    name:
      CSharp:
      - id: Gestures.Gesture.AddEvent*
        name: AddEvent
        nameWithType: Gesture.AddEvent
        qualifiedName: Gestures.Gesture.AddEvent
      VB:
      - id: Gestures.Gesture.AddEvent*
        name: AddEvent
        nameWithType: Gesture.AddEvent
        qualifiedName: Gestures.Gesture.AddEvent
    isDefinition: true
    commentId: Overload:Gestures.Gesture.AddEvent
  Gestures.Gesture.ClearEvents*:
    name:
      CSharp:
      - id: Gestures.Gesture.ClearEvents*
        name: ClearEvents
        nameWithType: Gesture.ClearEvents
        qualifiedName: Gestures.Gesture.ClearEvents
      VB:
      - id: Gestures.Gesture.ClearEvents*
        name: ClearEvents
        nameWithType: Gesture.ClearEvents
        qualifiedName: Gestures.Gesture.ClearEvents
    isDefinition: true
    commentId: Overload:Gestures.Gesture.ClearEvents
  Gestures.Gesture.SetNormalizer*:
    name:
      CSharp:
      - id: Gestures.Gesture.SetNormalizer*
        name: SetNormalizer
        nameWithType: Gesture.SetNormalizer
        qualifiedName: Gestures.Gesture.SetNormalizer
      VB:
      - id: Gestures.Gesture.SetNormalizer*
        name: SetNormalizer
        nameWithType: Gesture.SetNormalizer
        qualifiedName: Gestures.Gesture.SetNormalizer
    isDefinition: true
    commentId: Overload:Gestures.Gesture.SetNormalizer
  Gestures.Gesture.AddOnceCheck*:
    name:
      CSharp:
      - id: Gestures.Gesture.AddOnceCheck*
        name: AddOnceCheck
        nameWithType: Gesture.AddOnceCheck
        qualifiedName: Gestures.Gesture.AddOnceCheck
      VB:
      - id: Gestures.Gesture.AddOnceCheck*
        name: AddOnceCheck
        nameWithType: Gesture.AddOnceCheck
        qualifiedName: Gestures.Gesture.AddOnceCheck
    isDefinition: true
    commentId: Overload:Gestures.Gesture.AddOnceCheck
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic.IEnumerable{Gestures.Check}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.Check
        name: Check
        nameWithType: Check
        qualifiedName: Gestures.Check
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Gestures.Check}
  Gestures.Gesture.AddOnceChecks*:
    name:
      CSharp:
      - id: Gestures.Gesture.AddOnceChecks*
        name: AddOnceChecks
        nameWithType: Gesture.AddOnceChecks
        qualifiedName: Gestures.Gesture.AddOnceChecks
      VB:
      - id: Gestures.Gesture.AddOnceChecks*
        name: AddOnceChecks
        nameWithType: Gesture.AddOnceChecks
        qualifiedName: Gestures.Gesture.AddOnceChecks
    isDefinition: true
    commentId: Overload:Gestures.Gesture.AddOnceChecks
  Gestures.Gesture.AddAlwaysCheck*:
    name:
      CSharp:
      - id: Gestures.Gesture.AddAlwaysCheck*
        name: AddAlwaysCheck
        nameWithType: Gesture.AddAlwaysCheck
        qualifiedName: Gestures.Gesture.AddAlwaysCheck
      VB:
      - id: Gestures.Gesture.AddAlwaysCheck*
        name: AddAlwaysCheck
        nameWithType: Gesture.AddAlwaysCheck
        qualifiedName: Gestures.Gesture.AddAlwaysCheck
    isDefinition: true
    commentId: Overload:Gestures.Gesture.AddAlwaysCheck
  Gestures.Gesture.AddAlwaysChecks*:
    name:
      CSharp:
      - id: Gestures.Gesture.AddAlwaysChecks*
        name: AddAlwaysChecks
        nameWithType: Gesture.AddAlwaysChecks
        qualifiedName: Gestures.Gesture.AddAlwaysChecks
      VB:
      - id: Gestures.Gesture.AddAlwaysChecks*
        name: AddAlwaysChecks
        nameWithType: Gesture.AddAlwaysChecks
        qualifiedName: Gestures.Gesture.AddAlwaysChecks
    isDefinition: true
    commentId: Overload:Gestures.Gesture.AddAlwaysChecks
  Gestures.Gesture.AddSequentialCheck*:
    name:
      CSharp:
      - id: Gestures.Gesture.AddSequentialCheck*
        name: AddSequentialCheck
        nameWithType: Gesture.AddSequentialCheck
        qualifiedName: Gestures.Gesture.AddSequentialCheck
      VB:
      - id: Gestures.Gesture.AddSequentialCheck*
        name: AddSequentialCheck
        nameWithType: Gesture.AddSequentialCheck
        qualifiedName: Gestures.Gesture.AddSequentialCheck
    isDefinition: true
    commentId: Overload:Gestures.Gesture.AddSequentialCheck
  Gestures.Gesture.AddSequentialChecks*:
    name:
      CSharp:
      - id: Gestures.Gesture.AddSequentialChecks*
        name: AddSequentialChecks
        nameWithType: Gesture.AddSequentialChecks
        qualifiedName: Gestures.Gesture.AddSequentialChecks
      VB:
      - id: Gestures.Gesture.AddSequentialChecks*
        name: AddSequentialChecks
        nameWithType: Gesture.AddSequentialChecks
        qualifiedName: Gestures.Gesture.AddSequentialChecks
    isDefinition: true
    commentId: Overload:Gestures.Gesture.AddSequentialChecks
  Gestures.Gesture.VisualizeGesture*:
    name:
      CSharp:
      - id: Gestures.Gesture.VisualizeGesture*
        name: VisualizeGesture
        nameWithType: Gesture.VisualizeGesture
        qualifiedName: Gestures.Gesture.VisualizeGesture
      VB:
      - id: Gestures.Gesture.VisualizeGesture*
        name: VisualizeGesture
        nameWithType: Gesture.VisualizeGesture
        qualifiedName: Gestures.Gesture.VisualizeGesture
    isDefinition: true
    commentId: Overload:Gestures.Gesture.VisualizeGesture
  Gestures.GestureEvent.#ctor*:
    name:
      CSharp:
      - id: Gestures.GestureEvent.#ctor*
        name: GestureEvent
        nameWithType: GestureEvent.GestureEvent
        qualifiedName: Gestures.GestureEvent.GestureEvent
      VB:
      - id: Gestures.GestureEvent.#ctor*
        name: GestureEvent
        nameWithType: GestureEvent.GestureEvent
        qualifiedName: Gestures.GestureEvent.GestureEvent
    isDefinition: true
    commentId: Overload:Gestures.GestureEvent.#ctor
  Gestures.GestureEvent:
    name:
      CSharp:
      - id: Gestures.GestureEvent
        name: GestureEvent
        nameWithType: GestureEvent
        qualifiedName: Gestures.GestureEvent
      VB:
      - id: Gestures.GestureEvent
        name: GestureEvent
        nameWithType: GestureEvent
        qualifiedName: Gestures.GestureEvent
    isDefinition: true
    commentId: T:Gestures.GestureEvent
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Gestures.GestureMetaData.GetGestureMetaData*:
    name:
      CSharp:
      - id: Gestures.GestureMetaData.GetGestureMetaData*
        name: GetGestureMetaData
        nameWithType: GestureMetaData.GetGestureMetaData
        qualifiedName: Gestures.GestureMetaData.GetGestureMetaData
      VB:
      - id: Gestures.GestureMetaData.GetGestureMetaData*
        name: GetGestureMetaData
        nameWithType: GestureMetaData.GetGestureMetaData
        qualifiedName: Gestures.GestureMetaData.GetGestureMetaData
    isDefinition: true
    commentId: Overload:Gestures.GestureMetaData.GetGestureMetaData
  TrackerSetup:
    commentId: T:TrackerSetup
  LineRenderer:
    name:
      CSharp:
      - id: LineRenderer
        name: LineRenderer
        nameWithType: LineRenderer
        qualifiedName: LineRenderer
        isExternal: true
      VB:
      - id: LineRenderer
        name: LineRenderer
        nameWithType: LineRenderer
        qualifiedName: LineRenderer
        isExternal: true
    isDefinition: true
    commentId: '!:LineRenderer'
  System.Collections.Generic.Dictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Dictionary`2
  System.Collections.Generic.Dictionary{System.String,Gestures.Gesture}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Gestures.Gesture
        name: Gesture
        nameWithType: Gesture
        qualifiedName: Gestures.Gesture
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Gestures.Gesture
        name: Gesture
        nameWithType: Gesture
        qualifiedName: Gestures.Gesture
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,Gestures.Gesture}
  Gestures.GestureMonitor.GetGestureMap*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.GetGestureMap*
        name: GetGestureMap
        nameWithType: GestureMonitor.GetGestureMap
        qualifiedName: Gestures.GestureMonitor.GetGestureMap
      VB:
      - id: Gestures.GestureMonitor.GetGestureMap*
        name: GetGestureMap
        nameWithType: GestureMonitor.GetGestureMap
        qualifiedName: Gestures.GestureMonitor.GetGestureMap
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.GetGestureMap
  Gestures.GestureMonitor.GetViewNormalizer*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.GetViewNormalizer*
        name: GetViewNormalizer
        nameWithType: GestureMonitor.GetViewNormalizer
        qualifiedName: Gestures.GestureMonitor.GetViewNormalizer
      VB:
      - id: Gestures.GestureMonitor.GetViewNormalizer*
        name: GetViewNormalizer
        nameWithType: GestureMonitor.GetViewNormalizer
        qualifiedName: Gestures.GestureMonitor.GetViewNormalizer
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.GetViewNormalizer
  Gestures.GTransformBuffer:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer
        name: GTransformBuffer
        nameWithType: GTransformBuffer
        qualifiedName: Gestures.GTransformBuffer
      VB:
      - id: Gestures.GTransformBuffer
        name: GTransformBuffer
        nameWithType: GTransformBuffer
        qualifiedName: Gestures.GTransformBuffer
    isDefinition: true
    parent: Gestures
    commentId: T:Gestures.GTransformBuffer
  Gestures.GestureMonitor.GetDataBuffer*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.GetDataBuffer*
        name: GetDataBuffer
        nameWithType: GestureMonitor.GetDataBuffer
        qualifiedName: Gestures.GestureMonitor.GetDataBuffer
      VB:
      - id: Gestures.GestureMonitor.GetDataBuffer*
        name: GetDataBuffer
        nameWithType: GestureMonitor.GetDataBuffer
        qualifiedName: Gestures.GestureMonitor.GetDataBuffer
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.GetDataBuffer
  Gestures.GestureMonitor.AddGesture*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.AddGesture*
        name: AddGesture
        nameWithType: GestureMonitor.AddGesture
        qualifiedName: Gestures.GestureMonitor.AddGesture
      VB:
      - id: Gestures.GestureMonitor.AddGesture*
        name: AddGesture
        nameWithType: GestureMonitor.AddGesture
        qualifiedName: Gestures.GestureMonitor.AddGesture
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.AddGesture
  Gestures.GestureMonitor.SetTrackGesture*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.SetTrackGesture*
        name: SetTrackGesture
        nameWithType: GestureMonitor.SetTrackGesture
        qualifiedName: Gestures.GestureMonitor.SetTrackGesture
      VB:
      - id: Gestures.GestureMonitor.SetTrackGesture*
        name: SetTrackGesture
        nameWithType: GestureMonitor.SetTrackGesture
        qualifiedName: Gestures.GestureMonitor.SetTrackGesture
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.SetTrackGesture
  System.Collections.Generic.List{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.String}
  Gestures.GestureMonitor.SetTrackAllGestures*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.SetTrackAllGestures*
        name: SetTrackAllGestures
        nameWithType: GestureMonitor.SetTrackAllGestures
        qualifiedName: Gestures.GestureMonitor.SetTrackAllGestures
      VB:
      - id: Gestures.GestureMonitor.SetTrackAllGestures*
        name: SetTrackAllGestures
        nameWithType: GestureMonitor.SetTrackAllGestures
        qualifiedName: Gestures.GestureMonitor.SetTrackAllGestures
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.SetTrackAllGestures
  Gestures.GestureMonitor.AddGestureCompleteCallback*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.AddGestureCompleteCallback*
        name: AddGestureCompleteCallback
        nameWithType: GestureMonitor.AddGestureCompleteCallback
        qualifiedName: Gestures.GestureMonitor.AddGestureCompleteCallback
      VB:
      - id: Gestures.GestureMonitor.AddGestureCompleteCallback*
        name: AddGestureCompleteCallback
        nameWithType: GestureMonitor.AddGestureCompleteCallback
        qualifiedName: Gestures.GestureMonitor.AddGestureCompleteCallback
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.AddGestureCompleteCallback
  Gestures.GestureMonitor.RemoveGestureCompleteCallback*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.RemoveGestureCompleteCallback*
        name: RemoveGestureCompleteCallback
        nameWithType: GestureMonitor.RemoveGestureCompleteCallback
        qualifiedName: Gestures.GestureMonitor.RemoveGestureCompleteCallback
      VB:
      - id: Gestures.GestureMonitor.RemoveGestureCompleteCallback*
        name: RemoveGestureCompleteCallback
        nameWithType: GestureMonitor.RemoveGestureCompleteCallback
        qualifiedName: Gestures.GestureMonitor.RemoveGestureCompleteCallback
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.RemoveGestureCompleteCallback
  Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks*
        name: RemoveAllGestureCompleteCallbacks
        nameWithType: GestureMonitor.RemoveAllGestureCompleteCallbacks
        qualifiedName: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks
      VB:
      - id: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks*
        name: RemoveAllGestureCompleteCallbacks
        nameWithType: GestureMonitor.RemoveAllGestureCompleteCallbacks
        qualifiedName: Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.RemoveAllGestureCompleteCallbacks
  Gestures.GestureMonitor.AddGestureFailedCallback*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.AddGestureFailedCallback*
        name: AddGestureFailedCallback
        nameWithType: GestureMonitor.AddGestureFailedCallback
        qualifiedName: Gestures.GestureMonitor.AddGestureFailedCallback
      VB:
      - id: Gestures.GestureMonitor.AddGestureFailedCallback*
        name: AddGestureFailedCallback
        nameWithType: GestureMonitor.AddGestureFailedCallback
        qualifiedName: Gestures.GestureMonitor.AddGestureFailedCallback
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.AddGestureFailedCallback
  Gestures.GestureMonitor.RemoveGestureFailedCallback*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.RemoveGestureFailedCallback*
        name: RemoveGestureFailedCallback
        nameWithType: GestureMonitor.RemoveGestureFailedCallback
        qualifiedName: Gestures.GestureMonitor.RemoveGestureFailedCallback
      VB:
      - id: Gestures.GestureMonitor.RemoveGestureFailedCallback*
        name: RemoveGestureFailedCallback
        nameWithType: GestureMonitor.RemoveGestureFailedCallback
        qualifiedName: Gestures.GestureMonitor.RemoveGestureFailedCallback
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.RemoveGestureFailedCallback
  Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks*
        name: RemoveAllGestureFailedCallbacks
        nameWithType: GestureMonitor.RemoveAllGestureFailedCallbacks
        qualifiedName: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks
      VB:
      - id: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks*
        name: RemoveAllGestureFailedCallbacks
        nameWithType: GestureMonitor.RemoveAllGestureFailedCallbacks
        qualifiedName: Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.RemoveAllGestureFailedCallbacks
  UnityAction:
    name:
      CSharp:
      - id: UnityAction
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
      VB:
      - id: UnityAction
        name: UnityAction
        nameWithType: UnityAction
        qualifiedName: UnityAction
        isExternal: true
    isDefinition: true
  Gestures.GestureMonitor.AddGestureStartCallback*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.AddGestureStartCallback*
        name: AddGestureStartCallback
        nameWithType: GestureMonitor.AddGestureStartCallback
        qualifiedName: Gestures.GestureMonitor.AddGestureStartCallback
      VB:
      - id: Gestures.GestureMonitor.AddGestureStartCallback*
        name: AddGestureStartCallback
        nameWithType: GestureMonitor.AddGestureStartCallback
        qualifiedName: Gestures.GestureMonitor.AddGestureStartCallback
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.AddGestureStartCallback
  Gestures.GestureMonitor.RemoveGestureStartCallback*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.RemoveGestureStartCallback*
        name: RemoveGestureStartCallback
        nameWithType: GestureMonitor.RemoveGestureStartCallback
        qualifiedName: Gestures.GestureMonitor.RemoveGestureStartCallback
      VB:
      - id: Gestures.GestureMonitor.RemoveGestureStartCallback*
        name: RemoveGestureStartCallback
        nameWithType: GestureMonitor.RemoveGestureStartCallback
        qualifiedName: Gestures.GestureMonitor.RemoveGestureStartCallback
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.RemoveGestureStartCallback
  Gestures.GestureMonitor.RemoveAllGestureStartCallbacks*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks*
        name: RemoveAllGestureStartCallbacks
        nameWithType: GestureMonitor.RemoveAllGestureStartCallbacks
        qualifiedName: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks
      VB:
      - id: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks*
        name: RemoveAllGestureStartCallbacks
        nameWithType: GestureMonitor.RemoveAllGestureStartCallbacks
        qualifiedName: Gestures.GestureMonitor.RemoveAllGestureStartCallbacks
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.RemoveAllGestureStartCallbacks
  Gestures.GestureMonitor.SetMaxBufferSize*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.SetMaxBufferSize*
        name: SetMaxBufferSize
        nameWithType: GestureMonitor.SetMaxBufferSize
        qualifiedName: Gestures.GestureMonitor.SetMaxBufferSize
      VB:
      - id: Gestures.GestureMonitor.SetMaxBufferSize*
        name: SetMaxBufferSize
        nameWithType: GestureMonitor.SetMaxBufferSize
        qualifiedName: Gestures.GestureMonitor.SetMaxBufferSize
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.SetMaxBufferSize
  Gestures.GestureMonitor.SetBufferWrap*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.SetBufferWrap*
        name: SetBufferWrap
        nameWithType: GestureMonitor.SetBufferWrap
        qualifiedName: Gestures.GestureMonitor.SetBufferWrap
      VB:
      - id: Gestures.GestureMonitor.SetBufferWrap*
        name: SetBufferWrap
        nameWithType: GestureMonitor.SetBufferWrap
        qualifiedName: Gestures.GestureMonitor.SetBufferWrap
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.SetBufferWrap
  Gestures.GestureMonitor.ClearBuffer*:
    name:
      CSharp:
      - id: Gestures.GestureMonitor.ClearBuffer*
        name: ClearBuffer
        nameWithType: GestureMonitor.ClearBuffer
        qualifiedName: Gestures.GestureMonitor.ClearBuffer
      VB:
      - id: Gestures.GestureMonitor.ClearBuffer*
        name: ClearBuffer
        nameWithType: GestureMonitor.ClearBuffer
        qualifiedName: Gestures.GestureMonitor.ClearBuffer
    isDefinition: true
    commentId: Overload:Gestures.GestureMonitor.ClearBuffer
  Gestures.GestureMonitor:
    name:
      CSharp:
      - id: Gestures.GestureMonitor
        name: GestureMonitor
        nameWithType: GestureMonitor
        qualifiedName: Gestures.GestureMonitor
      VB:
      - id: Gestures.GestureMonitor
        name: GestureMonitor
        nameWithType: GestureMonitor
        qualifiedName: Gestures.GestureMonitor
    isDefinition: true
    commentId: T:Gestures.GestureMonitor
  Quaternion:
    name:
      CSharp:
      - id: Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      VB:
      - id: Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
    isDefinition: true
  Gestures.GTransform.#ctor*:
    name:
      CSharp:
      - id: Gestures.GTransform.#ctor*
        name: GTransform
        nameWithType: GTransform.GTransform
        qualifiedName: Gestures.GTransform.GTransform
      VB:
      - id: Gestures.GTransform.#ctor*
        name: GTransform
        nameWithType: GTransform.GTransform
        qualifiedName: Gestures.GTransform.GTransform
    isDefinition: true
    commentId: Overload:Gestures.GTransform.#ctor
  Gestures.GTransform.Copy*:
    name:
      CSharp:
      - id: Gestures.GTransform.Copy*
        name: Copy
        nameWithType: GTransform.Copy
        qualifiedName: Gestures.GTransform.Copy
      VB:
      - id: Gestures.GTransform.Copy*
        name: Copy
        nameWithType: GTransform.Copy
        qualifiedName: Gestures.GTransform.Copy
    isDefinition: true
    commentId: Overload:Gestures.GTransform.Copy
  System.Collections.Generic.IEnumerable{Gestures.GTransform}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Gestures.GTransform}
  System.Collections:
    name:
      CSharp:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
        isExternal: true
      VB:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IEnumerable:
    name:
      CSharp:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      VB:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerable
  Gestures.GTransformBuffer.#ctor*:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer.#ctor*
        name: GTransformBuffer
        nameWithType: GTransformBuffer.GTransformBuffer
        qualifiedName: Gestures.GTransformBuffer.GTransformBuffer
      VB:
      - id: Gestures.GTransformBuffer.#ctor*
        name: GTransformBuffer
        nameWithType: GTransformBuffer.GTransformBuffer
        qualifiedName: Gestures.GTransformBuffer.GTransformBuffer
    isDefinition: true
    commentId: Overload:Gestures.GTransformBuffer.#ctor
  Gestures.GTransformBuffer.Enqueue*:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer.Enqueue*
        name: Enqueue
        nameWithType: GTransformBuffer.Enqueue
        qualifiedName: Gestures.GTransformBuffer.Enqueue
      VB:
      - id: Gestures.GTransformBuffer.Enqueue*
        name: Enqueue
        nameWithType: GTransformBuffer.Enqueue
        qualifiedName: Gestures.GTransformBuffer.Enqueue
    isDefinition: true
    commentId: Overload:Gestures.GTransformBuffer.Enqueue
  Gestures.GTransformBuffer.SetMaxSize*:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer.SetMaxSize*
        name: SetMaxSize
        nameWithType: GTransformBuffer.SetMaxSize
        qualifiedName: Gestures.GTransformBuffer.SetMaxSize
      VB:
      - id: Gestures.GTransformBuffer.SetMaxSize*
        name: SetMaxSize
        nameWithType: GTransformBuffer.SetMaxSize
        qualifiedName: Gestures.GTransformBuffer.SetMaxSize
    isDefinition: true
    commentId: Overload:Gestures.GTransformBuffer.SetMaxSize
  Gestures.GTransformBuffer.SetCircular*:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer.SetCircular*
        name: SetCircular
        nameWithType: GTransformBuffer.SetCircular
        qualifiedName: Gestures.GTransformBuffer.SetCircular
      VB:
      - id: Gestures.GTransformBuffer.SetCircular*
        name: SetCircular
        nameWithType: GTransformBuffer.SetCircular
        qualifiedName: Gestures.GTransformBuffer.SetCircular
    isDefinition: true
    commentId: Overload:Gestures.GTransformBuffer.SetCircular
  Gestures.GTransformBuffer.Size*:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer.Size*
        name: Size
        nameWithType: GTransformBuffer.Size
        qualifiedName: Gestures.GTransformBuffer.Size
      VB:
      - id: Gestures.GTransformBuffer.Size*
        name: Size
        nameWithType: GTransformBuffer.Size
        qualifiedName: Gestures.GTransformBuffer.Size
    isDefinition: true
    commentId: Overload:Gestures.GTransformBuffer.Size
  Gestures.GTransformBuffer.Dequeue*:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer.Dequeue*
        name: Dequeue
        nameWithType: GTransformBuffer.Dequeue
        qualifiedName: Gestures.GTransformBuffer.Dequeue
      VB:
      - id: Gestures.GTransformBuffer.Dequeue*
        name: Dequeue
        nameWithType: GTransformBuffer.Dequeue
        qualifiedName: Gestures.GTransformBuffer.Dequeue
    isDefinition: true
    commentId: Overload:Gestures.GTransformBuffer.Dequeue
  Gestures.GTransformBuffer.Clear*:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer.Clear*
        name: Clear
        nameWithType: GTransformBuffer.Clear
        qualifiedName: Gestures.GTransformBuffer.Clear
      VB:
      - id: Gestures.GTransformBuffer.Clear*
        name: Clear
        nameWithType: GTransformBuffer.Clear
        qualifiedName: Gestures.GTransformBuffer.Clear
    isDefinition: true
    commentId: Overload:Gestures.GTransformBuffer.Clear
  System.Collections.Generic.IEnumerator`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerator`1
  System.Collections.Generic.IEnumerator{Gestures.GTransform}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerator`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerator{Gestures.GTransform}
  Gestures.GTransformBuffer.GetEnumerator*:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer.GetEnumerator*
        name: GetEnumerator
        nameWithType: GTransformBuffer.GetEnumerator
        qualifiedName: Gestures.GTransformBuffer.GetEnumerator
      VB:
      - id: Gestures.GTransformBuffer.GetEnumerator*
        name: GetEnumerator
        nameWithType: GTransformBuffer.GetEnumerator
        qualifiedName: Gestures.GTransformBuffer.GetEnumerator
    isDefinition: true
    commentId: Overload:Gestures.GTransformBuffer.GetEnumerator
  System.Collections.Generic.IEnumerable`1.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable<T>.GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable(Of T).GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  System.Collections.Generic.IEnumerable{Gestures.GTransform}.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable<GTransform>.GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable<Gestures.GTransform>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable(Of GTransform).GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable(Of Gestures.GTransform).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
    parent: System.Collections.Generic.IEnumerable{Gestures.GTransform}
    commentId: M:System.Collections.Generic.IEnumerable{Gestures.GTransform}.GetEnumerator
  System.Collections.IEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      VB:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerator
  Gestures.GTransformBuffer.System#Collections#IEnumerable#GetEnumerator*:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer.System#Collections#IEnumerable#GetEnumerator*
        name: IEnumerable.GetEnumerator
        nameWithType: GTransformBuffer.IEnumerable.GetEnumerator
        qualifiedName: Gestures.GTransformBuffer.System.Collections.IEnumerable.GetEnumerator
      VB:
      - id: Gestures.GTransformBuffer.System#Collections#IEnumerable#GetEnumerator*
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: GTransformBuffer.System.Collections.IEnumerable.GetEnumerator
        qualifiedName: Gestures.GTransformBuffer.System.Collections.IEnumerable.GetEnumerator
    isDefinition: true
    commentId: Overload:Gestures.GTransformBuffer.System#Collections#IEnumerable#GetEnumerator
  System.Collections.IEnumerable.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable.GetEnumerator
        qualifiedName: System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable.GetEnumerator
        qualifiedName: System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Collections.IEnumerable
    commentId: M:System.Collections.IEnumerable.GetEnumerator
  Vector3[]:
    name:
      CSharp:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Gestures.GTransformBuffer.ToArray*:
    name:
      CSharp:
      - id: Gestures.GTransformBuffer.ToArray*
        name: ToArray
        nameWithType: GTransformBuffer.ToArray
        qualifiedName: Gestures.GTransformBuffer.ToArray
      VB:
      - id: Gestures.GTransformBuffer.ToArray*
        name: ToArray
        nameWithType: GTransformBuffer.ToArray
        qualifiedName: Gestures.GTransformBuffer.ToArray
    isDefinition: true
    commentId: Overload:Gestures.GTransformBuffer.ToArray
  Gestures.GestureVisualizerWindow:
    name:
      CSharp:
      - id: Gestures.GestureVisualizerWindow
        name: GestureVisualizerWindow
        nameWithType: GestureVisualizerWindow
        qualifiedName: Gestures.GestureVisualizerWindow
      VB:
      - id: Gestures.GestureVisualizerWindow
        name: GestureVisualizerWindow
        nameWithType: GestureVisualizerWindow
        qualifiedName: Gestures.GestureVisualizerWindow
    isDefinition: true
    commentId: T:Gestures.GestureVisualizerWindow
  Gestures.FittedNormalizer.#ctor*:
    name:
      CSharp:
      - id: Gestures.FittedNormalizer.#ctor*
        name: FittedNormalizer
        nameWithType: FittedNormalizer.FittedNormalizer
        qualifiedName: Gestures.FittedNormalizer.FittedNormalizer
      VB:
      - id: Gestures.FittedNormalizer.#ctor*
        name: FittedNormalizer
        nameWithType: FittedNormalizer.FittedNormalizer
        qualifiedName: Gestures.FittedNormalizer.FittedNormalizer
    isDefinition: true
    commentId: Overload:Gestures.FittedNormalizer.#ctor
  Gestures.FittedNormalizer.Normalize*:
    name:
      CSharp:
      - id: Gestures.FittedNormalizer.Normalize*
        name: Normalize
        nameWithType: FittedNormalizer.Normalize
        qualifiedName: Gestures.FittedNormalizer.Normalize
      VB:
      - id: Gestures.FittedNormalizer.Normalize*
        name: Normalize
        nameWithType: FittedNormalizer.Normalize
        qualifiedName: Gestures.FittedNormalizer.Normalize
    isDefinition: true
    commentId: Overload:Gestures.FittedNormalizer.Normalize
  Gestures.Normalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform}):
    name:
      CSharp:
      - id: Gestures.Normalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
        name: Normalize
        nameWithType: Normalizer.Normalize
        qualifiedName: Gestures.Normalizer.Normalize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Gestures.Normalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
        name: Normalize
        nameWithType: Normalizer.Normalize
        qualifiedName: Gestures.Normalizer.Normalize
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Gestures.GTransform
        name: GTransform
        nameWithType: GTransform
        qualifiedName: Gestures.GTransform
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Gestures.Normalizer
    commentId: M:Gestures.Normalizer.Normalize(System.Collections.Generic.List{Gestures.GTransform})
  Gestures.FittedNormalizer:
    name:
      CSharp:
      - id: Gestures.FittedNormalizer
        name: FittedNormalizer
        nameWithType: FittedNormalizer
        qualifiedName: Gestures.FittedNormalizer
      VB:
      - id: Gestures.FittedNormalizer
        name: FittedNormalizer
        nameWithType: FittedNormalizer
        qualifiedName: Gestures.FittedNormalizer
    isDefinition: true
    commentId: T:Gestures.FittedNormalizer
  Gestures.FittedNormalizer.MinMaxDelegate:
    name:
      CSharp:
      - id: Gestures.FittedNormalizer.MinMaxDelegate
        name: FittedNormalizer.MinMaxDelegate
        nameWithType: FittedNormalizer.MinMaxDelegate
        qualifiedName: Gestures.FittedNormalizer.MinMaxDelegate
      VB:
      - id: Gestures.FittedNormalizer.MinMaxDelegate
        name: FittedNormalizer.MinMaxDelegate
        nameWithType: FittedNormalizer.MinMaxDelegate
        qualifiedName: Gestures.FittedNormalizer.MinMaxDelegate
    isDefinition: true
    commentId: T:Gestures.FittedNormalizer.MinMaxDelegate
  Gestures.LineNormalizer.Normalize*:
    name:
      CSharp:
      - id: Gestures.LineNormalizer.Normalize*
        name: Normalize
        nameWithType: LineNormalizer.Normalize
        qualifiedName: Gestures.LineNormalizer.Normalize
      VB:
      - id: Gestures.LineNormalizer.Normalize*
        name: Normalize
        nameWithType: LineNormalizer.Normalize
        qualifiedName: Gestures.LineNormalizer.Normalize
    isDefinition: true
    commentId: Overload:Gestures.LineNormalizer.Normalize
  Vector2:
    name:
      CSharp:
      - id: Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      VB:
      - id: Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
    isDefinition: true
  Gestures.LineNormalizer.Abs*:
    name:
      CSharp:
      - id: Gestures.LineNormalizer.Abs*
        name: Abs
        nameWithType: LineNormalizer.Abs
        qualifiedName: Gestures.LineNormalizer.Abs
      VB:
      - id: Gestures.LineNormalizer.Abs*
        name: Abs
        nameWithType: LineNormalizer.Abs
        qualifiedName: Gestures.LineNormalizer.Abs
    isDefinition: true
    commentId: Overload:Gestures.LineNormalizer.Abs
  Gestures.LineNormalizer:
    name:
      CSharp:
      - id: Gestures.LineNormalizer
        name: LineNormalizer
        nameWithType: LineNormalizer
        qualifiedName: Gestures.LineNormalizer
      VB:
      - id: Gestures.LineNormalizer
        name: LineNormalizer
        nameWithType: LineNormalizer
        qualifiedName: Gestures.LineNormalizer
    isDefinition: true
    commentId: T:Gestures.LineNormalizer
  Gestures.Normalizer.Normalize*:
    name:
      CSharp:
      - id: Gestures.Normalizer.Normalize*
        name: Normalize
        nameWithType: Normalizer.Normalize
        qualifiedName: Gestures.Normalizer.Normalize
      VB:
      - id: Gestures.Normalizer.Normalize*
        name: Normalize
        nameWithType: Normalizer.Normalize
        qualifiedName: Gestures.Normalizer.Normalize
    isDefinition: true
    commentId: Overload:Gestures.Normalizer.Normalize
  Transform:
    name:
      CSharp:
      - id: Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
      VB:
      - id: Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
    isDefinition: true
    commentId: '!:Transform'
  Gestures.ViewNormalizer.#ctor*:
    name:
      CSharp:
      - id: Gestures.ViewNormalizer.#ctor*
        name: ViewNormalizer
        nameWithType: ViewNormalizer.ViewNormalizer
        qualifiedName: Gestures.ViewNormalizer.ViewNormalizer
      VB:
      - id: Gestures.ViewNormalizer.#ctor*
        name: ViewNormalizer
        nameWithType: ViewNormalizer.ViewNormalizer
        qualifiedName: Gestures.ViewNormalizer.ViewNormalizer
    isDefinition: true
    commentId: Overload:Gestures.ViewNormalizer.#ctor
  Gestures.ViewNormalizer.Normalize*:
    name:
      CSharp:
      - id: Gestures.ViewNormalizer.Normalize*
        name: Normalize
        nameWithType: ViewNormalizer.Normalize
        qualifiedName: Gestures.ViewNormalizer.Normalize
      VB:
      - id: Gestures.ViewNormalizer.Normalize*
        name: Normalize
        nameWithType: ViewNormalizer.Normalize
        qualifiedName: Gestures.ViewNormalizer.Normalize
    isDefinition: true
    commentId: Overload:Gestures.ViewNormalizer.Normalize
  Gestures.ViewNormalizer:
    name:
      CSharp:
      - id: Gestures.ViewNormalizer
        name: ViewNormalizer
        nameWithType: ViewNormalizer
        qualifiedName: Gestures.ViewNormalizer
      VB:
      - id: Gestures.ViewNormalizer
        name: ViewNormalizer
        nameWithType: ViewNormalizer
        qualifiedName: Gestures.ViewNormalizer
    isDefinition: true
    commentId: T:Gestures.ViewNormalizer
  Gradient:
    name:
      CSharp:
      - id: Gradient
        name: Gradient
        nameWithType: Gradient
        qualifiedName: Gradient
        isExternal: true
      VB:
      - id: Gradient
        name: Gradient
        nameWithType: Gradient
        qualifiedName: Gradient
        isExternal: true
    isDefinition: true
  Color:
    name:
      CSharp:
      - id: Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
      VB:
      - id: Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
    isDefinition: true
  UnityEvent:
    name:
      CSharp:
      - id: UnityEvent
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      VB:
      - id: UnityEvent
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
    isDefinition: true
  LayerMask:
    name:
      CSharp:
      - id: LayerMask
        name: LayerMask
        nameWithType: LayerMask
        qualifiedName: LayerMask
        isExternal: true
      VB:
      - id: LayerMask
        name: LayerMask
        nameWithType: LayerMask
        qualifiedName: LayerMask
        isExternal: true
    isDefinition: true
  GameObject:
    name:
      CSharp:
      - id: GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
      VB:
      - id: GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
    isDefinition: true
  UI.NewButtonScript.setEnabled*:
    name:
      CSharp:
      - id: UI.NewButtonScript.setEnabled*
        name: setEnabled
        nameWithType: NewButtonScript.setEnabled
        qualifiedName: UI.NewButtonScript.setEnabled
      VB:
      - id: UI.NewButtonScript.setEnabled*
        name: setEnabled
        nameWithType: NewButtonScript.setEnabled
        qualifiedName: UI.NewButtonScript.setEnabled
    isDefinition: true
    commentId: Overload:UI.NewButtonScript.setEnabled
  UI.NewButtonScript.setHovered*:
    name:
      CSharp:
      - id: UI.NewButtonScript.setHovered*
        name: setHovered
        nameWithType: NewButtonScript.setHovered
        qualifiedName: UI.NewButtonScript.setHovered
      VB:
      - id: UI.NewButtonScript.setHovered*
        name: setHovered
        nameWithType: NewButtonScript.setHovered
        qualifiedName: UI.NewButtonScript.setHovered
    isDefinition: true
    commentId: Overload:UI.NewButtonScript.setHovered
  UI.NewButtonScript.setPressed*:
    name:
      CSharp:
      - id: UI.NewButtonScript.setPressed*
        name: setPressed
        nameWithType: NewButtonScript.setPressed
        qualifiedName: UI.NewButtonScript.setPressed
      VB:
      - id: UI.NewButtonScript.setPressed*
        name: setPressed
        nameWithType: NewButtonScript.setPressed
        qualifiedName: UI.NewButtonScript.setPressed
    isDefinition: true
    commentId: Overload:UI.NewButtonScript.setPressed
  UI.NewButtonScript.setDisabled*:
    name:
      CSharp:
      - id: UI.NewButtonScript.setDisabled*
        name: setDisabled
        nameWithType: NewButtonScript.setDisabled
        qualifiedName: UI.NewButtonScript.setDisabled
      VB:
      - id: UI.NewButtonScript.setDisabled*
        name: setDisabled
        nameWithType: NewButtonScript.setDisabled
        qualifiedName: UI.NewButtonScript.setDisabled
    isDefinition: true
    commentId: Overload:UI.NewButtonScript.setDisabled
  UI.NewButtonScript.setHoveringlayer*:
    name:
      CSharp:
      - id: UI.NewButtonScript.setHoveringlayer*
        name: setHoveringlayer
        nameWithType: NewButtonScript.setHoveringlayer
        qualifiedName: UI.NewButtonScript.setHoveringlayer
      VB:
      - id: UI.NewButtonScript.setHoveringlayer*
        name: setHoveringlayer
        nameWithType: NewButtonScript.setHoveringlayer
        qualifiedName: UI.NewButtonScript.setHoveringlayer
    isDefinition: true
    commentId: Overload:UI.NewButtonScript.setHoveringlayer
  UI.NewButtonScript.setActivatinglayer*:
    name:
      CSharp:
      - id: UI.NewButtonScript.setActivatinglayer*
        name: setActivatinglayer
        nameWithType: NewButtonScript.setActivatinglayer
        qualifiedName: UI.NewButtonScript.setActivatinglayer
      VB:
      - id: UI.NewButtonScript.setActivatinglayer*
        name: setActivatinglayer
        nameWithType: NewButtonScript.setActivatinglayer
        qualifiedName: UI.NewButtonScript.setActivatinglayer
    isDefinition: true
    commentId: Overload:UI.NewButtonScript.setActivatinglayer
  UI.NewButtonScript:
    name:
      CSharp:
      - id: UI.NewButtonScript
        name: NewButtonScript
        nameWithType: NewButtonScript
        qualifiedName: UI.NewButtonScript
      VB:
      - id: UI.NewButtonScript
        name: NewButtonScript
        nameWithType: NewButtonScript
        qualifiedName: UI.NewButtonScript
    isDefinition: true
    commentId: T:UI.NewButtonScript
  UI.DropDownControl.interactable_*:
    name:
      CSharp:
      - id: UI.DropDownControl.interactable_*
        name: interactable_
        nameWithType: DropDownControl.interactable_
        qualifiedName: UI.DropDownControl.interactable_
      VB:
      - id: UI.DropDownControl.interactable_*
        name: interactable_
        nameWithType: DropDownControl.interactable_
        qualifiedName: UI.DropDownControl.interactable_
    isDefinition: true
    commentId: Overload:UI.DropDownControl.interactable_
  Slider:
    name:
      CSharp:
      - id: Slider
        name: Slider
        nameWithType: Slider
        qualifiedName: Slider
        isExternal: true
      VB:
      - id: Slider
        name: Slider
        nameWithType: Slider
        qualifiedName: Slider
        isExternal: true
    isDefinition: true
    commentId: '!:Slider'
  TextMesh:
    name:
      CSharp:
      - id: TextMesh
        name: TextMesh
        nameWithType: TextMesh
        qualifiedName: TextMesh
        isExternal: true
      VB:
      - id: TextMesh
        name: TextMesh
        nameWithType: TextMesh
        qualifiedName: TextMesh
        isExternal: true
    isDefinition: true
    commentId: '!:TextMesh'
  UI:
    name:
      CSharp:
      - name: UI
        nameWithType: UI
        qualifiedName: UI
      VB:
      - name: UI
        nameWithType: UI
        qualifiedName: UI
    isDefinition: true
    commentId: N:UI
  UI.DropDownControl.onValueChange:
    name:
      CSharp:
      - id: UI.DropDownControl.onValueChange
        name: DropDownControl.onValueChange
        nameWithType: DropDownControl.onValueChange
        qualifiedName: UI.DropDownControl.onValueChange
      VB:
      - id: UI.DropDownControl.onValueChange
        name: DropDownControl.onValueChange
        nameWithType: DropDownControl.onValueChange
        qualifiedName: UI.DropDownControl.onValueChange
    isDefinition: true
    parent: UI
    commentId: T:UI.DropDownControl.onValueChange
  UI.DropDownControl.Option[]:
    name:
      CSharp:
      - id: UI.DropDownControl.Option
        name: DropDownControl.Option
        nameWithType: DropDownControl.Option
        qualifiedName: UI.DropDownControl.Option
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: UI.DropDownControl.Option
        name: DropDownControl.Option
        nameWithType: DropDownControl.Option
        qualifiedName: UI.DropDownControl.Option
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  UI.DropDownControl.SliderUpdate*:
    name:
      CSharp:
      - id: UI.DropDownControl.SliderUpdate*
        name: SliderUpdate
        nameWithType: DropDownControl.SliderUpdate
        qualifiedName: UI.DropDownControl.SliderUpdate
      VB:
      - id: UI.DropDownControl.SliderUpdate*
        name: SliderUpdate
        nameWithType: DropDownControl.SliderUpdate
        qualifiedName: UI.DropDownControl.SliderUpdate
    isDefinition: true
    commentId: Overload:UI.DropDownControl.SliderUpdate
  UI.DropDownControl.closeAndPick*:
    name:
      CSharp:
      - id: UI.DropDownControl.closeAndPick*
        name: closeAndPick
        nameWithType: DropDownControl.closeAndPick
        qualifiedName: UI.DropDownControl.closeAndPick
      VB:
      - id: UI.DropDownControl.closeAndPick*
        name: closeAndPick
        nameWithType: DropDownControl.closeAndPick
        qualifiedName: UI.DropDownControl.closeAndPick
    isDefinition: true
    commentId: Overload:UI.DropDownControl.closeAndPick
  UI.DropDownControl.setHoveringlayer*:
    name:
      CSharp:
      - id: UI.DropDownControl.setHoveringlayer*
        name: setHoveringlayer
        nameWithType: DropDownControl.setHoveringlayer
        qualifiedName: UI.DropDownControl.setHoveringlayer
      VB:
      - id: UI.DropDownControl.setHoveringlayer*
        name: setHoveringlayer
        nameWithType: DropDownControl.setHoveringlayer
        qualifiedName: UI.DropDownControl.setHoveringlayer
    isDefinition: true
    commentId: Overload:UI.DropDownControl.setHoveringlayer
  UI.DropDownControl.setActivatinglayer*:
    name:
      CSharp:
      - id: UI.DropDownControl.setActivatinglayer*
        name: setActivatinglayer
        nameWithType: DropDownControl.setActivatinglayer
        qualifiedName: UI.DropDownControl.setActivatinglayer
      VB:
      - id: UI.DropDownControl.setActivatinglayer*
        name: setActivatinglayer
        nameWithType: DropDownControl.setActivatinglayer
        qualifiedName: UI.DropDownControl.setActivatinglayer
    isDefinition: true
    commentId: Overload:UI.DropDownControl.setActivatinglayer
  UI.DropDownControl:
    name:
      CSharp:
      - id: UI.DropDownControl
        name: DropDownControl
        nameWithType: DropDownControl
        qualifiedName: UI.DropDownControl
      VB:
      - id: UI.DropDownControl
        name: DropDownControl
        nameWithType: DropDownControl
        qualifiedName: UI.DropDownControl
    isDefinition: true
    commentId: T:UI.DropDownControl
  UI.DropDownControl.Option.#ctor*:
    name:
      CSharp:
      - id: UI.DropDownControl.Option.#ctor*
        name: Option
        nameWithType: DropDownControl.Option.Option
        qualifiedName: UI.DropDownControl.Option.Option
      VB:
      - id: UI.DropDownControl.Option.#ctor*
        name: Option
        nameWithType: DropDownControl.Option.Option
        qualifiedName: UI.DropDownControl.Option.Option
    isDefinition: true
    commentId: Overload:UI.DropDownControl.Option.#ctor
  UI.DropDownControl.Option:
    name:
      CSharp:
      - id: UI.DropDownControl.Option
        name: DropDownControl.Option
        nameWithType: DropDownControl.Option
        qualifiedName: UI.DropDownControl.Option
      VB:
      - id: UI.DropDownControl.Option
        name: DropDownControl.Option
        nameWithType: DropDownControl.Option
        qualifiedName: UI.DropDownControl.Option
    isDefinition: true
    commentId: T:UI.DropDownControl.Option
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  Text:
    name:
      CSharp:
      - id: Text
        name: Text
        nameWithType: Text
        qualifiedName: Text
        isExternal: true
      VB:
      - id: Text
        name: Text
        nameWithType: Text
        qualifiedName: Text
        isExternal: true
    isDefinition: true
  UI.BackTextScript.AddText*:
    name:
      CSharp:
      - id: UI.BackTextScript.AddText*
        name: AddText
        nameWithType: BackTextScript.AddText
        qualifiedName: UI.BackTextScript.AddText
      VB:
      - id: UI.BackTextScript.AddText*
        name: AddText
        nameWithType: BackTextScript.AddText
        qualifiedName: UI.BackTextScript.AddText
    isDefinition: true
    commentId: Overload:UI.BackTextScript.AddText
  UI.BackTextScript:
    name:
      CSharp:
      - id: UI.BackTextScript
        name: BackTextScript
        nameWithType: BackTextScript
        qualifiedName: UI.BackTextScript
      VB:
      - id: UI.BackTextScript
        name: BackTextScript
        nameWithType: BackTextScript
        qualifiedName: UI.BackTextScript
    isDefinition: true
    commentId: T:UI.BackTextScript
  UI.ButtonScript:
    name:
      CSharp:
      - id: UI.ButtonScript
        name: ButtonScript
        nameWithType: ButtonScript
        qualifiedName: UI.ButtonScript
      VB:
      - id: UI.ButtonScript
        name: ButtonScript
        nameWithType: ButtonScript
        qualifiedName: UI.ButtonScript
    isDefinition: true
    commentId: T:UI.ButtonScript
  UI.EnterTextScript.AddText*:
    name:
      CSharp:
      - id: UI.EnterTextScript.AddText*
        name: AddText
        nameWithType: EnterTextScript.AddText
        qualifiedName: UI.EnterTextScript.AddText
      VB:
      - id: UI.EnterTextScript.AddText*
        name: AddText
        nameWithType: EnterTextScript.AddText
        qualifiedName: UI.EnterTextScript.AddText
    isDefinition: true
    commentId: Overload:UI.EnterTextScript.AddText
  UI.EnterTextScript:
    name:
      CSharp:
      - id: UI.EnterTextScript
        name: EnterTextScript
        nameWithType: EnterTextScript
        qualifiedName: UI.EnterTextScript
      VB:
      - id: UI.EnterTextScript
        name: EnterTextScript
        nameWithType: EnterTextScript
        qualifiedName: UI.EnterTextScript
    isDefinition: true
    commentId: T:UI.EnterTextScript
  UI.Pointer:
    name:
      CSharp:
      - id: UI.Pointer
        name: Pointer
        nameWithType: Pointer
        qualifiedName: UI.Pointer
      VB:
      - id: UI.Pointer
        name: Pointer
        nameWithType: Pointer
        qualifiedName: UI.Pointer
    isDefinition: true
    commentId: T:UI.Pointer
  System.Char:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Char
  UI.TextScript.AddText*:
    name:
      CSharp:
      - id: UI.TextScript.AddText*
        name: AddText
        nameWithType: TextScript.AddText
        qualifiedName: UI.TextScript.AddText
      VB:
      - id: UI.TextScript.AddText*
        name: AddText
        nameWithType: TextScript.AddText
        qualifiedName: UI.TextScript.AddText
    isDefinition: true
    commentId: Overload:UI.TextScript.AddText
  UI.TextScript:
    name:
      CSharp:
      - id: UI.TextScript
        name: TextScript
        nameWithType: TextScript
        qualifiedName: UI.TextScript
      VB:
      - id: UI.TextScript
        name: TextScript
        nameWithType: TextScript
        qualifiedName: UI.TextScript
    isDefinition: true
    commentId: T:UI.TextScript
  System.Collections.ArrayList:
    name:
      CSharp:
      - id: System.Collections.ArrayList
        name: ArrayList
        nameWithType: ArrayList
        qualifiedName: System.Collections.ArrayList
        isExternal: true
      VB:
      - id: System.Collections.ArrayList
        name: ArrayList
        nameWithType: ArrayList
        qualifiedName: System.Collections.ArrayList
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.ArrayList
  UI.DisappearAtDistance:
    name:
      CSharp:
      - id: UI.DisappearAtDistance
        name: DisappearAtDistance
        nameWithType: DisappearAtDistance
        qualifiedName: UI.DisappearAtDistance
      VB:
      - id: UI.DisappearAtDistance
        name: DisappearAtDistance
        nameWithType: DisappearAtDistance
        qualifiedName: UI.DisappearAtDistance
    isDefinition: true
    commentId: T:UI.DisappearAtDistance
  UI.RotateToUser:
    name:
      CSharp:
      - id: UI.RotateToUser
        name: RotateToUser
        nameWithType: RotateToUser
        qualifiedName: UI.RotateToUser
      VB:
      - id: UI.RotateToUser
        name: RotateToUser
        nameWithType: RotateToUser
        qualifiedName: UI.RotateToUser
    isDefinition: true
    commentId: T:UI.RotateToUser
  UI.ScaleToUser:
    name:
      CSharp:
      - id: UI.ScaleToUser
        name: ScaleToUser
        nameWithType: ScaleToUser
        qualifiedName: UI.ScaleToUser
      VB:
      - id: UI.ScaleToUser
        name: ScaleToUser
        nameWithType: ScaleToUser
        qualifiedName: UI.ScaleToUser
    isDefinition: true
    commentId: T:UI.ScaleToUser
  UI.SetCorrectCameraHeight:
    name:
      CSharp:
      - id: UI.SetCorrectCameraHeight
        name: SetCorrectCameraHeight
        nameWithType: SetCorrectCameraHeight
        qualifiedName: UI.SetCorrectCameraHeight
      VB:
      - id: UI.SetCorrectCameraHeight
        name: SetCorrectCameraHeight
        nameWithType: SetCorrectCameraHeight
        qualifiedName: UI.SetCorrectCameraHeight
    isDefinition: true
    commentId: T:UI.SetCorrectCameraHeight
  UI.BackButtonLogic:
    name:
      CSharp:
      - id: UI.BackButtonLogic
        name: BackButtonLogic
        nameWithType: BackButtonLogic
        qualifiedName: UI.BackButtonLogic
      VB:
      - id: UI.BackButtonLogic
        name: BackButtonLogic
        nameWithType: BackButtonLogic
        qualifiedName: UI.BackButtonLogic
    isDefinition: true
    commentId: T:UI.BackButtonLogic
  UnityEngine.UI.Text:
    name:
      CSharp:
      - id: UnityEngine.UI.Text
        name: Text
        nameWithType: Text
        qualifiedName: UnityEngine.UI.Text
        isExternal: true
      VB:
      - id: UnityEngine.UI.Text
        name: Text
        nameWithType: Text
        qualifiedName: UnityEngine.UI.Text
        isExternal: true
    isDefinition: true
    commentId: '!:UnityEngine.UI.Text'
  UI.UIInteraction.OnButtonClicked*:
    name:
      CSharp:
      - id: UI.UIInteraction.OnButtonClicked*
        name: OnButtonClicked
        nameWithType: UIInteraction.OnButtonClicked
        qualifiedName: UI.UIInteraction.OnButtonClicked
      VB:
      - id: UI.UIInteraction.OnButtonClicked*
        name: OnButtonClicked
        nameWithType: UIInteraction.OnButtonClicked
        qualifiedName: UI.UIInteraction.OnButtonClicked
    isDefinition: true
    commentId: Overload:UI.UIInteraction.OnButtonClicked
  UI.UIInteraction.OnSliderChanged*:
    name:
      CSharp:
      - id: UI.UIInteraction.OnSliderChanged*
        name: OnSliderChanged
        nameWithType: UIInteraction.OnSliderChanged
        qualifiedName: UI.UIInteraction.OnSliderChanged
      VB:
      - id: UI.UIInteraction.OnSliderChanged*
        name: OnSliderChanged
        nameWithType: UIInteraction.OnSliderChanged
        qualifiedName: UI.UIInteraction.OnSliderChanged
    isDefinition: true
    commentId: Overload:UI.UIInteraction.OnSliderChanged
  UI.UIInteraction.OnToggleChanged*:
    name:
      CSharp:
      - id: UI.UIInteraction.OnToggleChanged*
        name: OnToggleChanged
        nameWithType: UIInteraction.OnToggleChanged
        qualifiedName: UI.UIInteraction.OnToggleChanged
      VB:
      - id: UI.UIInteraction.OnToggleChanged*
        name: OnToggleChanged
        nameWithType: UIInteraction.OnToggleChanged
        qualifiedName: UI.UIInteraction.OnToggleChanged
    isDefinition: true
    commentId: Overload:UI.UIInteraction.OnToggleChanged
  UI.UIInteraction.OnClearText*:
    name:
      CSharp:
      - id: UI.UIInteraction.OnClearText*
        name: OnClearText
        nameWithType: UIInteraction.OnClearText
        qualifiedName: UI.UIInteraction.OnClearText
      VB:
      - id: UI.UIInteraction.OnClearText*
        name: OnClearText
        nameWithType: UIInteraction.OnClearText
        qualifiedName: UI.UIInteraction.OnClearText
    isDefinition: true
    commentId: Overload:UI.UIInteraction.OnClearText
  UI.UIInteraction.OnBackToMenu*:
    name:
      CSharp:
      - id: UI.UIInteraction.OnBackToMenu*
        name: OnBackToMenu
        nameWithType: UIInteraction.OnBackToMenu
        qualifiedName: UI.UIInteraction.OnBackToMenu
      VB:
      - id: UI.UIInteraction.OnBackToMenu*
        name: OnBackToMenu
        nameWithType: UIInteraction.OnBackToMenu
        qualifiedName: UI.UIInteraction.OnBackToMenu
    isDefinition: true
    commentId: Overload:UI.UIInteraction.OnBackToMenu
  UI.UIInteraction:
    name:
      CSharp:
      - id: UI.UIInteraction
        name: UIInteraction
        nameWithType: UIInteraction
        qualifiedName: UI.UIInteraction
      VB:
      - id: UI.UIInteraction
        name: UIInteraction
        nameWithType: UIInteraction
        qualifiedName: UI.UIInteraction
    isDefinition: true
    commentId: T:UI.UIInteraction
